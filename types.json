{
  "acceptCall": {
    "type": "function",
    "desc": "Accepts an incoming call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "The call protocols supported by the application.",
        "name": "protocol",
        "type": "callProtocol"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1accept_call.html"
  },
  "acceptTermsOfService": {
    "type": "function",
    "desc": "Accepts Telegram terms of services.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Terms of service identifier.",
        "name": "terms_of_service_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1accept_terms_of_service.html"
  },
  "activateStoryStealthMode": {
    "type": "function",
    "desc": "Activates stealth mode for stories, which hides all views of stories from the current user in the last \"story_stealth_mode_past_period\" seconds and for the next \"story_stealth_mode_future_period\" seconds; for Telegram Premium users only.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1activate_story_stealth_mode.html"
  },
  "addApplicationChangelog": {
    "type": "function",
    "desc": "Adds server-provided application changelog as messages to the chat 777000 (Telegram) or as a stories; for official applications only. Returns a 404 error if nothing changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The previous application version.",
        "name": "previous_application_version",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_application_changelog.html"
  },
  "addChatFolderByInviteLink": {
    "type": "function",
    "desc": "Adds a chat folder by an invite link.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Invite link for the chat folder.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "Identifiers of the chats added to the chat folder. The chats are automatically joined if they aren't joined yet.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_folder_by_invite_link.html"
  },
  "addChatMember": {
    "type": "function",
    "desc": "Adds a new member to a chat. Members can't be added to private or secret chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.",
        "name": "forward_limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_member.html"
  },
  "addChatMembers": {
    "type": "function",
    "desc": "Adds multiple new members to a chat. Currently, this method is only available for supergroups and channels. This method can't be used to join a chat. Members can't be added to a channel if it has more than 200 members.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the users to be added to the chat. The maximum number of added users is 20 for supergroups and 100 for channels.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_members.html"
  },
  "addChatToList": {
    "type": "function",
    "desc": "Adds a chat to a chat list. A chat can't be simultaneously in Main and Archive chat lists, so it is automatically removed from another one if needed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The chat list. Use getChatListsToAddChat to get suitable chat lists.",
        "name": "chat_list",
        "type": "ChatList"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_chat_to_list.html"
  },
  "addContact": {
    "type": "function",
    "desc": "Adds a user to the contact list or edits an existing contact by their user identifier.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The contact to add or edit; phone number may be empty and needs to be specified only if known, vCard is ignored.",
        "name": "contact",
        "type": "contact"
      },
      {
        "desc": "Pass true to share the current user's phone number with the new contact. A corresponding rule to userPrivacySettingShowPhoneNumber will be added if needed. Use the field userFullInfo.need_phone_number_privacy_exception to check whether the current user needs to be asked to share their phone number.",
        "name": "share_phone_number",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_contact.html"
  },
  "addCustomServerLanguagePack": {
    "type": "function",
    "desc": "Adds a custom server language pack to the list of installed language packs in current localization target. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a language pack to be added.",
        "name": "language_pack_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_custom_server_language_pack.html"
  },
  "addFavoriteSticker": {
    "type": "function",
    "desc": "Adds a new sticker to the list of favorite stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list. Emoji stickers can't be added to favorite stickers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker file to add.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_favorite_sticker.html"
  },
  "addFileToDownloads": {
    "type": "function",
    "desc": "Adds a file from a message to the list of file downloads. Download progress and completion of the download will be notified through updateFile updates. If message database is used, the list of file downloads is persistent across application restarts. The downloading is independent from download using downloadFile, i.e. it continues if downloadFile is canceled or is used to download a part of the file.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Identifier of the file to download.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Chat identifier of the message with the file.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first.",
        "name": "priority",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_file_to_downloads.html"
  },
  "addLocalMessage": {
    "type": "function",
    "desc": "Adds a local message to a chat. The message is persistent across application restarts only if the message database is used. Returns the added message.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Target chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender of the message.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Information about the message or story to be replied; pass null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      },
      {
        "desc": "Pass true to disable notification for the message.",
        "name": "disable_notification",
        "type": "bool"
      },
      {
        "desc": "The content of the message to be added.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_local_message.html"
  },
  "addLogMessage": {
    "type": "function",
    "desc": "Adds a message to TDLib internal log. Can be called synchronously.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The minimum verbosity level needed for the message to be logged; 0-1023.",
        "name": "verbosity_level",
        "type": "number"
      },
      {
        "desc": "Text of a message to log.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_log_message.html"
  },
  "addMessageReaction": {
    "type": "function",
    "desc": "Adds a reaction to a message. Use getMessageAvailableReactions to receive the list of available reactions for the message.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Type of the reaction to add.",
        "name": "reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "Pass true if the reaction is added with a big animation.",
        "name": "is_big",
        "type": "bool"
      },
      {
        "desc": "Pass true if the reaction needs to be added to recent reactions.",
        "name": "update_recent_reactions",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_message_reaction.html"
  },
  "addNetworkStatistics": {
    "type": "function",
    "desc": "Adds the specified data to data usage statistics. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The network statistics entry with the data to be added to statistics.",
        "name": "entry",
        "type": "NetworkStatisticsEntry"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_network_statistics.html"
  },
  "addProxy": {
    "type": "function",
    "desc": "Adds a proxy server for network requests. Can be called before authorization.\nReturns object_ptr<Proxy>.",
    "fields": [
      {
        "desc": "Proxy server domain or IP address.",
        "name": "server",
        "type": "string"
      },
      {
        "desc": "Proxy server port.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Pass true to immediately enable the proxy.",
        "name": "enable",
        "type": "bool"
      },
      {
        "desc": "Proxy type.",
        "name": "type",
        "type": "ProxyType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_proxy.html"
  },
  "addRecentSticker": {
    "type": "function",
    "desc": "Manually adds a new sticker to the list of recently used stickers. The new sticker is added to the top of the list. If the sticker was already in the list, it is removed from the list first. Only stickers belonging to a sticker set can be added to this list. Emoji stickers can't be added to recent stickers.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers.",
        "name": "is_attached",
        "type": "bool"
      },
      {
        "desc": "Sticker file to add.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_recent_sticker.html"
  },
  "addRecentlyFoundChat": {
    "type": "function",
    "desc": "Adds a chat to the list of recently found chats. The chat is added to the beginning of the list. If the chat is already in the list, it will be removed from the list first.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to add.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_recently_found_chat.html"
  },
  "addSavedAnimation": {
    "type": "function",
    "desc": "Manually adds a new animation to the list of saved animations. The new animation is added to the beginning of the list. If the animation was already in the list, it is removed first. Only non-secret video animations with MIME type \"video/mp4\" can be added to the list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The animation file to be added. Only animations known to the server (i.e., successfully sent via a message) can be added to the list.",
        "name": "animation",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_saved_animation.html"
  },
  "addSavedNotificationSound": {
    "type": "function",
    "desc": "Adds a new notification sound to the list of saved notification sounds. The new notification sound is added to the top of the list. If it is already in the list, its position isn't changed.\nReturns object_ptr<NotificationSound>.",
    "fields": [
      {
        "desc": "Notification sound file to add.",
        "name": "sound",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_saved_notification_sound.html"
  },
  "addStickerToSet": {
    "type": "function",
    "desc": "Adds a new sticker to a set; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker set owner.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Sticker set name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Sticker to add to the set.",
        "name": "sticker",
        "type": "inputSticker"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1add_sticker_to_set.html"
  },
  "allowBotToSendMessages": {
    "type": "function",
    "desc": "Allows the specified bot to send messages to the user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1allow_bot_to_send_messages.html"
  },
  "answerCallbackQuery": {
    "type": "function",
    "desc": "Sets the result of a callback query; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the callback query.",
        "name": "callback_query_id",
        "type": "string"
      },
      {
        "desc": "Text of the answer.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Pass true to show an alert to the user instead of a toast notification.",
        "name": "show_alert",
        "type": "bool"
      },
      {
        "desc": "URL to be opened.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Time during which the result of the query can be cached, in seconds.",
        "name": "cache_time",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_callback_query.html"
  },
  "answerCustomQuery": {
    "type": "function",
    "desc": "Answers a custom query; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a custom query.",
        "name": "custom_query_id",
        "type": "string"
      },
      {
        "desc": "JSON-serialized answer to the query.",
        "name": "data",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_custom_query.html"
  },
  "answerInlineQuery": {
    "type": "function",
    "desc": "Sets the result of an inline query; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the inline query.",
        "name": "inline_query_id",
        "type": "string"
      },
      {
        "desc": "Pass true if results may be cached and returned only for the user that sent the query. By default, results may be returned to any user who sends the same query.",
        "name": "is_personal",
        "type": "bool"
      },
      {
        "desc": "Button to be shown above inline query results; pass null if none.",
        "name": "button",
        "type": "inlineQueryResultsButton"
      },
      {
        "desc": "The results of the query.",
        "name": "results",
        "type": "InputInlineQueryResult"
      },
      {
        "desc": "Allowed time to cache the results of the query, in seconds.",
        "name": "cache_time",
        "type": "number"
      },
      {
        "desc": "Offset for the next inline query; pass an empty string if there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_inline_query.html"
  },
  "answerPreCheckoutQuery": {
    "type": "function",
    "desc": "Sets the result of a pre-checkout query; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the pre-checkout query.",
        "name": "pre_checkout_query_id",
        "type": "string"
      },
      {
        "desc": "An error message, empty on success.",
        "name": "error_message",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_pre_checkout_query.html"
  },
  "answerShippingQuery": {
    "type": "function",
    "desc": "Sets the result of a shipping query; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the shipping query.",
        "name": "shipping_query_id",
        "type": "string"
      },
      {
        "desc": "Available shipping options.",
        "name": "shipping_options",
        "type": "shippingOption"
      },
      {
        "desc": "An error message, empty on success.",
        "name": "error_message",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_shipping_query.html"
  },
  "answerWebAppQuery": {
    "type": "function",
    "desc": "Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only.\nReturns object_ptr<SentWebAppMessage>.",
    "fields": [
      {
        "desc": "Identifier of the Web App query.",
        "name": "web_app_query_id",
        "type": "string"
      },
      {
        "desc": "The result of the query.",
        "name": "result",
        "type": "InputInlineQueryResult"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1answer_web_app_query.html"
  },
  "applyPremiumGiftCode": {
    "type": "function",
    "desc": "Applies a Telegram Premium gift code.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The code to apply.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1apply_premium_gift_code.html"
  },
  "assignAppStoreTransaction": {
    "type": "function",
    "desc": "Informs server about a purchase through App Store. For official applications only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "App Store receipt.",
        "name": "receipt",
        "type": "bytes"
      },
      {
        "desc": "Transaction purpose.",
        "name": "purpose",
        "type": "StorePaymentPurpose"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1assign_app_store_transaction.html"
  },
  "assignGooglePlayTransaction": {
    "type": "function",
    "desc": "Informs server about a purchase through Google Play. For official applications only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Application package name.",
        "name": "package_name",
        "type": "string"
      },
      {
        "desc": "Identifier of the purchased store product.",
        "name": "store_product_id",
        "type": "string"
      },
      {
        "desc": "Google Play purchase token.",
        "name": "purchase_token",
        "type": "string"
      },
      {
        "desc": "Transaction purpose.",
        "name": "purpose",
        "type": "StorePaymentPurpose"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1assign_google_play_transaction.html"
  },
  "banChatMember": {
    "type": "function",
    "desc": "Bans a member in a chat. Members can't be banned in private or secret chats. In supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Member identifier.",
        "name": "member_id",
        "type": "MessageSender"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Ignored in basic groups and if a chat is banned.",
        "name": "banned_until_date",
        "type": "number"
      },
      {
        "desc": "Pass true to delete all messages in the chat for the user that is being removed. Always true for supergroups and channels.",
        "name": "revoke_messages",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1ban_chat_member.html"
  },
  "blockMessageSenderFromReplies": {
    "type": "function",
    "desc": "Blocks an original sender of a message in the Replies chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of an incoming message in the Replies chat.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true to delete the message.",
        "name": "delete_message",
        "type": "bool"
      },
      {
        "desc": "Pass true to delete all messages from the same sender.",
        "name": "delete_all_messages",
        "type": "bool"
      },
      {
        "desc": "Pass true to report the sender to the Telegram moderators.",
        "name": "report_spam",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1block_message_sender_from_replies.html"
  },
  "boostChat": {
    "type": "function",
    "desc": "Boosts a chat and returns the list of available chat boost slots for the current user after the boost.\nReturns object_ptr<ChatBoostSlots>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of boost slots of the current user from which to apply boosts to the chat.",
        "name": "slot_ids",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1boost_chat.html"
  },
  "canBotSendMessages": {
    "type": "function",
    "desc": "Checks whether the specified bot can send messages to the user. Returns a 404 error if can't and the access can be granted by call to allowBotToSendMessages.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_bot_send_messages.html"
  },
  "canPurchasePremium": {
    "type": "function",
    "desc": "Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Transaction purpose.",
        "name": "purpose",
        "type": "StorePaymentPurpose"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_purchase_premium.html"
  },
  "canSendStory": {
    "type": "function",
    "desc": "Checks whether the current user can send a story on behalf of a chat; requires can_post_stories rights for channel chats.\nReturns object_ptr<CanSendStoryResult>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story.html"
  },
  "canTransferOwnership": {
    "type": "function",
    "desc": "Checks whether the current session can be used to transfer a chat ownership to another user.\nReturns object_ptr<CanTransferOwnershipResult>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_transfer_ownership.html"
  },
  "cancelDownloadFile": {
    "type": "function",
    "desc": "Stops the downloading of a file. If a file has already been downloaded, does nothing.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a file to stop downloading.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server.",
        "name": "only_if_pending",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1cancel_download_file.html"
  },
  "cancelPasswordReset": {
    "type": "function",
    "desc": "Cancels reset of 2-step verification password. The method can be called if passwordState.pending_reset_date > 0.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1cancel_password_reset.html"
  },
  "cancelPreliminaryUploadFile": {
    "type": "function",
    "desc": "Stops the preliminary uploading of a file. Supported only for files uploaded by using preliminaryUploadFile. For other files the behavior is undefined.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the file to stop uploading.",
        "name": "file_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1cancel_preliminary_upload_file.html"
  },
  "changeImportedContacts": {
    "type": "function",
    "desc": "Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts. Query result depends on the result of the previous query, so only one query is possible at the same time.\nReturns object_ptr<ImportedContacts>.",
    "fields": [
      {
        "desc": "The new list of contacts, contact's vCard are ignored and are not imported.",
        "name": "contacts",
        "type": "contact"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_imported_contacts.html"
  },
  "changePhoneNumber": {
    "type": "function",
    "desc": "Changes the phone number of the user and sends an authentication code to the user's new phone number; for official Android and iOS applications only. On success, returns information about the sent code.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [
      {
        "desc": "The new phone number of the user in international format.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Settings for the authentication of the user's phone number; pass null to use default settings.",
        "name": "settings",
        "type": "phoneNumberAuthenticationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_phone_number.html"
  },
  "changeStickerSet": {
    "type": "function",
    "desc": "Installs/uninstalls or activates/archives a sticker set.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the sticker set.",
        "name": "set_id",
        "type": "string"
      },
      {
        "desc": "The new value of is_installed.",
        "name": "is_installed",
        "type": "bool"
      },
      {
        "desc": "The new value of is_archived. A sticker set can't be installed and archived simultaneously.",
        "name": "is_archived",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1change_sticker_set.html"
  },
  "checkAuthenticationBotToken": {
    "type": "function",
    "desc": "Checks the authentication token of a bot; to log in as a bot. Works only when the current authorization state is authorizationStateWaitPhoneNumber. Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The bot token.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_bot_token.html"
  },
  "checkAuthenticationCode": {
    "type": "function",
    "desc": "Checks the authentication code. Works only when the current authorization state is authorizationStateWaitCode.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Authentication code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_code.html"
  },
  "checkAuthenticationEmailCode": {
    "type": "function",
    "desc": "Checks the authentication of a email address. Works only when the current authorization state is authorizationStateWaitEmailCode.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Email address authentication to check.",
        "name": "code",
        "type": "EmailAddressAuthentication"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_email_code.html"
  },
  "checkAuthenticationPassword": {
    "type": "function",
    "desc": "Checks the 2-step verification password for correctness. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The 2-step verification password to check.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_password.html"
  },
  "checkAuthenticationPasswordRecoveryCode": {
    "type": "function",
    "desc": "Checks whether a 2-step verification password recovery code sent to an email address is valid. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Recovery code to check.",
        "name": "recovery_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_authentication_password_recovery_code.html"
  },
  "checkChangePhoneNumberCode": {
    "type": "function",
    "desc": "Checks the authentication code sent to confirm a new phone number of the user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Authentication code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_change_phone_number_code.html"
  },
  "checkChatFolderInviteLink": {
    "type": "function",
    "desc": "Checks the validity of an invite link for a chat folder and returns information about the corresponding chat folder.\nReturns object_ptr<ChatFolderInviteLinkInfo>.",
    "fields": [
      {
        "desc": "Invite link to be checked.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_folder_invite_link.html"
  },
  "checkChatInviteLink": {
    "type": "function",
    "desc": "Checks the validity of an invite link for a chat and returns information about the corresponding chat.\nReturns object_ptr<ChatInviteLinkInfo>.",
    "fields": [
      {
        "desc": "Invite link to be checked.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_invite_link.html"
  },
  "checkChatUsername": {
    "type": "function",
    "desc": "Checks whether a username can be set for a chat.\nReturns object_ptr<CheckChatUsernameResult>.",
    "fields": [
      {
        "desc": "Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a private chat with self, or 0 if the chat is being created.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Username to be checked.",
        "name": "username",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username.html"
  },
  "checkCreatedPublicChatsLimit": {
    "type": "function",
    "desc": "Checks whether the maximum number of owned public chats has been reached. Returns corresponding error if the limit was reached. The limit can be increased with Telegram Premium.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Type of the public chats, for which to check the limit.",
        "name": "type",
        "type": "PublicChatType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_created_public_chats_limit.html"
  },
  "checkEmailAddressVerificationCode": {
    "type": "function",
    "desc": "Checks the email address verification code for Telegram Passport.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Verification code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_email_address_verification_code.html"
  },
  "checkLoginEmailAddressCode": {
    "type": "function",
    "desc": "Checks the login email address authentication.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Email address authentication to check.",
        "name": "code",
        "type": "EmailAddressAuthentication"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_login_email_address_code.html"
  },
  "checkPasswordRecoveryCode": {
    "type": "function",
    "desc": "Checks whether a 2-step verification password recovery code sent to an email address is valid.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Recovery code to check.",
        "name": "recovery_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_password_recovery_code.html"
  },
  "checkPhoneNumberConfirmationCode": {
    "type": "function",
    "desc": "Checks phone number confirmation code.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Confirmation code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_phone_number_confirmation_code.html"
  },
  "checkPhoneNumberVerificationCode": {
    "type": "function",
    "desc": "Checks the phone number verification code for Telegram Passport.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Verification code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_phone_number_verification_code.html"
  },
  "checkPremiumGiftCode": {
    "type": "function",
    "desc": "Return information about a Telegram Premium gift code.\nReturns object_ptr<PremiumGiftCodeInfo>.",
    "fields": [
      {
        "desc": "The code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_premium_gift_code.html"
  },
  "checkRecoveryEmailAddressCode": {
    "type": "function",
    "desc": "Checks the 2-step verification recovery email address verification code.\nReturns object_ptr<PasswordState>.",
    "fields": [
      {
        "desc": "Verification code to check.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_recovery_email_address_code.html"
  },
  "checkStickerSetName": {
    "type": "function",
    "desc": "Checks whether a name can be used for a new sticker set.\nReturns object_ptr<CheckStickerSetNameResult>.",
    "fields": [
      {
        "desc": "Name to be checked.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_sticker_set_name.html"
  },
  "cleanFileName": {
    "type": "function",
    "desc": "Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. Can be called synchronously.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "File name or path to the file.",
        "name": "file_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clean_file_name.html"
  },
  "clearAllDraftMessages": {
    "type": "function",
    "desc": "Clears message drafts in all chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to keep local message drafts in secret chats.",
        "name": "exclude_secret_chats",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_all_draft_messages.html"
  },
  "clearAutosaveSettingsExceptions": {
    "type": "function",
    "desc": "Clears the list of all autosave settings exceptions. The method is guaranteed to work only after at least one call to getAutosaveSettings.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_autosave_settings_exceptions.html"
  },
  "clearImportedContacts": {
    "type": "function",
    "desc": "Clears all imported contacts, contact list remains unchanged.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_imported_contacts.html"
  },
  "clearRecentEmojiStatuses": {
    "type": "function",
    "desc": "Clears the list of recently used emoji statuses.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recent_emoji_statuses.html"
  },
  "clearRecentReactions": {
    "type": "function",
    "desc": "Clears the list of recently used reactions.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recent_reactions.html"
  },
  "clearRecentStickers": {
    "type": "function",
    "desc": "Clears the list of recently used stickers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers.",
        "name": "is_attached",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recent_stickers.html"
  },
  "clearRecentlyFoundChats": {
    "type": "function",
    "desc": "Clears the list of recently found chats.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1clear_recently_found_chats.html"
  },
  "clickAnimatedEmojiMessage": {
    "type": "function",
    "desc": "Informs TDLib that a message with an animated emoji was clicked by the user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be played.\nReturns object_ptr<Sticker>.",
    "fields": [
      {
        "desc": "Chat identifier of the message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the clicked message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1click_animated_emoji_message.html"
  },
  "clickChatSponsoredMessage": {
    "type": "function",
    "desc": "Informs TDLib that the user opened the sponsored chat via the button, the name, the photo, or a mention in the sponsored message.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier of the sponsored message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sponsored message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1click_chat_sponsored_message.html"
  },
  "clickPremiumSubscriptionButton": {
    "type": "function",
    "desc": "Informs TDLib that the user clicked Premium subscription button on the Premium features screen.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1click_premium_subscription_button.html"
  },
  "close": {
    "type": "function",
    "desc": "Closes the TDLib instance. All databases will be flushed to disk and properly closed. After the close completes, updateAuthorizationState with authorizationStateClosed will be sent. Can be called before initialization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close.html"
  },
  "closeChat": {
    "type": "function",
    "desc": "Informs TDLib that the chat is closed by the user. Many useful activities depend on the chat being opened or closed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_chat.html"
  },
  "closeSecretChat": {
    "type": "function",
    "desc": "Closes a secret chat, effectively transferring its state to secretChatStateClosed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Secret chat identifier.",
        "name": "secret_chat_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_secret_chat.html"
  },
  "closeStory": {
    "type": "function",
    "desc": "Informs TDLib that a story is closed by the user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story to close.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_story.html"
  },
  "closeWebApp": {
    "type": "function",
    "desc": "Informs TDLib that a previously opened Web App was closed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of Web App launch, received from openWebApp.",
        "name": "web_app_launch_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1close_web_app.html"
  },
  "confirmQrCodeAuthentication": {
    "type": "function",
    "desc": "Confirms QR code authentication on another device. Returns created session on success.\nReturns object_ptr<Session>.",
    "fields": [
      {
        "desc": "A link from a QR code. The link must be scanned by the in-app camera.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1confirm_qr_code_authentication.html"
  },
  "confirmSession": {
    "type": "function",
    "desc": "Confirms an unconfirmed session of the current user from another device.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "session_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1confirm_session.html"
  },
  "createBasicGroupChat": {
    "type": "function",
    "desc": "Returns an existing chat corresponding to a known basic group.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Basic group identifier.",
        "name": "basic_group_id",
        "type": "string"
      },
      {
        "desc": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect.",
        "name": "force",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_basic_group_chat.html"
  },
  "createCall": {
    "type": "function",
    "desc": "Creates a new call.\nReturns object_ptr<CallId>.",
    "fields": [
      {
        "desc": "Identifier of the user to be called.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The call protocols supported by the application.",
        "name": "protocol",
        "type": "callProtocol"
      },
      {
        "desc": "Pass true to create a video call.",
        "name": "is_video",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_call.html"
  },
  "createChatFolder": {
    "type": "function",
    "desc": "Creates new chat folder. Returns information about the created chat folder. There can be up to getOption(\"chat_folder_count_max\") chat folders, but the limit can be increased with Telegram Premium.\nReturns object_ptr<ChatFolderInfo>.",
    "fields": [
      {
        "desc": "The new chat folder.",
        "name": "folder",
        "type": "chatFolder"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_chat_folder.html"
  },
  "createChatFolderInviteLink": {
    "type": "function",
    "desc": "Creates a new invite link for a chat folder. A link can be created for a chat folder if it has only pinned and included chats.\nReturns object_ptr<ChatFolderInviteLink>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "Name of the link; 0-32 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link creation.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_chat_folder_invite_link.html"
  },
  "createChatInviteLink": {
    "type": "function",
    "desc": "Creates a new invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat.\nReturns object_ptr<ChatInviteLink>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link name; 0-32 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the link will expire; pass 0 if never.",
        "name": "expiration_date",
        "type": "number"
      },
      {
        "desc": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited.",
        "name": "member_limit",
        "type": "number"
      },
      {
        "desc": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0.",
        "name": "creates_join_request",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_chat_invite_link.html"
  },
  "createForumTopic": {
    "type": "function",
    "desc": "Creates a topic in a forum supergroup chat; requires can_manage_topics rights in the supergroup.\nReturns object_ptr<ForumTopicInfo>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Name of the topic; 1-128 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB, 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon, other users can use only a custom emoji returned by getForumTopicDefaultIcons.",
        "name": "icon",
        "type": "forumTopicIcon"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_forum_topic.html"
  },
  "createInvoiceLink": {
    "type": "function",
    "desc": "Creates a link for the given invoice; for bots only.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Information about the invoice of the type inputMessageInvoice.",
        "name": "invoice",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_invoice_link.html"
  },
  "createNewBasicGroupChat": {
    "type": "function",
    "desc": "Creates a new basic group and sends a corresponding messageBasicGroupChatCreate. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Identifiers of users to be added to the basic group; may be empty to create a basic group without other members.",
        "name": "user_ids",
        "type": "string"
      },
      {
        "desc": "Title of the new basic group; 1-128 characters.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.",
        "name": "message_auto_delete_time",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_basic_group_chat.html"
  },
  "createNewSecretChat": {
    "type": "function",
    "desc": "Creates a new secret chat. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Identifier of the target user.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_secret_chat.html"
  },
  "createNewStickerSet": {
    "type": "function",
    "desc": "Creates a new sticker set. Returns the newly created sticker set.\nReturns object_ptr<StickerSet>.",
    "fields": [
      {
        "desc": "Sticker set owner; ignored for regular users.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Sticker set title; 1-64 characters.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Sticker set name. Can contain only English letters, digits and underscores. Must end with \"by<bot username>\" (<bot_username> is case insensitive) for bots; 1-64 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Format of the stickers in the set.",
        "name": "sticker_format",
        "type": "StickerFormat"
      },
      {
        "desc": "Type of the stickers in the set.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Pass true if stickers in the sticker set must be repainted; for custom emoji sticker sets only.",
        "name": "needs_repainting",
        "type": "bool"
      },
      {
        "desc": "List of stickers to be added to the set; must be non-empty. All stickers must have the same format. For TGS stickers, uploadStickerFile must be used before the sticker is shown.",
        "name": "stickers",
        "type": "inputSticker"
      },
      {
        "desc": "Source of the sticker set; may be empty if unknown.",
        "name": "source",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_sticker_set.html"
  },
  "createNewSupergroupChat": {
    "type": "function",
    "desc": "Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate. Returns the newly created chat.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Title of the new chat; 1-128 characters.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Pass true to create a forum supergroup chat.",
        "name": "is_forum",
        "type": "bool"
      },
      {
        "desc": "Pass true to create a channel chat; ignored if a forum is created.",
        "name": "is_channel",
        "type": "bool"
      },
      {
        "desc": "Chat description; 0-255 characters.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Chat location if a location-based supergroup is being created; pass null to create an ordinary supergroup chat.",
        "name": "location",
        "type": "chatLocation"
      },
      {
        "desc": "Message auto-delete time value, in seconds; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.",
        "name": "message_auto_delete_time",
        "type": "number"
      },
      {
        "desc": "Pass true to create a supergroup for importing messages using importMessages.",
        "name": "for_import",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_new_supergroup_chat.html"
  },
  "createPrivateChat": {
    "type": "function",
    "desc": "Returns an existing chat corresponding to a given user.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect.",
        "name": "force",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_private_chat.html"
  },
  "createSecretChat": {
    "type": "function",
    "desc": "Returns an existing chat corresponding to a known secret chat.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Secret chat identifier.",
        "name": "secret_chat_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_secret_chat.html"
  },
  "createSupergroupChat": {
    "type": "function",
    "desc": "Returns an existing chat corresponding to a known supergroup or channel.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Supergroup or channel identifier.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "Pass true to create the chat without a network request. In this case all information about the chat except its type, title and photo can be incorrect.",
        "name": "force",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_supergroup_chat.html"
  },
  "createTemporaryPassword": {
    "type": "function",
    "desc": "Creates a new temporary password for processing payments.\nReturns object_ptr<TemporaryPasswordState>.",
    "fields": [
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      },
      {
        "desc": "Time during which the temporary password will be valid, in seconds; must be between 60 and 86400.",
        "name": "valid_for",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_temporary_password.html"
  },
  "createVideoChat": {
    "type": "function",
    "desc": "Creates a video chat (a group call bound to a chat). Available only for basic groups, supergroups and channels; requires can_manage_video_chats rights.\nReturns object_ptr<GroupCallId>.",
    "fields": [
      {
        "desc": "Identifier of a chat in which the video chat will be created.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Group call title; if empty, chat title will be used.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at most 8 days in the future.",
        "name": "start_date",
        "type": "number"
      },
      {
        "desc": "Pass true to create an RTMP stream instead of an ordinary video chat; requires creator privileges.",
        "name": "is_rtmp_stream",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1create_video_chat.html"
  },
  "deleteAccount": {
    "type": "function",
    "desc": "Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account. Can be called before authorization when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The reason why the account was deleted; optional.",
        "name": "reason",
        "type": "string"
      },
      {
        "desc": "The 2-step verification password of the current user. If not specified, account deletion can be canceled within one week.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_account.html"
  },
  "deleteAllCallMessages": {
    "type": "function",
    "desc": "Deletes all call messages.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to delete the messages for all users.",
        "name": "revoke",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_all_call_messages.html"
  },
  "deleteAllRevokedChatInviteLinks": {
    "type": "function",
    "desc": "Deletes all revoked chat invite links created by a given chat administrator. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "User identifier of a chat administrator, which links will be deleted. Must be an identifier of the current user for non-owner.",
        "name": "creator_user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_all_revoked_chat_invite_links.html"
  },
  "deleteChat": {
    "type": "function",
    "desc": "Deletes a chat along with all messages in the corresponding chat for all chat members. For group chats this will release the usernames and remove all members. Use the field chat.can_be_deleted_for_all_users to find whether the method can be applied to the chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat.html"
  },
  "deleteChatBackground": {
    "type": "function",
    "desc": "Deletes background in a specific chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to restore previously set background. Can be used only in private and secret chats with non-deleted users if userFullInfo.set_chat_background == true. Supposed to be used from messageChatSetBackground messages with the currently set background that was set for both sides by the other user.",
        "name": "restore_previous",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_background.html"
  },
  "deleteChatFolder": {
    "type": "function",
    "desc": "Deletes existing chat folder.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "Identifiers of the chats to leave. The chats must be pinned or always included in the folder.",
        "name": "leave_chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_folder.html"
  },
  "deleteChatFolderInviteLink": {
    "type": "function",
    "desc": "Deletes an invite link for a chat folder.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "Invite link to be deleted.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_folder_invite_link.html"
  },
  "deleteChatHistory": {
    "type": "function",
    "desc": "Deletes all messages in the chat. Use chat.can_be_deleted_only_for_self and chat.can_be_deleted_for_all_users fields to find whether and how the method can be applied to the chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to remove the chat from all chat lists.",
        "name": "remove_from_chat_list",
        "type": "bool"
      },
      {
        "desc": "Pass true to delete chat history for all users.",
        "name": "revoke",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_history.html"
  },
  "deleteChatMessagesByDate": {
    "type": "function",
    "desc": "Deletes all messages between the specified dates in a chat. Supported only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The minimum date of the messages to delete.",
        "name": "min_date",
        "type": "number"
      },
      {
        "desc": "The maximum date of the messages to delete.",
        "name": "max_date",
        "type": "number"
      },
      {
        "desc": "Pass true to delete chat messages for all users; private chats only.",
        "name": "revoke",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_messages_by_date.html"
  },
  "deleteChatMessagesBySender": {
    "type": "function",
    "desc": "Deletes all messages sent by the specified message sender in a chat. Supported only for supergroups; requires can_delete_messages administrator privileges.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender of messages to delete.",
        "name": "sender_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_messages_by_sender.html"
  },
  "deleteChatReplyMarkup": {
    "type": "function",
    "desc": "Deletes the default reply markup from a chat. Must be called after a one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup update will be sent if the reply markup is changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The message identifier of the used keyboard.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_chat_reply_markup.html"
  },
  "deleteCommands": {
    "type": "function",
    "desc": "Deletes commands supported by the bot for the given user scope and language; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The scope to which the commands are relevant; pass null to delete commands in the default bot command scope.",
        "name": "scope",
        "type": "BotCommandScope"
      },
      {
        "desc": "A two-letter ISO 639-1 language code or an empty string.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_commands.html"
  },
  "deleteFile": {
    "type": "function",
    "desc": "Deletes a file from the TDLib file cache.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the file to delete.",
        "name": "file_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_file.html"
  },
  "deleteForumTopic": {
    "type": "function",
    "desc": "Deletes all messages in a forum topic; requires can_delete_messages administrator right in the supergroup unless the user is creator of the topic, the topic has no messages from other users and has at most 11 messages.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_forum_topic.html"
  },
  "deleteLanguagePack": {
    "type": "function",
    "desc": "Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the language pack to delete.",
        "name": "language_pack_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_language_pack.html"
  },
  "deleteMessages": {
    "type": "function",
    "desc": "Deletes messages.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the messages to be deleted.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "Pass true to delete messages for all chat members. Always true for supergroups, channels and secret chats.",
        "name": "revoke",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_messages.html"
  },
  "deletePassportElement": {
    "type": "function",
    "desc": "Deletes a Telegram Passport element.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Element type.",
        "name": "type",
        "type": "PassportElementType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_passport_element.html"
  },
  "deleteProfilePhoto": {
    "type": "function",
    "desc": "Deletes a profile photo.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the profile photo to delete.",
        "name": "profile_photo_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_profile_photo.html"
  },
  "deleteRevokedChatInviteLink": {
    "type": "function",
    "desc": "Deletes revoked chat invite links. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link to revoke.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_revoked_chat_invite_link.html"
  },
  "deleteSavedCredentials": {
    "type": "function",
    "desc": "Deletes saved credentials for all payment provider bots.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_saved_credentials.html"
  },
  "deleteSavedOrderInfo": {
    "type": "function",
    "desc": "Deletes saved order information.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_saved_order_info.html"
  },
  "deleteStickerSet": {
    "type": "function",
    "desc": "Deleted a sticker set; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker set name.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_sticker_set.html"
  },
  "deleteStory": {
    "type": "function",
    "desc": "Deletes a previously sent story. Can be called only if story.can_be_deleted == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story to delete.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1delete_story.html"
  },
  "destroy": {
    "type": "function",
    "desc": "Closes the TDLib instance, destroying all local data without a proper logout. The current user session will remain in the list of all active sessions. All local data will be destroyed. After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1destroy.html"
  },
  "disableAllSupergroupUsernames": {
    "type": "function",
    "desc": "Disables all active non-editable usernames of a supergroup or channel, requires owner privileges in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1disable_all_supergroup_usernames.html"
  },
  "disableProxy": {
    "type": "function",
    "desc": "Disables the currently enabled proxy. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1disable_proxy.html"
  },
  "discardCall": {
    "type": "function",
    "desc": "Discards a call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "Pass true if the user was disconnected.",
        "name": "is_disconnected",
        "type": "bool"
      },
      {
        "desc": "The call duration, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Pass true if the call was a video call.",
        "name": "is_video",
        "type": "bool"
      },
      {
        "desc": "Identifier of the connection used during the call.",
        "name": "connection_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1discard_call.html"
  },
  "disconnectAllWebsites": {
    "type": "function",
    "desc": "Disconnects all websites from the current user's Telegram account.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1disconnect_all_websites.html"
  },
  "disconnectWebsite": {
    "type": "function",
    "desc": "Disconnects website from the current user's Telegram account.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Website identifier.",
        "name": "website_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1disconnect_website.html"
  },
  "downloadFile": {
    "type": "function",
    "desc": "Downloads a file from the cloud. Download progress and completion of the download will be notified through updateFile updates.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Identifier of the file to download.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile/addFileToDownloads was called will be downloaded first.",
        "name": "priority",
        "type": "number"
      },
      {
        "desc": "The starting position from which the file needs to be downloaded.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "Number of bytes which need to be downloaded starting from the \"offset\" position before the download will automatically be canceled; use 0 to download without a limit.",
        "name": "limit",
        "type": "string"
      },
      {
        "desc": "Pass true to return response only after the file download has succeeded, has failed, has been canceled, or a new downloadFile request with different offset/limit parameters was sent; pass false to return file state immediately, just after the download has been started.",
        "name": "synchronous",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1download_file.html"
  },
  "editChatFolder": {
    "type": "function",
    "desc": "Edits existing chat folder. Returns information about the edited chat folder.\nReturns object_ptr<ChatFolderInfo>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "The edited chat folder.",
        "name": "folder",
        "type": "chatFolder"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_chat_folder.html"
  },
  "editChatFolderInviteLink": {
    "type": "function",
    "desc": "Edits an invite link for a chat folder.\nReturns object_ptr<ChatFolderInviteLink>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "Invite link to be edited.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "New name of the link; 0-32 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "New identifiers of chats to be accessible by the invite link. Use getChatsForChatFolderInviteLink to get suitable chats. Basic groups will be automatically converted to supergroups before link editing.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_chat_folder_invite_link.html"
  },
  "editChatInviteLink": {
    "type": "function",
    "desc": "Edits a non-primary invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.\nReturns object_ptr<ChatInviteLink>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link to be edited.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "Invite link name; 0-32 characters.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the link will expire; pass 0 if never.",
        "name": "expiration_date",
        "type": "number"
      },
      {
        "desc": "The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited.",
        "name": "member_limit",
        "type": "number"
      },
      {
        "desc": "Pass true if users joining the chat via the link need to be approved by chat administrators. In this case, member_limit must be 0.",
        "name": "creates_join_request",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_chat_invite_link.html"
  },
  "editCustomLanguagePackInfo": {
    "type": "function",
    "desc": "Edits information about a custom local language pack in the current localization target. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New information about the custom local language pack.",
        "name": "info",
        "type": "languagePackInfo"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_custom_language_pack_info.html"
  },
  "editForumTopic": {
    "type": "function",
    "desc": "Edits title and icon of a topic in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup unless the user is creator of the topic.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "New name of the topic; 0-128 characters. If empty, the previous topic name is kept.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Pass true to edit the icon of the topic. Icon of the General topic can't be edited.",
        "name": "edit_icon_custom_emoji",
        "type": "bool"
      },
      {
        "desc": "Identifier of the new custom emoji for topic icon; pass 0 to remove the custom emoji. Ignored if edit_icon_custom_emoji is false. Telegram Premium users can use any custom emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons.",
        "name": "icon_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_forum_topic.html"
  },
  "editInlineMessageCaption": {
    "type": "function",
    "desc": "Edits the caption of an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New message content caption; pass null to remove caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_caption.html"
  },
  "editInlineMessageLiveLocation": {
    "type": "function",
    "desc": "Edits the content of a live location in an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New location content of the message; pass null to stop sharing the live location.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown.",
        "name": "heading",
        "type": "number"
      },
      {
        "desc": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled.",
        "name": "proximity_alert_radius",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_live_location.html"
  },
  "editInlineMessageMedia": {
    "type": "function",
    "desc": "Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_media.html"
  },
  "editInlineMessageReplyMarkup": {
    "type": "function",
    "desc": "Edits the reply markup of an inline message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_reply_markup.html"
  },
  "editInlineMessageText": {
    "type": "function",
    "desc": "Edits the text of an inline text or game message sent via a bot; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New text content of the message. Must be of type inputMessageText.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_inline_message_text.html"
  },
  "editMessageCaption": {
    "type": "function",
    "desc": "Edits the message content caption. Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New message content caption; 0-getOption(\"message_caption_length_max\") characters; pass null to remove caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_caption.html"
  },
  "editMessageLiveLocation": {
    "type": "function",
    "desc": "Edits the message content of a live location. Messages can be edited for a limited period of time specified in the live location. Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New location content of the message; pass null to stop sharing the live location.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown.",
        "name": "heading",
        "type": "number"
      },
      {
        "desc": "The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled.",
        "name": "proximity_alert_radius",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_live_location.html"
  },
  "editMessageMedia": {
    "type": "function",
    "desc": "Edits the content of a message with an animation, an audio, a document, a photo or a video, including message caption. If only the caption needs to be edited, use editMessageCaption instead. The media can't be edited if the message was set to self-destruct or to a self-destructing media. The type of message content in an album can't be changed with exception of replacing a photo with a video or vice versa. Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or inputMessageVideo.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_media.html"
  },
  "editMessageReplyMarkup": {
    "type": "function",
    "desc": "Edits the message reply markup; for bots only. Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_reply_markup.html"
  },
  "editMessageSchedulingState": {
    "type": "function",
    "desc": "Edits the time when a scheduled message will be sent. Scheduling state of all messages in the same album or forwarded together with the message will be also changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message scheduling state; pass null to send the message immediately.",
        "name": "scheduling_state",
        "type": "MessageSchedulingState"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_scheduling_state.html"
  },
  "editMessageText": {
    "type": "function",
    "desc": "Edits the text of a message (or a text of a game message). Returns the edited message after the edit is completed on the server side.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "New text content of the message. Must be of type inputMessageText.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_message_text.html"
  },
  "editProxy": {
    "type": "function",
    "desc": "Edits an existing proxy server for network requests. Can be called before authorization.\nReturns object_ptr<Proxy>.",
    "fields": [
      {
        "desc": "Proxy identifier.",
        "name": "proxy_id",
        "type": "number"
      },
      {
        "desc": "Proxy server domain or IP address.",
        "name": "server",
        "type": "string"
      },
      {
        "desc": "Proxy server port.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Pass true to immediately enable the proxy.",
        "name": "enable",
        "type": "bool"
      },
      {
        "desc": "Proxy type.",
        "name": "type",
        "type": "ProxyType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_proxy.html"
  },
  "editStory": {
    "type": "function",
    "desc": "Changes content and caption of a story. Can be called only if story.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story to edit.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "New content of the story; pass null to keep the current content.",
        "name": "content",
        "type": "InputStoryContent"
      },
      {
        "desc": "New clickable rectangle areas to be shown on the story media; pass null to keep the current areas. Areas can't be edited if story content isn't changed.",
        "name": "areas",
        "type": "inputStoryAreas"
      },
      {
        "desc": "New story caption; pass null to keep the current caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1edit_story.html"
  },
  "enableProxy": {
    "type": "function",
    "desc": "Enables a proxy. Only one proxy can be enabled at a time. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Proxy identifier.",
        "name": "proxy_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1enable_proxy.html"
  },
  "endGroupCall": {
    "type": "function",
    "desc": "Ends a group call. Requires groupCall.can_be_managed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1end_group_call.html"
  },
  "endGroupCallRecording": {
    "type": "function",
    "desc": "Ends recording of an active group call. Requires groupCall.can_be_managed group call flag.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1end_group_call_recording.html"
  },
  "endGroupCallScreenSharing": {
    "type": "function",
    "desc": "Ends screen sharing in a joined group call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1end_group_call_screen_sharing.html"
  },
  "finishFileGeneration": {
    "type": "function",
    "desc": "Finishes the file generation.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the generation process.",
        "name": "generation_id",
        "type": "string"
      },
      {
        "desc": "If passed, the file generation has failed and must be terminated; pass null if the file generation succeeded.",
        "name": "error",
        "type": "error"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1finish_file_generation.html"
  },
  "forwardMessages": {
    "type": "function",
    "desc": "Forwards previously sent messages. Returns the forwarded messages in the same order as the message identifiers passed in message_ids. If a message can't be forwarded, null will be returned instead of the message.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which to forward messages.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the message will be sent; for forum threads only.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the chat from which to forward messages.",
        "name": "from_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the messages to forward. Message identifiers must be in a strictly increasing order. At most 100 messages can be forwarded simultaneously. A message can be forwarded only if message.can_be_forwarded.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "Options to be used to send the messages; pass null to use default options.",
        "name": "options",
        "type": "messageSendOptions"
      },
      {
        "desc": "Pass true to copy content of the messages without reference to the original sender. Always true if the messages are forwarded to a secret chat or are local.",
        "name": "send_copy",
        "type": "bool"
      },
      {
        "desc": "Pass true to remove media captions of message copies. Ignored if send_copy is false.",
        "name": "remove_caption",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forward_messages.html"
  },
  "getAccountTtl": {
    "type": "function",
    "desc": "Returns the period of inactivity after which the account of the current user will automatically be deleted.\nReturns object_ptr<AccountTtl>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_account_ttl.html"
  },
  "getActiveLiveLocationMessages": {
    "type": "function",
    "desc": "Returns all active live locations that need to be updated by the application. The list is persistent across application restarts only if the message database is used.\nReturns object_ptr<Messages>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_active_live_location_messages.html"
  },
  "getActiveSessions": {
    "type": "function",
    "desc": "Returns all active sessions of the current user.\nReturns object_ptr<Sessions>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_active_sessions.html"
  },
  "getAllPassportElements": {
    "type": "function",
    "desc": "Returns all available Telegram Passport elements.\nReturns object_ptr<PassportElements>.",
    "fields": [
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_all_passport_elements.html"
  },
  "getAllStickerEmojis": {
    "type": "function",
    "desc": "Returns unique emoji that correspond to stickers to be found by the getStickers(sticker_type, query, 1000000, chat_id).\nReturns object_ptr<Emojis>.",
    "fields": [
      {
        "desc": "Type of the stickers to search for.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Search query.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Chat identifier for which to find stickers.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true if only main emoji for each found sticker must be included in the result.",
        "name": "return_only_main_emoji",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_all_sticker_emojis.html"
  },
  "getAnimatedEmoji": {
    "type": "function",
    "desc": "Returns an animated emoji corresponding to a given emoji. Returns a 404 error if the emoji has no animated emoji.\nReturns object_ptr<AnimatedEmoji>.",
    "fields": [
      {
        "desc": "The emoji.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_animated_emoji.html"
  },
  "getApplicationConfig": {
    "type": "function",
    "desc": "Returns application config, provided by the server. Can be called before authorization.\nReturns object_ptr<JsonValue>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_application_config.html"
  },
  "getApplicationDownloadLink": {
    "type": "function",
    "desc": "Returns the link for downloading official Telegram application to be used when the current user invites friends to Telegram.\nReturns object_ptr<HttpUrl>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_application_download_link.html"
  },
  "getArchiveChatListSettings": {
    "type": "function",
    "desc": "Returns settings for automatic moving of chats to and from the Archive chat lists.\nReturns object_ptr<ArchiveChatListSettings>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_archive_chat_list_settings.html"
  },
  "getArchivedStickerSets": {
    "type": "function",
    "desc": "Returns a list of archived sticker sets.\nReturns object_ptr<StickerSets>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to return.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Identifier of the sticker set from which to return the result.",
        "name": "offset_sticker_set_id",
        "type": "string"
      },
      {
        "desc": "The maximum number of sticker sets to return; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_archived_sticker_sets.html"
  },
  "getAttachedStickerSets": {
    "type": "function",
    "desc": "Returns a list of sticker sets attached to a file, including regular, mask, and emoji sticker sets. Currently, only animations, photos, and videos can have attached sticker sets.\nReturns object_ptr<StickerSets>.",
    "fields": [
      {
        "desc": "File identifier.",
        "name": "file_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_attached_sticker_sets.html"
  },
  "getAttachmentMenuBot": {
    "type": "function",
    "desc": "Returns information about a bot that can be added to attachment or side menu.\nReturns object_ptr<AttachmentMenuBot>.",
    "fields": [
      {
        "desc": "Bot's user identifier.",
        "name": "bot_user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_attachment_menu_bot.html"
  },
  "getAuthorizationState": {
    "type": "function",
    "desc": "Returns the current authorization state; this is an offline request. For informational purposes only. Use updateAuthorizationState instead to maintain the current authorization state. Can be called before initialization.\nReturns object_ptr<AuthorizationState>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_authorization_state.html"
  },
  "getAutoDownloadSettingsPresets": {
    "type": "function",
    "desc": "Returns auto-download settings presets for the current user.\nReturns object_ptr<AutoDownloadSettingsPresets>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_auto_download_settings_presets.html"
  },
  "getAutosaveSettings": {
    "type": "function",
    "desc": "Returns autosave settings for the current user.\nReturns object_ptr<AutosaveSettings>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_autosave_settings.html"
  },
  "getAvailableChatBoostSlots": {
    "type": "function",
    "desc": "Returns the list of available chat boost slots for the current user.\nReturns object_ptr<ChatBoostSlots>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_available_chat_boost_slots.html"
  },
  "getBackgroundUrl": {
    "type": "function",
    "desc": "Constructs a persistent HTTP URL for a background.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Background name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Background type.",
        "name": "type",
        "type": "BackgroundType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_background_url.html"
  },
  "getBackgrounds": {
    "type": "function",
    "desc": "Returns backgrounds installed by the user.\nReturns object_ptr<Backgrounds>.",
    "fields": [
      {
        "desc": "Pass true to order returned backgrounds for a dark theme.",
        "name": "for_dark_theme",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_backgrounds.html"
  },
  "getBankCardInfo": {
    "type": "function",
    "desc": "Returns information about a bank card.\nReturns object_ptr<BankCardInfo>.",
    "fields": [
      {
        "desc": "The bank card number.",
        "name": "bank_card_number",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_bank_card_info.html"
  },
  "getBasicGroup": {
    "type": "function",
    "desc": "Returns information about a basic group by its identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<BasicGroup>.",
    "fields": [
      {
        "desc": "Basic group identifier.",
        "name": "basic_group_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_basic_group.html"
  },
  "getBasicGroupFullInfo": {
    "type": "function",
    "desc": "Returns full information about a basic group by its identifier.\nReturns object_ptr<BasicGroupFullInfo>.",
    "fields": [
      {
        "desc": "Basic group identifier.",
        "name": "basic_group_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_basic_group_full_info.html"
  },
  "getBlockedMessageSenders": {
    "type": "function",
    "desc": "Returns users and chats that were blocked by the current user.\nReturns object_ptr<MessageSenders>.",
    "fields": [
      {
        "desc": "Block list from which to return users.",
        "name": "block_list",
        "type": "BlockList"
      },
      {
        "desc": "Number of users and chats to skip in the result; must be non-negative.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of users and chats to return; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_blocked_message_senders.html"
  },
  "getBotInfoDescription": {
    "type": "function",
    "desc": "Returns the text shown in the chat with a bot if the chat is empty in the given language. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code or an empty string.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_bot_info_description.html"
  },
  "getBotInfoShortDescription": {
    "type": "function",
    "desc": "Returns the text shown on a bot's profile page and sent together with the link when users share the bot in the given language. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code or an empty string.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_bot_info_short_description.html"
  },
  "getBotName": {
    "type": "function",
    "desc": "Returns the name of a bot in the given language. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code or an empty string.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_bot_name.html"
  },
  "getCallbackQueryAnswer": {
    "type": "function",
    "desc": "Sends a callback query to a bot and returns an answer. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.\nReturns object_ptr<CallbackQueryAnswer>.",
    "fields": [
      {
        "desc": "Identifier of the chat with the message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message from which the query originated.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Query payload.",
        "name": "payload",
        "type": "CallbackQueryPayload"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_callback_query_answer.html"
  },
  "getCallbackQueryMessage": {
    "type": "function",
    "desc": "Returns information about a message with the callback button that originated a callback query; for bots only.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the callback query.",
        "name": "callback_query_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_callback_query_message.html"
  },
  "getChat": {
    "type": "function",
    "desc": "Returns information about a chat by its identifier; this is an offline request if the current user is not a bot.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat.html"
  },
  "getChatActiveStories": {
    "type": "function",
    "desc": "Returns the list of active stories posted by the given chat.\nReturns object_ptr<ChatActiveStories>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_active_stories.html"
  },
  "getChatAdministrators": {
    "type": "function",
    "desc": "Returns a list of administrators of the chat with their custom titles.\nReturns object_ptr<ChatAdministrators>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_administrators.html"
  },
  "getChatArchivedStories": {
    "type": "function",
    "desc": "Returns the list of all stories posted by the given chat; requires can_edit_stories rights for channel chats. The stories are returned in a reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib.\nReturns object_ptr<Stories>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story starting from which stories must be returned; use 0 to get results from the last story.",
        "name": "from_story_id",
        "type": "number"
      },
      {
        "desc": "The maximum number of stories to be returned For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_archived_stories.html"
  },
  "getChatAvailableMessageSenders": {
    "type": "function",
    "desc": "Returns list of message sender identifiers, which can be used to send messages in a chat.\nReturns object_ptr<ChatMessageSenders>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_available_message_senders.html"
  },
  "getChatBoostLink": {
    "type": "function",
    "desc": "Returns an HTTPS link to boost the specified channel chat.\nReturns object_ptr<ChatBoostLink>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_boost_link.html"
  },
  "getChatBoostLinkInfo": {
    "type": "function",
    "desc": "Returns information about a link to boost a chat. Can be called for any internal link of the type internalLinkTypeChatBoost.\nReturns object_ptr<ChatBoostLinkInfo>.",
    "fields": [
      {
        "desc": "The link to boost a chat.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_boost_link_info.html"
  },
  "getChatBoostStatus": {
    "type": "function",
    "desc": "Returns the current boost status for a channel chat.\nReturns object_ptr<ChatBoostStatus>.",
    "fields": [
      {
        "desc": "Identifier of the channel chat.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_boost_status.html"
  },
  "getChatBoosts": {
    "type": "function",
    "desc": "Returns list of boosts applied to a chat; requires administrator rights in the channel chat.\nReturns object_ptr<FoundChatBoosts>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to receive only boosts received from gift codes and giveaways created by the chat.",
        "name": "only_gift_codes",
        "type": "bool"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of boosts to be returned; up to 100. For optimal performance, the number of returned boosts can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_boosts.html"
  },
  "getChatEventLog": {
    "type": "function",
    "desc": "Returns a list of service actions taken by chat members and administrators in the last 48 hours. Available only for supergroups and channels. Requires administrator rights. Returns results in reverse chronological order (i.e., in order of decreasing event_id).\nReturns object_ptr<ChatEvents>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Search query by which to filter events.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Identifier of an event from which to return results. Use 0 to get results from the latest events.",
        "name": "from_event_id",
        "type": "string"
      },
      {
        "desc": "The maximum number of events to return; up to 100.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "The types of events to return; pass null to get chat events of all types.",
        "name": "filters",
        "type": "chatEventLogFilters"
      },
      {
        "desc": "User identifiers by which to filter events. By default, events relating to all users will be returned.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_event_log.html"
  },
  "getChatFolder": {
    "type": "function",
    "desc": "Returns information about a chat folder by its identifier.\nReturns object_ptr<ChatFolder>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder.html"
  },
  "getChatFolderChatCount": {
    "type": "function",
    "desc": "Returns approximate number of chats in a being created chat folder. Main and archive chat lists must be fully preloaded for this function to work correctly.\nReturns object_ptr<Count>.",
    "fields": [
      {
        "desc": "The new chat folder.",
        "name": "folder",
        "type": "chatFolder"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder_chat_count.html"
  },
  "getChatFolderChatsToLeave": {
    "type": "function",
    "desc": "Returns identifiers of pinned or always included chats from a chat folder, which are suggested to be left when the chat folder is deleted.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder_chats_to_leave.html"
  },
  "getChatFolderDefaultIconName": {
    "type": "function",
    "desc": "Returns default icon name for a folder. Can be called synchronously.\nReturns object_ptr<ChatFolderIcon>.",
    "fields": [
      {
        "desc": "Chat folder.",
        "name": "folder",
        "type": "chatFolder"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder_default_icon_name.html"
  },
  "getChatFolderInviteLinks": {
    "type": "function",
    "desc": "Returns invite links created by the current user for a shareable chat folder.\nReturns object_ptr<ChatFolderInviteLinks>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder_invite_links.html"
  },
  "getChatFolderNewChats": {
    "type": "function",
    "desc": "Returns new chats added to a shareable chat folder by its owner. The method must be called at most once in getOption(\"chat_folder_new_chats_update_period\") for the given chat folder.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_folder_new_chats.html"
  },
  "getChatHistory": {
    "type": "function",
    "desc": "Returns messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib. This is an offline request if only_local is true.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.",
        "name": "from_message_id",
        "type": "string"
      },
      {
        "desc": "Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Pass true to get only messages that are available without sending network requests.",
        "name": "only_local",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_history.html"
  },
  "getChatInviteLink": {
    "type": "function",
    "desc": "Returns information about an invite link. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links.\nReturns object_ptr<ChatInviteLink>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link to get.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_invite_link.html"
  },
  "getChatInviteLinkCounts": {
    "type": "function",
    "desc": "Returns list of chat administrators with number of their invite links. Requires owner privileges in the chat.\nReturns object_ptr<ChatInviteLinkCounts>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_invite_link_counts.html"
  },
  "getChatInviteLinkMembers": {
    "type": "function",
    "desc": "Returns chat members joined a chat via an invite link. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.\nReturns object_ptr<ChatInviteLinkMembers>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link for which to return chat members.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "A chat member from which to return next chat members; pass null to get results from the beginning.",
        "name": "offset_member",
        "type": "chatInviteLinkMember"
      },
      {
        "desc": "The maximum number of chat members to return; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_invite_link_members.html"
  },
  "getChatInviteLinks": {
    "type": "function",
    "desc": "Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links.\nReturns object_ptr<ChatInviteLinks>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "User identifier of a chat administrator. Must be an identifier of the current user for non-owner.",
        "name": "creator_user_id",
        "type": "string"
      },
      {
        "desc": "Pass true if revoked links needs to be returned instead of active or expired.",
        "name": "is_revoked",
        "type": "bool"
      },
      {
        "desc": "Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning.",
        "name": "offset_date",
        "type": "number"
      },
      {
        "desc": "Invite link starting after which to return invite links; use empty string to get results from the beginning.",
        "name": "offset_invite_link",
        "type": "string"
      },
      {
        "desc": "The maximum number of invite links to return; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_invite_links.html"
  },
  "getChatJoinRequests": {
    "type": "function",
    "desc": "Returns pending join requests in a chat.\nReturns object_ptr<ChatJoinRequests>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link for which to return join requests. If empty, all join requests will be returned. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "A query to search for in the first names, last names and usernames of the users to return.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "A chat join request from which to return next requests; pass null to get results from the beginning.",
        "name": "offset_request",
        "type": "chatJoinRequest"
      },
      {
        "desc": "The maximum number of requests to join the chat to return.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_join_requests.html"
  },
  "getChatListsToAddChat": {
    "type": "function",
    "desc": "Returns chat lists to which the chat can be added. This is an offline request.\nReturns object_ptr<ChatLists>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_lists_to_add_chat.html"
  },
  "getChatMember": {
    "type": "function",
    "desc": "Returns information about a single member of a chat.\nReturns object_ptr<ChatMember>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Member identifier.",
        "name": "member_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_member.html"
  },
  "getChatMessageByDate": {
    "type": "function",
    "desc": "Returns the last message sent in a chat no later than the specified date.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) relative to which to search for messages.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_message_by_date.html"
  },
  "getChatMessageCalendar": {
    "type": "function",
    "desc": "Returns information about the next messages of the specified type in the chat split by days. Returns the results in reverse chronological order. Can return partial result for the last returned day. Behavior of this method depends on the value of the option \"utc_time_offset\".\nReturns object_ptr<MessageCalendar>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to return information about messages.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "The message identifier from which to return information about messages; use 0 to get results from the last message.",
        "name": "from_message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_message_calendar.html"
  },
  "getChatMessageCount": {
    "type": "function",
    "desc": "Returns approximate number of messages of the specified type in the chat.\nReturns object_ptr<Count>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to count messages.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Filter for message content; searchMessagesFilterEmpty is unsupported in this function.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "Pass true to get the number of messages without sending network requests, or -1 if the number of messages is unknown locally.",
        "name": "return_local",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_message_count.html"
  },
  "getChatMessagePosition": {
    "type": "function",
    "desc": "Returns approximate 1-based position of a message among messages, which can be found by the specified filter in the chat. Cannot be used in secret chats.\nReturns object_ptr<Count>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to find message position.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Filter for message content; searchMessagesFilterEmpty, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and searchMessagesFilterFailedToSend are unsupported in this function.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "If not 0, only messages in the specified thread will be considered; supergroups only.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_message_position.html"
  },
  "getChatNotificationSettingsExceptions": {
    "type": "function",
    "desc": "Returns list of chats with non-default notification settings for new messages.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "If specified, only chats from the scope will be returned; pass null to return chats from all scopes.",
        "name": "scope",
        "type": "NotificationSettingsScope"
      },
      {
        "desc": "Pass true to include in the response chats with only non-default sound.",
        "name": "compare_sound",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_notification_settings_exceptions.html"
  },
  "getChatPinnedMessage": {
    "type": "function",
    "desc": "Returns information about a newest pinned message in the chat.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_pinned_message.html"
  },
  "getChatPinnedStories": {
    "type": "function",
    "desc": "Returns the list of pinned stories posted by the given chat. The stories are returned in a reverse chronological order (i.e., in order of decreasing story_id). For optimal performance, the number of returned stories is chosen by TDLib.\nReturns object_ptr<Stories>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story starting from which stories must be returned; use 0 to get results from the last story.",
        "name": "from_story_id",
        "type": "number"
      },
      {
        "desc": "The maximum number of stories to be returned For optimal performance, the number of returned stories is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_pinned_stories.html"
  },
  "getChatScheduledMessages": {
    "type": "function",
    "desc": "Returns all scheduled messages in a chat. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_scheduled_messages.html"
  },
  "getChatSimilarChatCount": {
    "type": "function",
    "desc": "Returns approximate number of chats similar to the given chat.\nReturns object_ptr<Count>.",
    "fields": [
      {
        "desc": "Identifier of the target chat; must be an identifier of a channel chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to get the number of chats without sending network requests, or -1 if the number of chats is unknown locally.",
        "name": "return_local",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_similar_chat_count.html"
  },
  "getChatSimilarChats": {
    "type": "function",
    "desc": "Returns a list of chats similar to the given chat.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Identifier of the target chat; must be an identifier of a channel chat.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_similar_chats.html"
  },
  "getChatSparseMessagePositions": {
    "type": "function",
    "desc": "Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). Cannot be used in secret chats or with searchMessagesFilterFailedToSend filter without an enabled message database.\nReturns object_ptr<MessagePositions>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to return information about message positions.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and searchMessagesFilterUnreadReaction are unsupported in this function.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "The message identifier from which to return information about message positions.",
        "name": "from_message_id",
        "type": "string"
      },
      {
        "desc": "The expected number of message positions to be returned; 50-2000. A smaller number of positions can be returned, if there are not enough appropriate messages.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_sparse_message_positions.html"
  },
  "getChatSponsoredMessages": {
    "type": "function",
    "desc": "Returns sponsored messages to be shown in a chat; for channel chats only.\nReturns object_ptr<SponsoredMessages>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_sponsored_messages.html"
  },
  "getChatStatistics": {
    "type": "function",
    "desc": "Returns detailed statistics about a chat. Currently, this method can be used only for supergroups and channels. Can be used only if supergroupFullInfo.can_get_statistics == true.\nReturns object_ptr<ChatStatistics>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true if a dark theme is used by the application.",
        "name": "is_dark",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chat_statistics.html"
  },
  "getChats": {
    "type": "function",
    "desc": "Returns an ordered list of chats from the beginning of a chat list. For informational purposes only. Use loadChats and updates processing instead to maintain chat lists in a consistent state.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "The chat list in which to return chats; pass null to get chats from the main chat list.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "The maximum number of chats to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chats.html"
  },
  "getChatsForChatFolderInviteLink": {
    "type": "function",
    "desc": "Returns identifiers of chats from a chat folder, suitable for adding to a chat folder invite link.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chats_for_chat_folder_invite_link.html"
  },
  "getChatsToSendStories": {
    "type": "function",
    "desc": "Returns channel chats in which the current user has the right to post stories. The chats must be rechecked with canSendStory before actually trying to post a story there.\nReturns object_ptr<Chats>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chats_to_send_stories.html"
  },
  "getCloseFriends": {
    "type": "function",
    "desc": "Returns all close friends of the current user.\nReturns object_ptr<Users>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_close_friends.html"
  },
  "getCommands": {
    "type": "function",
    "desc": "Returns list of commands supported by the bot for the given user scope and language; for bots only.\nReturns object_ptr<BotCommands>.",
    "fields": [
      {
        "desc": "The scope to which the commands are relevant; pass null to get commands in the default bot command scope.",
        "name": "scope",
        "type": "BotCommandScope"
      },
      {
        "desc": "A two-letter ISO 639-1 language code or an empty string.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_commands.html"
  },
  "getConnectedWebsites": {
    "type": "function",
    "desc": "Returns all website where the current user used Telegram to log in.\nReturns object_ptr<ConnectedWebsites>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_connected_websites.html"
  },
  "getContacts": {
    "type": "function",
    "desc": "Returns all contacts of the user.\nReturns object_ptr<Users>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_contacts.html"
  },
  "getCountries": {
    "type": "function",
    "desc": "Returns information about existing countries. Can be called before authorization.\nReturns object_ptr<Countries>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_countries.html"
  },
  "getCountryCode": {
    "type": "function",
    "desc": "Uses the current IP address to find the current country. Returns two-letter ISO 3166-1 alpha-2 country code. Can be called before authorization.\nReturns object_ptr<Text>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_country_code.html"
  },
  "getCreatedPublicChats": {
    "type": "function",
    "desc": "Returns a list of public chats of the specified type, owned by the user.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Type of the public chats to return.",
        "name": "type",
        "type": "PublicChatType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_created_public_chats.html"
  },
  "getCurrentState": {
    "type": "function",
    "desc": "Returns all updates needed to restore current TDLib state, i.e. all actual updateAuthorizationState/updateUser/updateNewChat and others. This is especially useful if TDLib is run in a separate process. Can be called before initialization.\nReturns object_ptr<Updates>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_current_state.html"
  },
  "getCustomEmojiReactionAnimations": {
    "type": "function",
    "desc": "Returns TGS stickers with generic animations for custom emoji reactions.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_custom_emoji_reaction_animations.html"
  },
  "getCustomEmojiStickers": {
    "type": "function",
    "desc": "Returns list of custom emoji stickers by their identifiers. Stickers are returned in arbitrary order. Only found stickers are returned.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "Identifiers of custom emoji stickers. At most 200 custom emoji stickers can be received simultaneously.",
        "name": "custom_emoji_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_custom_emoji_stickers.html"
  },
  "getDatabaseStatistics": {
    "type": "function",
    "desc": "Returns database statistics.\nReturns object_ptr<DatabaseStatistics>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_database_statistics.html"
  },
  "getDeepLinkInfo": {
    "type": "function",
    "desc": "Returns information about a tg:// deep link. Use \"tg://need_update_for_some_feature\" or \"tg:some_unsupported_feature\" for testing. Returns a 404 error for unknown links. Can be called before authorization.\nReturns object_ptr<DeepLinkInfo>.",
    "fields": [
      {
        "desc": "The link.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_deep_link_info.html"
  },
  "getDefaultBackgroundCustomEmojiStickers": {
    "type": "function",
    "desc": "Returns default list of custom emoji stickers for reply background.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_default_background_custom_emoji_stickers.html"
  },
  "getDefaultChatPhotoCustomEmojiStickers": {
    "type": "function",
    "desc": "Returns default list of custom emoji stickers for placing on a chat photo.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_default_chat_photo_custom_emoji_stickers.html"
  },
  "getDefaultEmojiStatuses": {
    "type": "function",
    "desc": "Returns default emoji statuses.\nReturns object_ptr<EmojiStatuses>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_default_emoji_statuses.html"
  },
  "getDefaultMessageAutoDeleteTime": {
    "type": "function",
    "desc": "Returns default message auto-delete time setting for new chats.\nReturns object_ptr<MessageAutoDeleteTime>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_default_message_auto_delete_time.html"
  },
  "getDefaultProfilePhotoCustomEmojiStickers": {
    "type": "function",
    "desc": "Returns default list of custom emoji stickers for placing on a profile photo.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_default_profile_photo_custom_emoji_stickers.html"
  },
  "getEmojiCategories": {
    "type": "function",
    "desc": "Returns available emojis categories.\nReturns object_ptr<EmojiCategories>.",
    "fields": [
      {
        "desc": "Type of emoji categories to return; pass null to get default emoji categories.",
        "name": "type",
        "type": "EmojiCategoryType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_emoji_categories.html"
  },
  "getEmojiReaction": {
    "type": "function",
    "desc": "Returns information about a emoji reaction. Returns a 404 error if the reaction is not found.\nReturns object_ptr<EmojiReaction>.",
    "fields": [
      {
        "desc": "Text representation of the reaction.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_emoji_reaction.html"
  },
  "getEmojiSuggestionsUrl": {
    "type": "function",
    "desc": "Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Language code for which the emoji replacements will be suggested.",
        "name": "language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_emoji_suggestions_url.html"
  },
  "getExternalLink": {
    "type": "function",
    "desc": "Returns an HTTP URL which can be used to automatically authorize the current user on a website after clicking an HTTP link. Use the method getExternalLinkInfo to find whether a prior user confirmation is needed.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "The HTTP link.",
        "name": "link",
        "type": "string"
      },
      {
        "desc": "Pass true if the current user allowed the bot, returned in getExternalLinkInfo, to send them messages.",
        "name": "allow_write_access",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_external_link.html"
  },
  "getExternalLinkInfo": {
    "type": "function",
    "desc": "Returns information about an action to be done when the current user clicks an external link. Don't use this method for links from secret chats if web page preview is disabled in secret chats.\nReturns object_ptr<LoginUrlInfo>.",
    "fields": [
      {
        "desc": "The link.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_external_link_info.html"
  },
  "getFavoriteStickers": {
    "type": "function",
    "desc": "Returns favorite stickers.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_favorite_stickers.html"
  },
  "getFile": {
    "type": "function",
    "desc": "Returns information about a file; this is an offline request.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Identifier of the file to get.",
        "name": "file_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file.html"
  },
  "getFileDownloadedPrefixSize": {
    "type": "function",
    "desc": "Returns file downloaded prefix size from a given offset, in bytes.\nReturns object_ptr<FileDownloadedPrefixSize>.",
    "fields": [
      {
        "desc": "Identifier of the file.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Offset from which downloaded prefix size needs to be calculated.",
        "name": "offset",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file_downloaded_prefix_size.html"
  },
  "getFileExtension": {
    "type": "function",
    "desc": "Returns the extension of a file, guessed by its MIME type. Returns an empty string on failure. Can be called synchronously.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "The MIME type of the file.",
        "name": "mime_type",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file_extension.html"
  },
  "getFileMimeType": {
    "type": "function",
    "desc": "Returns the MIME type of a file, guessed by its extension. Returns an empty string on failure. Can be called synchronously.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "The name of the file or path to the file.",
        "name": "file_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_file_mime_type.html"
  },
  "getForumTopic": {
    "type": "function",
    "desc": "Returns information about a forum topic.\nReturns object_ptr<ForumTopic>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_forum_topic.html"
  },
  "getForumTopicDefaultIcons": {
    "type": "function",
    "desc": "Returns list of custom emojis, which can be used as forum topic icon by all users.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_forum_topic_default_icons.html"
  },
  "getForumTopicLink": {
    "type": "function",
    "desc": "Returns an HTTPS link to a topic in a forum chat. This is an offline request.\nReturns object_ptr<MessageLink>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_forum_topic_link.html"
  },
  "getForumTopics": {
    "type": "function",
    "desc": "Returns found forum topics in a forum chat. This is a temporary method for getting information about topic list from the server.\nReturns object_ptr<ForumTopics>.",
    "fields": [
      {
        "desc": "Identifier of the forum chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Query to search for in the forum topic's name.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The date starting from which the results need to be fetched. Use 0 or any date in the future to get results from the last topic.",
        "name": "offset_date",
        "type": "number"
      },
      {
        "desc": "The message identifier of the last message in the last found topic, or 0 for the first request.",
        "name": "offset_message_id",
        "type": "string"
      },
      {
        "desc": "The message thread identifier of the last found topic, or 0 for the first request.",
        "name": "offset_message_thread_id",
        "type": "string"
      },
      {
        "desc": "The maximum number of forum topics to be returned; up to 100. For optimal performance, the number of returned forum topics is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_forum_topics.html"
  },
  "getGameHighScores": {
    "type": "function",
    "desc": "Returns the high scores for a game and some part of the high score table in the range of the specified user; for bots only.\nReturns object_ptr<GameHighScores>.",
    "fields": [
      {
        "desc": "The chat that contains the message with the game.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_game_high_scores.html"
  },
  "getGroupCall": {
    "type": "function",
    "desc": "Returns information about a group call.\nReturns object_ptr<GroupCall>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_group_call.html"
  },
  "getGroupCallInviteLink": {
    "type": "function",
    "desc": "Returns invite link to a video chat in a public chat.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Pass true if the invite link needs to contain an invite hash, passing which to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.can_be_managed group call flag.",
        "name": "can_self_unmute",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_group_call_invite_link.html"
  },
  "getGroupCallStreamSegment": {
    "type": "function",
    "desc": "Returns a file with a segment of a group call stream in a modified OGG format for audio or MPEG-4 format for video.\nReturns object_ptr<FilePart>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Point in time when the stream segment begins; Unix timestamp in milliseconds.",
        "name": "time_offset",
        "type": "string"
      },
      {
        "desc": "Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds.",
        "name": "scale",
        "type": "number"
      },
      {
        "desc": "Identifier of an audio/video channel to get as received from tgcalls.",
        "name": "channel_id",
        "type": "number"
      },
      {
        "desc": "Video quality as received from tgcalls; pass null to get the worst available quality.",
        "name": "video_quality",
        "type": "GroupCallVideoQuality"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_group_call_stream_segment.html"
  },
  "getGroupCallStreams": {
    "type": "function",
    "desc": "Returns information about available group call streams.\nReturns object_ptr<GroupCallStreams>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_group_call_streams.html"
  },
  "getGroupsInCommon": {
    "type": "function",
    "desc": "Returns a list of common group chats with a given user. Chats are sorted by their type and creation date.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Chat identifier starting from which to return chats; use 0 for the first request.",
        "name": "offset_chat_id",
        "type": "string"
      },
      {
        "desc": "The maximum number of chats to be returned; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_groups_in_common.html"
  },
  "getImportedContactCount": {
    "type": "function",
    "desc": "Returns the total number of imported contacts.\nReturns object_ptr<Count>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_imported_contact_count.html"
  },
  "getInactiveSupergroupChats": {
    "type": "function",
    "desc": "Returns a list of recently inactive supergroups and channels. Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH error. Also, the limit can be increased with Telegram Premium.\nReturns object_ptr<Chats>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_inactive_supergroup_chats.html"
  },
  "getInlineGameHighScores": {
    "type": "function",
    "desc": "Returns game high scores and some part of the high score table in the range of the specified user; for bots only.\nReturns object_ptr<GameHighScores>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_inline_game_high_scores.html"
  },
  "getInlineQueryResults": {
    "type": "function",
    "desc": "Sends an inline query to a bot and returns its results. Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.\nReturns object_ptr<InlineQueryResults>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the chat where the query was sent.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Location of the user; pass null if unknown or the bot doesn't need user's location.",
        "name": "user_location",
        "type": "location"
      },
      {
        "desc": "Text of the query.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Offset of the first entry to return; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_inline_query_results.html"
  },
  "getInstalledStickerSets": {
    "type": "function",
    "desc": "Returns a list of installed sticker sets.\nReturns object_ptr<StickerSets>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to return.",
        "name": "sticker_type",
        "type": "StickerType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_installed_sticker_sets.html"
  },
  "getInternalLink": {
    "type": "function",
    "desc": "Returns an HTTPS or a tg: link with the given type. Can be called before authorization.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Expected type of the link.",
        "name": "type",
        "type": "InternalLinkType"
      },
      {
        "desc": "Pass true to create an HTTPS link (only available for some link types); pass false to create a tg: link.",
        "name": "is_http",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_internal_link.html"
  },
  "getInternalLinkType": {
    "type": "function",
    "desc": "Returns information about the type of an internal link. Returns a 404 error if the link is not internal. Can be called before authorization.\nReturns object_ptr<InternalLinkType>.",
    "fields": [
      {
        "desc": "The link.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_internal_link_type.html"
  },
  "getJsonString": {
    "type": "function",
    "desc": "Converts a JsonValue object to corresponding JSON-serialized string. Can be called synchronously.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "The JsonValue object.",
        "name": "json_value",
        "type": "JsonValue"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_json_string.html"
  },
  "getJsonValue": {
    "type": "function",
    "desc": "Converts a JSON-serialized string to corresponding JsonValue object. Can be called synchronously.\nReturns object_ptr<JsonValue>.",
    "fields": [
      {
        "desc": "The JSON-serialized string.",
        "name": "json",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_json_value.html"
  },
  "getLanguagePackInfo": {
    "type": "function",
    "desc": "Returns information about a language pack. Returned language pack identifier may be different from a provided one. Can be called before authorization.\nReturns object_ptr<LanguagePackInfo>.",
    "fields": [
      {
        "desc": "Language pack identifier.",
        "name": "language_pack_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_language_pack_info.html"
  },
  "getLanguagePackString": {
    "type": "function",
    "desc": "Returns a string stored in the local database from the specified localization target and language pack by its key. Returns a 404 error if the string is not found. Can be called synchronously.\nReturns object_ptr<LanguagePackStringValue>.",
    "fields": [
      {
        "desc": "Path to the language pack database in which strings are stored.",
        "name": "language_pack_database_path",
        "type": "string"
      },
      {
        "desc": "Localization target to which the language pack belongs.",
        "name": "localization_target",
        "type": "string"
      },
      {
        "desc": "Language pack identifier.",
        "name": "language_pack_id",
        "type": "string"
      },
      {
        "desc": "Language pack key of the string to be returned.",
        "name": "key",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_language_pack_string.html"
  },
  "getLanguagePackStrings": {
    "type": "function",
    "desc": "Returns strings from a language pack in the current localization target by their keys. Can be called before authorization.\nReturns object_ptr<LanguagePackStrings>.",
    "fields": [
      {
        "desc": "Language pack identifier of the strings to be returned.",
        "name": "language_pack_id",
        "type": "string"
      },
      {
        "desc": "Language pack keys of the strings to be returned; leave empty to request all available strings.",
        "name": "keys",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_language_pack_strings.html"
  },
  "getLocalizationTargetInfo": {
    "type": "function",
    "desc": "Returns information about the current localization target. This is an offline request if only_local is true. Can be called before authorization.\nReturns object_ptr<LocalizationTargetInfo>.",
    "fields": [
      {
        "desc": "Pass true to get only locally available information without sending network requests.",
        "name": "only_local",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_localization_target_info.html"
  },
  "getLogStream": {
    "type": "function",
    "desc": "Returns information about currently used log stream for internal logging of TDLib. Can be called synchronously.\nReturns object_ptr<LogStream>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_log_stream.html"
  },
  "getLogTagVerbosityLevel": {
    "type": "function",
    "desc": "Returns current verbosity level for a specified TDLib internal log tag. Can be called synchronously.\nReturns object_ptr<LogVerbosityLevel>.",
    "fields": [
      {
        "desc": "Logging tag to change verbosity level.",
        "name": "tag",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_log_tag_verbosity_level.html"
  },
  "getLogTags": {
    "type": "function",
    "desc": "Returns list of available TDLib internal log tags, for example, [\"actor\", \"binlog\", \"connections\", \"notifications\", \"proxy\"]. Can be called synchronously.\nReturns object_ptr<LogTags>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_log_tags.html"
  },
  "getLogVerbosityLevel": {
    "type": "function",
    "desc": "Returns current verbosity level of the internal logging of TDLib. Can be called synchronously.\nReturns object_ptr<LogVerbosityLevel>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_log_verbosity_level.html"
  },
  "getLoginUrl": {
    "type": "function",
    "desc": "Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is returned, then the button must be handled as an ordinary URL button.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Chat identifier of the message with the button.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier of the message with the button.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Button identifier.",
        "name": "button_id",
        "type": "string"
      },
      {
        "desc": "Pass true to allow the bot to send messages to the current user.",
        "name": "allow_write_access",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_login_url.html"
  },
  "getLoginUrlInfo": {
    "type": "function",
    "desc": "Returns information about a button of type inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button.\nReturns object_ptr<LoginUrlInfo>.",
    "fields": [
      {
        "desc": "Chat identifier of the message with the button.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier of the message with the button.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Button identifier.",
        "name": "button_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_login_url_info.html"
  },
  "getMapThumbnailFile": {
    "type": "function",
    "desc": "Returns information about a file with a map thumbnail in PNG format. Only map thumbnail files with size less than 1MB can be downloaded.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Location of the map center.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Map zoom level; 13-20.",
        "name": "zoom",
        "type": "number"
      },
      {
        "desc": "Map width in pixels before applying scale; 16-1024.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Map height in pixels before applying scale; 16-1024.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Map scale; 1-3.",
        "name": "scale",
        "type": "number"
      },
      {
        "desc": "Identifier of a chat in which the thumbnail will be shown. Use 0 if unknown.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_map_thumbnail_file.html"
  },
  "getMarkdownText": {
    "type": "function",
    "desc": "Replaces text entities with Markdown formatting in a human-friendly format. Entities that can't be represented in Markdown unambiguously are kept as is. Can be called synchronously.\nReturns object_ptr<FormattedText>.",
    "fields": [
      {
        "desc": "The text.",
        "name": "text",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_markdown_text.html"
  },
  "getMe": {
    "type": "function",
    "desc": "Returns the current user.\nReturns object_ptr<User>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_me.html"
  },
  "getMenuButton": {
    "type": "function",
    "desc": "Returns menu button set by the bot for the given user; for bots only.\nReturns object_ptr<BotMenuButton>.",
    "fields": [
      {
        "desc": "Identifier of the user or 0 to get the default menu button.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_menu_button.html"
  },
  "getMessage": {
    "type": "function",
    "desc": "Returns information about a message.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message to get.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message.html"
  },
  "getMessageAddedReactions": {
    "type": "function",
    "desc": "Returns reactions added for a message, along with their sender.\nReturns object_ptr<AddedReactions>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Type of the reactions to return; pass null to return all added reactions.",
        "name": "reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of reactions to be returned; must be positive and can't be greater than 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_added_reactions.html"
  },
  "getMessageAvailableReactions": {
    "type": "function",
    "desc": "Returns reactions, which can be added to a message. The list can change after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or updateMessageInteractionInfo for the message.\nReturns object_ptr<AvailableReactions>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Number of reaction per row, 5-25.",
        "name": "row_size",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_available_reactions.html"
  },
  "getMessageEmbeddingCode": {
    "type": "function",
    "desc": "Returns an HTML code for embedding the message. Available only for messages in supergroups and channels with a username.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true to return an HTML code for embedding of the whole media album.",
        "name": "for_album",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_embedding_code.html"
  },
  "getMessageFileType": {
    "type": "function",
    "desc": "Returns information about a file with messages exported from another application.\nReturns object_ptr<MessageFileType>.",
    "fields": [
      {
        "desc": "Beginning of the message file; up to 100 first lines.",
        "name": "message_file_head",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_file_type.html"
  },
  "getMessageImportConfirmationText": {
    "type": "function",
    "desc": "Returns a confirmation text to be shown to the user before starting message import.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_import_confirmation_text.html"
  },
  "getMessageLink": {
    "type": "function",
    "desc": "Returns an HTTPS link to a message in a chat. Available only for already sent messages in supergroups and channels, or if message.can_get_media_timestamp_links and a media timestamp link is generated. This is an offline request.\nReturns object_ptr<MessageLink>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "If not 0, timestamp from which the video/audio/video note/voice note/story playing must start, in seconds. The media can be in the message content or in its web page preview.",
        "name": "media_timestamp",
        "type": "number"
      },
      {
        "desc": "Pass true to create a link for the whole media album.",
        "name": "for_album",
        "type": "bool"
      },
      {
        "desc": "Pass true to create a link to the message as a channel post comment, in a message thread, or a forum topic.",
        "name": "in_message_thread",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_link.html"
  },
  "getMessageLinkInfo": {
    "type": "function",
    "desc": "Returns information about a public or private message link. Can be called for any internal link of the type internalLinkTypeMessage.\nReturns object_ptr<MessageLinkInfo>.",
    "fields": [
      {
        "desc": "The message link.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_link_info.html"
  },
  "getMessageLocally": {
    "type": "function",
    "desc": "Returns information about a message, if it is available without sending network request. This is an offline request.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message to get.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_locally.html"
  },
  "getMessagePublicForwards": {
    "type": "function",
    "desc": "Returns forwarded copies of a channel message to different public channels. Can be used only if message.can_get_statistics == true. For optimal performance, the number of returned messages is chosen by TDLib.\nReturns object_ptr<FoundMessages>.",
    "fields": [
      {
        "desc": "Chat identifier of the message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_public_forwards.html"
  },
  "getMessageStatistics": {
    "type": "function",
    "desc": "Returns detailed statistics about a message. Can be used only if message.can_get_statistics == true.\nReturns object_ptr<MessageStatistics>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true if a dark theme is used by the application.",
        "name": "is_dark",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_statistics.html"
  },
  "getMessageThread": {
    "type": "function",
    "desc": "Returns information about a message thread. Can be used only if message.can_get_message_thread == true.\nReturns object_ptr<MessageThreadInfo>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_thread.html"
  },
  "getMessageThreadHistory": {
    "type": "function",
    "desc": "Returns messages in a message thread of a message. Can be used only if message.can_get_message_thread == true. Message thread of a channel message is in the channel's linked supergroup. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier, which thread history needs to be returned.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.",
        "name": "from_message_id",
        "type": "string"
      },
      {
        "desc": "Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_thread_history.html"
  },
  "getMessageViewers": {
    "type": "function",
    "desc": "Returns viewers of a recent outgoing message in a basic group or a supergroup chat. For video notes and voice notes only users, opened content of the message, are returned. The method can be called if message.can_get_viewers == true.\nReturns object_ptr<MessageViewers>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_message_viewers.html"
  },
  "getMessages": {
    "type": "function",
    "desc": "Returns information about messages. If a message is not found, returns null on the corresponding position of the result.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Identifier of the chat the messages belong to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the messages to get.",
        "name": "message_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_messages.html"
  },
  "getNetworkStatistics": {
    "type": "function",
    "desc": "Returns network data usage statistics. Can be called before authorization.\nReturns object_ptr<NetworkStatistics>.",
    "fields": [
      {
        "desc": "Pass true to get statistics only for the current library launch.",
        "name": "only_current",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_network_statistics.html"
  },
  "getOption": {
    "type": "function",
    "desc": "Returns the value of an option by its name. (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before authorization. Can be called synchronously for options \"version\" and \"commit_hash\".\nReturns object_ptr<OptionValue>.",
    "fields": [
      {
        "desc": "The name of the option.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_option.html"
  },
  "getPassportAuthorizationForm": {
    "type": "function",
    "desc": "Returns a Telegram Passport authorization form for sharing data with a service.\nReturns object_ptr<PassportAuthorizationForm>.",
    "fields": [
      {
        "desc": "User identifier of the service's bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Telegram Passport element types requested by the service.",
        "name": "scope",
        "type": "string"
      },
      {
        "desc": "Service's public key.",
        "name": "public_key",
        "type": "string"
      },
      {
        "desc": "Unique request identifier provided by the service.",
        "name": "nonce",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_passport_authorization_form.html"
  },
  "getPassportAuthorizationFormAvailableElements": {
    "type": "function",
    "desc": "Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization form. Result can be received only once for each authorization form.\nReturns object_ptr<PassportElementsWithErrors>.",
    "fields": [
      {
        "desc": "Authorization form identifier.",
        "name": "authorization_form_id",
        "type": "number"
      },
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_passport_authorization_form_available_elements.html"
  },
  "getPassportElement": {
    "type": "function",
    "desc": "Returns one of the available Telegram Passport elements.\nReturns object_ptr<PassportElement>.",
    "fields": [
      {
        "desc": "Telegram Passport element type.",
        "name": "type",
        "type": "PassportElementType"
      },
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_passport_element.html"
  },
  "getPasswordState": {
    "type": "function",
    "desc": "Returns the current state of 2-step verification.\nReturns object_ptr<PasswordState>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_password_state.html"
  },
  "getPaymentForm": {
    "type": "function",
    "desc": "Returns an invoice payment form. This method must be called when the user presses inline button of the type inlineKeyboardButtonTypeBuy.\nReturns object_ptr<PaymentForm>.",
    "fields": [
      {
        "desc": "The invoice.",
        "name": "input_invoice",
        "type": "InputInvoice"
      },
      {
        "desc": "Preferred payment form theme; pass null to use the default theme.",
        "name": "theme",
        "type": "themeParameters"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_payment_form.html"
  },
  "getPaymentReceipt": {
    "type": "function",
    "desc": "Returns information about a successful payment.\nReturns object_ptr<PaymentReceipt>.",
    "fields": [
      {
        "desc": "Chat identifier of the messagePaymentSuccessful message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_payment_receipt.html"
  },
  "getPhoneNumberInfo": {
    "type": "function",
    "desc": "Returns information about a phone number by its prefix. Can be called before authorization.\nReturns object_ptr<PhoneNumberInfo>.",
    "fields": [
      {
        "desc": "The phone number prefix.",
        "name": "phone_number_prefix",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_phone_number_info.html"
  },
  "getPhoneNumberInfoSync": {
    "type": "function",
    "desc": "Returns information about a phone number by its prefix synchronously. getCountries must be called at least once after changing localization to the specified language if properly localized country information is expected. Can be called synchronously.\nReturns object_ptr<PhoneNumberInfo>.",
    "fields": [
      {
        "desc": "A two-letter ISO 639-1 language code for country information localization.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "The phone number prefix.",
        "name": "phone_number_prefix",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_phone_number_info_sync.html"
  },
  "getPollVoters": {
    "type": "function",
    "desc": "Returns message senders voted for the specified option in a non-anonymous polls. For optimal performance, the number of returned users is chosen by TDLib.\nReturns object_ptr<MessageSenders>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the poll belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message containing the poll.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "0-based identifier of the answer option.",
        "name": "option_id",
        "type": "number"
      },
      {
        "desc": "Number of voters to skip in the result; must be non-negative.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of voters to be returned; must be positive and can't be greater than 50. For optimal performance, the number of returned voters is chosen by TDLib and can be smaller than the specified limit, even if the end of the voter list has not been reached.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_poll_voters.html"
  },
  "getPreferredCountryLanguage": {
    "type": "function",
    "desc": "Returns an IETF language tag of the language preferred in the country, which must be used to fill native fields in Telegram Passport personal details. Returns a 404 error if unknown.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code.",
        "name": "country_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_preferred_country_language.html"
  },
  "getPremiumFeatures": {
    "type": "function",
    "desc": "Returns information about features, available to Premium users.\nReturns object_ptr<PremiumFeatures>.",
    "fields": [
      {
        "desc": "Source of the request; pass null if the method is called from some non-standard source.",
        "name": "source",
        "type": "PremiumSource"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_features.html"
  },
  "getPremiumGiftCodePaymentOptions": {
    "type": "function",
    "desc": "Returns available options for Telegram Premium gift code or giveaway creation.\nReturns object_ptr<PremiumGiftCodePaymentOptions>.",
    "fields": [
      {
        "desc": "Identifier of the channel chat, which will be automatically boosted by receivers of the gift codes and which is administered by the user; 0 if none.",
        "name": "boosted_chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_gift_code_payment_options.html"
  },
  "getPremiumGiveawayInfo": {
    "type": "function",
    "desc": "Returns information about a Telegram Premium giveaway.\nReturns object_ptr<PremiumGiveawayInfo>.",
    "fields": [
      {
        "desc": "Identifier of the channel chat which started the giveaway.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the giveaway message in the chat.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_giveaway_info.html"
  },
  "getPremiumLimit": {
    "type": "function",
    "desc": "Returns information about a limit, increased for Premium users. Returns a 404 error if the limit is unknown.\nReturns object_ptr<PremiumLimit>.",
    "fields": [
      {
        "desc": "Type of the limit.",
        "name": "limit_type",
        "type": "PremiumLimitType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_limit.html"
  },
  "getPremiumState": {
    "type": "function",
    "desc": "Returns state of Telegram Premium subscription and promotion videos for Premium features.\nReturns object_ptr<PremiumState>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_state.html"
  },
  "getPremiumStickerExamples": {
    "type": "function",
    "desc": "Returns examples of premium stickers for demonstration purposes.\nReturns object_ptr<Stickers>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_sticker_examples.html"
  },
  "getPremiumStickers": {
    "type": "function",
    "desc": "Returns premium stickers from regular sticker sets.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "The maximum number of stickers to be returned; 0-100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_premium_stickers.html"
  },
  "getProxies": {
    "type": "function",
    "desc": "Returns list of proxies that are currently set up. Can be called before authorization.\nReturns object_ptr<Proxies>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_proxies.html"
  },
  "getProxyLink": {
    "type": "function",
    "desc": "Returns an HTTPS link, which can be used to add a proxy. Available only for SOCKS5 and MTProto proxies. Can be called before authorization.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Proxy identifier.",
        "name": "proxy_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_proxy_link.html"
  },
  "getPushReceiverId": {
    "type": "function",
    "desc": "Returns a globally unique push notification subscription identifier for identification of an account, which has received a push notification. Can be called synchronously.\nReturns object_ptr<PushReceiverId>.",
    "fields": [
      {
        "desc": "JSON-encoded push notification payload.",
        "name": "payload",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_push_receiver_id.html"
  },
  "getRecentEmojiStatuses": {
    "type": "function",
    "desc": "Returns recent emoji statuses.\nReturns object_ptr<EmojiStatuses>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recent_emoji_statuses.html"
  },
  "getRecentInlineBots": {
    "type": "function",
    "desc": "Returns up to 20 recently used inline bots in the order of their last usage.\nReturns object_ptr<Users>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recent_inline_bots.html"
  },
  "getRecentStickers": {
    "type": "function",
    "desc": "Returns a list of recently used stickers.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers.",
        "name": "is_attached",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recent_stickers.html"
  },
  "getRecentlyOpenedChats": {
    "type": "function",
    "desc": "Returns recently opened chats; this is an offline request. Returns chats in the order of last opening.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "The maximum number of chats to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recently_opened_chats.html"
  },
  "getRecentlyVisitedTMeUrls": {
    "type": "function",
    "desc": "Returns t.me URLs recently visited by a newly registered user.\nReturns object_ptr<TMeUrls>.",
    "fields": [
      {
        "desc": "Google Play referrer to identify the user.",
        "name": "referrer",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recently_visited_t_me_urls.html"
  },
  "getRecommendedChatFolders": {
    "type": "function",
    "desc": "Returns recommended chat folders for the current user.\nReturns object_ptr<RecommendedChatFolders>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recommended_chat_folders.html"
  },
  "getRecoveryEmailAddress": {
    "type": "function",
    "desc": "Returns a 2-step verification recovery email address that was previously set up. This method can be used to verify a password provided by the user.\nReturns object_ptr<RecoveryEmailAddress>.",
    "fields": [
      {
        "desc": "The 2-step verification password for the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_recovery_email_address.html"
  },
  "getRemoteFile": {
    "type": "function",
    "desc": "Returns information about a file by its remote identifier; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Remote identifier of the file to get.",
        "name": "remote_file_id",
        "type": "string"
      },
      {
        "desc": "File type; pass null if unknown.",
        "name": "file_type",
        "type": "FileType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_remote_file.html"
  },
  "getRepliedMessage": {
    "type": "function",
    "desc": "Returns information about a non-bundled message that is replied by a given message. Also, returns the pinned message, the game message, the invoice message, the message with a previously set same background, the giveaway message, and the topic creation message for messages of the types messagePinMessage, messageGameScore, messagePaymentSuccessful, messageChatSetBackground, messagePremiumGiveawayCompleted and topic messages without non-bundled replied message respectively.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the chat the message belongs to.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the reply message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_replied_message.html"
  },
  "getSavedAnimations": {
    "type": "function",
    "desc": "Returns saved animations.\nReturns object_ptr<Animations>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_animations.html"
  },
  "getSavedNotificationSound": {
    "type": "function",
    "desc": "Returns saved notification sound by its identifier. Returns a 404 error if there is no saved notification sound with the specified identifier.\nReturns object_ptr<NotificationSounds>.",
    "fields": [
      {
        "desc": "Identifier of the notification sound.",
        "name": "notification_sound_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_notification_sound.html"
  },
  "getSavedNotificationSounds": {
    "type": "function",
    "desc": "Returns list of saved notification sounds. If a sound isn't in the list, then default sound needs to be used.\nReturns object_ptr<NotificationSounds>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_notification_sounds.html"
  },
  "getSavedOrderInfo": {
    "type": "function",
    "desc": "Returns saved order information. Returns a 404 error if there is no saved order information.\nReturns object_ptr<OrderInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_saved_order_info.html"
  },
  "getScopeNotificationSettings": {
    "type": "function",
    "desc": "Returns the notification settings for chats of a given type.\nReturns object_ptr<ScopeNotificationSettings>.",
    "fields": [
      {
        "desc": "Types of chats for which to return the notification settings information.",
        "name": "scope",
        "type": "NotificationSettingsScope"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_scope_notification_settings.html"
  },
  "getSecretChat": {
    "type": "function",
    "desc": "Returns information about a secret chat by its identifier. This is an offline request.\nReturns object_ptr<SecretChat>.",
    "fields": [
      {
        "desc": "Secret chat identifier.",
        "name": "secret_chat_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_secret_chat.html"
  },
  "getStatisticalGraph": {
    "type": "function",
    "desc": "Loads an asynchronous or a zoomed in statistical graph.\nReturns object_ptr<StatisticalGraph>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The token for graph loading.",
        "name": "token",
        "type": "string"
      },
      {
        "desc": "X-value for zoomed in graph or 0 otherwise.",
        "name": "x",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_statistical_graph.html"
  },
  "getStickerEmojis": {
    "type": "function",
    "desc": "Returns emoji corresponding to a sticker. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object.\nReturns object_ptr<Emojis>.",
    "fields": [
      {
        "desc": "Sticker file identifier.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_sticker_emojis.html"
  },
  "getStickerSet": {
    "type": "function",
    "desc": "Returns information about a sticker set by its identifier.\nReturns object_ptr<StickerSet>.",
    "fields": [
      {
        "desc": "Identifier of the sticker set.",
        "name": "set_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_sticker_set.html"
  },
  "getStickers": {
    "type": "function",
    "desc": "Returns stickers from the installed sticker sets that correspond to any of the given emoji or can be found by sticker-specific keywords. If the query is non-empty, then favorite, recently used or trending stickers may also be returned.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "Type of the stickers to return.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Search query; a space-separated list of emoji or a keyword prefix. If empty, returns all known installed stickers.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of stickers to be returned.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Chat identifier for which to return stickers. Available custom emoji stickers may be different for different chats.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_stickers.html"
  },
  "getStorageStatistics": {
    "type": "function",
    "desc": "Returns storage usage statistics. Can be called before authorization.\nReturns object_ptr<StorageStatistics>.",
    "fields": [
      {
        "desc": "The maximum number of chats with the largest storage usage for which separate statistics need to be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0.",
        "name": "chat_limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_storage_statistics.html"
  },
  "getStorageStatisticsFast": {
    "type": "function",
    "desc": "Quickly returns approximate storage usage statistics. Can be called before authorization.\nReturns object_ptr<StorageStatisticsFast>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_storage_statistics_fast.html"
  },
  "getStory": {
    "type": "function",
    "desc": "Returns a story.\nReturns object_ptr<Story>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Pass true to get only locally available information without sending network requests.",
        "name": "only_local",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story.html"
  },
  "getStoryAvailableReactions": {
    "type": "function",
    "desc": "Returns reactions, which can be chosen for a story.\nReturns object_ptr<AvailableReactions>.",
    "fields": [
      {
        "desc": "Number of reaction per row, 5-25.",
        "name": "row_size",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story_available_reactions.html"
  },
  "getStoryNotificationSettingsExceptions": {
    "type": "function",
    "desc": "Returns list of chats with non-default notification settings for stories.\nReturns object_ptr<Chats>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story_notification_settings_exceptions.html"
  },
  "getStoryPublicForwards": {
    "type": "function",
    "desc": "Returns forwards of a story as a message to public chats and reposts by public channels. Can be used only if the story is posted on behalf of the current user or story.can_get_statistics == true. For optimal performance, the number of returned messages and stories is chosen by TDLib.\nReturns object_ptr<StoryPublicForwards>.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages and stories to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story_public_forwards.html"
  },
  "getStoryStatistics": {
    "type": "function",
    "desc": "Returns detailed statistics about a story. Can be used only if story.can_get_statistics == true.\nReturns object_ptr<StoryStatistics>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Pass true if a dark theme is used by the application.",
        "name": "is_dark",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story_statistics.html"
  },
  "getStoryViewers": {
    "type": "function",
    "desc": "Returns viewers of a story. The method can be called only for stories posted on behalf of the current user.\nReturns object_ptr<StoryViewers>.",
    "fields": [
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Query to search for in names and usernames of the viewers; may be empty to get all relevant viewers.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Pass true to get only contacts; pass false to get all relevant viewers.",
        "name": "only_contacts",
        "type": "bool"
      },
      {
        "desc": "Pass true to get viewers with reaction first; pass false to get viewers sorted just by view_date.",
        "name": "prefer_with_reaction",
        "type": "bool"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of story viewers to return.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_story_viewers.html"
  },
  "getSuggestedFileName": {
    "type": "function",
    "desc": "Returns suggested name for saving a file in a given directory.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Identifier of the file.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Directory in which the file is supposed to be saved.",
        "name": "directory",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_suggested_file_name.html"
  },
  "getSuggestedStickerSetName": {
    "type": "function",
    "desc": "Returns a suggested name for a new sticker set with a given title.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Sticker set title; 1-64 characters.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_suggested_sticker_set_name.html"
  },
  "getSuitableDiscussionChats": {
    "type": "function",
    "desc": "Returns a list of basic group and supergroup chats, which can be used as a discussion group for a channel. Returned basic group chats must be first upgraded to supergroups before they can be set as a discussion group. To set a returned supergroup as a discussion group, access to its old messages must be enabled using toggleSupergroupIsAllHistoryAvailable first.\nReturns object_ptr<Chats>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_suitable_discussion_chats.html"
  },
  "getSupergroup": {
    "type": "function",
    "desc": "Returns information about a supergroup or a channel by its identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<Supergroup>.",
    "fields": [
      {
        "desc": "Supergroup or channel identifier.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup.html"
  },
  "getSupergroupFullInfo": {
    "type": "function",
    "desc": "Returns full information about a supergroup or a channel by its identifier, cached for up to 1 minute.\nReturns object_ptr<SupergroupFullInfo>.",
    "fields": [
      {
        "desc": "Supergroup or channel identifier.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup_full_info.html"
  },
  "getSupergroupMembers": {
    "type": "function",
    "desc": "Returns information about members or banned users in a supergroup or channel. Can be used only if supergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters.\nReturns object_ptr<ChatMembers>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "The type of users to return; pass null to use supergroupMembersFilterRecent.",
        "name": "filter",
        "type": "SupergroupMembersFilter"
      },
      {
        "desc": "Number of users to skip.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of users be returned; up to 200.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_supergroup_members.html"
  },
  "getSupportName": {
    "type": "function",
    "desc": "Returns localized name of the Telegram support user; for Telegram support only.\nReturns object_ptr<Text>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_support_name.html"
  },
  "getSupportUser": {
    "type": "function",
    "desc": "Returns a user that can be contacted to get support.\nReturns object_ptr<User>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_support_user.html"
  },
  "getTemporaryPasswordState": {
    "type": "function",
    "desc": "Returns information about the current temporary password.\nReturns object_ptr<TemporaryPasswordState>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_temporary_password_state.html"
  },
  "getTextEntities": {
    "type": "function",
    "desc": "Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses) found in the text. Can be called synchronously.\nReturns object_ptr<TextEntities>.",
    "fields": [
      {
        "desc": "The text in which to look for entities.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_text_entities.html"
  },
  "getThemeParametersJsonString": {
    "type": "function",
    "desc": "Converts a themeParameters object to corresponding JSON-serialized string. Can be called synchronously.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Theme parameters to convert to JSON.",
        "name": "theme",
        "type": "themeParameters"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_theme_parameters_json_string.html"
  },
  "getThemedEmojiStatuses": {
    "type": "function",
    "desc": "Returns up to 8 emoji statuses, which must be shown right after the default Premium Badge in the emoji status list.\nReturns object_ptr<EmojiStatuses>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_themed_emoji_statuses.html"
  },
  "getTopChats": {
    "type": "function",
    "desc": "Returns a list of frequently used chats.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Category of chats to be returned.",
        "name": "category",
        "type": "TopChatCategory"
      },
      {
        "desc": "The maximum number of chats to be returned; up to 30.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_top_chats.html"
  },
  "getTrendingStickerSets": {
    "type": "function",
    "desc": "Returns a list of trending sticker sets. For optimal performance, the number of returned sticker sets is chosen by TDLib.\nReturns object_ptr<TrendingStickerSets>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to return.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "The offset from which to return the sticker sets; must be non-negative.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of sticker sets to be returned; up to 100. For optimal performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the specified limit, even if the end of the list has not been reached.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_trending_sticker_sets.html"
  },
  "getUser": {
    "type": "function",
    "desc": "Returns information about a user by their identifier. This is an offline request if the current user is not a bot.\nReturns object_ptr<User>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user.html"
  },
  "getUserChatBoosts": {
    "type": "function",
    "desc": "Returns list of boosts applied to a chat by a given user; requires administrator rights in the channel chat; for bots only.\nReturns object_ptr<FoundChatBoosts>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_chat_boosts.html"
  },
  "getUserFullInfo": {
    "type": "function",
    "desc": "Returns full information about a user by their identifier.\nReturns object_ptr<UserFullInfo>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_full_info.html"
  },
  "getUserLink": {
    "type": "function",
    "desc": "Returns an HTTPS link, which can be used to get information about the current user.\nReturns object_ptr<UserLink>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_link.html"
  },
  "getUserPrivacySettingRules": {
    "type": "function",
    "desc": "Returns the current privacy settings.\nReturns object_ptr<UserPrivacySettingRules>.",
    "fields": [
      {
        "desc": "The privacy setting.",
        "name": "setting",
        "type": "UserPrivacySetting"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_privacy_setting_rules.html"
  },
  "getUserProfilePhotos": {
    "type": "function",
    "desc": "Returns the profile photos of a user. Personal and public photo aren't returned.\nReturns object_ptr<ChatPhotos>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The number of photos to skip; must be non-negative.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of photos to be returned; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_profile_photos.html"
  },
  "getUserSupportInfo": {
    "type": "function",
    "desc": "Returns support information for the given user; for Telegram support only.\nReturns object_ptr<UserSupportInfo>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_user_support_info.html"
  },
  "getVideoChatAvailableParticipants": {
    "type": "function",
    "desc": "Returns list of participant identifiers, on whose behalf a video chat in the chat can be joined.\nReturns object_ptr<MessageSenders>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_video_chat_available_participants.html"
  },
  "getVideoChatRtmpUrl": {
    "type": "function",
    "desc": "Returns RTMP URL for streaming to the chat; requires creator privileges.\nReturns object_ptr<RtmpUrl>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_video_chat_rtmp_url.html"
  },
  "getWebAppLinkUrl": {
    "type": "function",
    "desc": "Returns an HTTPS URL of a Web App to open after a link of the type internalLinkTypeWebApp is clicked.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which the link was clicked; pass 0 if none.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Short name of the Web App.",
        "name": "web_app_short_name",
        "type": "string"
      },
      {
        "desc": "Start parameter from internalLinkTypeWebApp.",
        "name": "start_parameter",
        "type": "string"
      },
      {
        "desc": "Preferred Web App theme; pass null to use the default theme.",
        "name": "theme",
        "type": "themeParameters"
      },
      {
        "desc": "Short name of the application; 0-64 English letters, digits, and underscores.",
        "name": "application_name",
        "type": "string"
      },
      {
        "desc": "Pass true if the current user allowed the bot to send them messages.",
        "name": "allow_write_access",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_app_link_url.html"
  },
  "getWebAppUrl": {
    "type": "function",
    "desc": "Returns an HTTPS URL of a Web App to open from the side menu, a keyboardButtonTypeWebApp button, an inlineQueryResultsButtonTypeWebApp button, or an internalLinkTypeSideMenuBot link.\nReturns object_ptr<HttpUrl>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The URL from a keyboardButtonTypeWebApp button, inlineQueryResultsButtonTypeWebApp button, an internalLinkTypeSideMenuBot link, or an empty when the bot is opened from the side menu.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Preferred Web App theme; pass null to use the default theme.",
        "name": "theme",
        "type": "themeParameters"
      },
      {
        "desc": "Short name of the application; 0-64 English letters, digits, and underscores.",
        "name": "application_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_app_url.html"
  },
  "getWebPageInstantView": {
    "type": "function",
    "desc": "Returns an instant view version of a web page if available. Returns a 404 error if the web page has no instant view page.\nReturns object_ptr<WebPageInstantView>.",
    "fields": [
      {
        "desc": "The web page URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Pass true to get full instant view for the web page.",
        "name": "force_full",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_page_instant_view.html"
  },
  "getWebPagePreview": {
    "type": "function",
    "desc": "Returns a link preview by the text of a message. Do not call this function too often. Returns a 404 error if the text has no link preview.\nReturns object_ptr<WebPage>.",
    "fields": [
      {
        "desc": "Message text with formatting.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Options to be used for generation of the link preview; pass null to use default link preview options.",
        "name": "link_preview_options",
        "type": "linkPreviewOptions"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_web_page_preview.html"
  },
  "hideSuggestedAction": {
    "type": "function",
    "desc": "Hides a suggested action.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Suggested action to hide.",
        "name": "action",
        "type": "SuggestedAction"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1hide_suggested_action.html"
  },
  "importContacts": {
    "type": "function",
    "desc": "Adds new contacts or edits existing contacts by their phone numbers; contacts' user identifiers are ignored.\nReturns object_ptr<ImportedContacts>.",
    "fields": [
      {
        "desc": "The list of contacts to import or edit; contacts' vCard are ignored and are not imported.",
        "name": "contacts",
        "type": "contact"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1import_contacts.html"
  },
  "importMessages": {
    "type": "function",
    "desc": "Imports messages exported from another app.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "File with messages to import. Only inputFileLocal and inputFileGenerated are supported. The file must not be previously uploaded.",
        "name": "message_file",
        "type": "InputFile"
      },
      {
        "desc": "Files used in the imported messages. Only inputFileLocal and inputFileGenerated are supported. The files must not be previously uploaded.",
        "name": "attached_files",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1import_messages.html"
  },
  "inviteGroupCallParticipants": {
    "type": "function",
    "desc": "Invites users to an active group call. Sends a service message of type messageInviteVideoChatParticipants for video chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "User identifiers. At most 10 users can be invited simultaneously.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invite_group_call_participants.html"
  },
  "joinChat": {
    "type": "function",
    "desc": "Adds the current user as a new member to a chat. Private and secret chats can't be joined using this method. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1join_chat.html"
  },
  "joinChatByInviteLink": {
    "type": "function",
    "desc": "Uses an invite link to add the current user to the chat if possible. May return an error with a message \"INVITE_REQUEST_SENT\" if only a join request was created.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Invite link to use.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1join_chat_by_invite_link.html"
  },
  "joinGroupCall": {
    "type": "function",
    "desc": "Joins an active group call. Returns join response payload for tgcalls.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a group call participant, which will be used to join the call; pass null to join as self; video chats only.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "Caller audio channel synchronization source identifier; received from tgcalls.",
        "name": "audio_source_id",
        "type": "number"
      },
      {
        "desc": "Group call join payload; received from tgcalls.",
        "name": "payload",
        "type": "string"
      },
      {
        "desc": "Pass true to join the call with muted microphone.",
        "name": "is_muted",
        "type": "bool"
      },
      {
        "desc": "Pass true if the user's video is enabled.",
        "name": "is_my_video_enabled",
        "type": "bool"
      },
      {
        "desc": "If non-empty, invite hash to be used to join the group call without being muted by administrators.",
        "name": "invite_hash",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1join_group_call.html"
  },
  "launchPrepaidPremiumGiveaway": {
    "type": "function",
    "desc": "Launches a prepaid Telegram Premium giveaway for subscribers of channel chats; requires can_post_messages rights in the channels.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Unique identifier of the prepaid giveaway.",
        "name": "giveaway_id",
        "type": "string"
      },
      {
        "desc": "Giveaway parameters.",
        "name": "parameters",
        "type": "premiumGiveawayParameters"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1launch_prepaid_premium_giveaway.html"
  },
  "leaveChat": {
    "type": "function",
    "desc": "Removes the current user from chat members. Private and secret chats can't be left using this method.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1leave_chat.html"
  },
  "leaveGroupCall": {
    "type": "function",
    "desc": "Leaves a group call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1leave_group_call.html"
  },
  "loadActiveStories": {
    "type": "function",
    "desc": "Loads more active stories from a story list. The loaded stories will be sent through updates. Active stories are sorted by the pair (active_stories.order, active_stories.story_sender_chat_id) in descending order. Returns a 404 error if all active stories have been loaded.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The story list in which to load active stories.",
        "name": "story_list",
        "type": "StoryList"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1load_active_stories.html"
  },
  "loadChats": {
    "type": "function",
    "desc": "Loads more chats from a chat list. The loaded chats and their positions in the chat list will be sent through updates. Chats are sorted by the pair (chat.position.order, chat.id) in descending order. Returns a 404 error if all chats have been loaded.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The chat list in which to load chats; pass null to load chats from the main chat list.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "The maximum number of chats to be loaded. For optimal performance, the number of loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1load_chats.html"
  },
  "loadGroupCallParticipants": {
    "type": "function",
    "desc": "Loads more participants of a group call. The loaded participants will be received through updates. Use the field groupCall.loaded_all_participants to check whether all participants have already been loaded.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier. The group call must be previously received through getGroupCall and must be joined or being joined.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "The maximum number of participants to load; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1load_group_call_participants.html"
  },
  "logOut": {
    "type": "function",
    "desc": "Closes the TDLib instance after a proper logout. Requires an available network connection. All local data will be destroyed. After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_out.html"
  },
  "openChat": {
    "type": "function",
    "desc": "Informs TDLib that the chat is opened by the user. Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are received only for opened chats).\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_chat.html"
  },
  "openMessageContent": {
    "type": "function",
    "desc": "Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document, location or venue, or has listened to an audio file or voice note message). An updateMessageContentOpened update will be generated if something has changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier of the message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message with the opened content.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_message_content.html"
  },
  "openStory": {
    "type": "function",
    "desc": "Informs TDLib that a story is opened and is being viewed by the user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the sender of the opened story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_story.html"
  },
  "openWebApp": {
    "type": "function",
    "desc": "Informs TDLib that a Web App is being opened from the attachment menu, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation alert about data sent to the bot must be shown once.\nReturns object_ptr<WebAppInfo>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which the Web App is opened. The Web App can't be opened in secret chats.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the bot, providing the Web App.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an empty string otherwise.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Preferred Web App theme; pass null to use the default theme.",
        "name": "theme",
        "type": "themeParameters"
      },
      {
        "desc": "Short name of the application; 0-64 English letters, digits, and underscores.",
        "name": "application_name",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the message will be sent.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Information about the message or story to be replied in the message sent by the Web App; pass null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1open_web_app.html"
  },
  "optimizeStorage": {
    "type": "function",
    "desc": "Optimizes storage usage, i.e. deletes some files and returns new storage usage statistics. Secret thumbnails can't be deleted.\nReturns object_ptr<StorageStatistics>.",
    "fields": [
      {
        "desc": "Limit on the total size of files after deletion, in bytes. Pass -1 to use the default limit.",
        "name": "size",
        "type": "string"
      },
      {
        "desc": "Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit.",
        "name": "ttl",
        "type": "number"
      },
      {
        "desc": "Limit on the total number of files after deletion. Pass -1 to use the default limit.",
        "name": "count",
        "type": "number"
      },
      {
        "desc": "The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value.",
        "name": "immunity_delay",
        "type": "number"
      },
      {
        "desc": "If non-empty, only files with the given types are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted.",
        "name": "file_types",
        "type": "FileType"
      },
      {
        "desc": "If non-empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos).",
        "name": "chat_ids",
        "type": "string"
      },
      {
        "desc": "If non-empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos).",
        "name": "exclude_chat_ids",
        "type": "string"
      },
      {
        "desc": "Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics.",
        "name": "return_deleted_file_statistics",
        "type": "bool"
      },
      {
        "desc": "Same as in getStorageStatistics. Affects only returned statistics.",
        "name": "chat_limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1optimize_storage.html"
  },
  "parseMarkdown": {
    "type": "function",
    "desc": "Parses Markdown entities in a human-friendly format, ignoring markup errors. Can be called synchronously.\nReturns object_ptr<FormattedText>.",
    "fields": [
      {
        "desc": "The text to parse. For example, \"italic strikethrough ||spoiler|| bold code pre [italic text_url](telegram.org) __italic**bold italic__bold**\".",
        "name": "text",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1parse_markdown.html"
  },
  "parseTextEntities": {
    "type": "function",
    "desc": "Parses Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities from a marked-up text. Can be called synchronously.\nReturns object_ptr<FormattedText>.",
    "fields": [
      {
        "desc": "The text to parse.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Text parse mode.",
        "name": "parse_mode",
        "type": "TextParseMode"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1parse_text_entities.html"
  },
  "pinChatMessage": {
    "type": "function",
    "desc": "Pins a message in a chat; requires can_pin_messages rights or can_edit_messages rights in the channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the new pinned message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true to disable notification about the pinned message. Notifications are always disabled in channels and private chats.",
        "name": "disable_notification",
        "type": "bool"
      },
      {
        "desc": "Pass true to pin the message only for self; private chats only.",
        "name": "only_for_self",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1pin_chat_message.html"
  },
  "pingProxy": {
    "type": "function",
    "desc": "Computes time needed to receive a response from a Telegram server through a proxy. Can be called before authorization.\nReturns object_ptr<Seconds>.",
    "fields": [
      {
        "desc": "Proxy identifier. Use 0 to ping a Telegram server without a proxy.",
        "name": "proxy_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1ping_proxy.html"
  },
  "preliminaryUploadFile": {
    "type": "function",
    "desc": "Preliminary uploads a file to the cloud before sending it in a message, which can be useful for uploading of being recorded voice and video notes. Updates updateFile will be used to notify about upload progress and successful completion of the upload. The file will not have a persistent remote identifier until it is sent in a message.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "File to upload.",
        "name": "file",
        "type": "InputFile"
      },
      {
        "desc": "File type; pass null if unknown.",
        "name": "file_type",
        "type": "FileType"
      },
      {
        "desc": "Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which preliminaryUploadFile was called will be uploaded first.",
        "name": "priority",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1preliminary_upload_file.html"
  },
  "processChatFolderNewChats": {
    "type": "function",
    "desc": "Process new chats added to a shareable chat folder by its owner.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      },
      {
        "desc": "Identifiers of the new chats, which are added to the chat folder. The chats are automatically joined if they aren't joined yet.",
        "name": "added_chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1process_chat_folder_new_chats.html"
  },
  "processChatJoinRequest": {
    "type": "function",
    "desc": "Handles a pending join request in a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user that sent the request.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Pass true to approve the request; pass false to decline it.",
        "name": "approve",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1process_chat_join_request.html"
  },
  "processChatJoinRequests": {
    "type": "function",
    "desc": "Handles all pending join requests for a given link in a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link for which to process join requests. If empty, all join requests will be processed. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "Pass true to approve all requests; pass false to decline them.",
        "name": "approve",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1process_chat_join_requests.html"
  },
  "processPushNotification": {
    "type": "function",
    "desc": "Handles a push notification. Returns error with code 406 if the push notification is not supported and connection to the server is required to fetch new data. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "JSON-encoded push notification payload with all fields sent by the server, and \"google.sent_time\" and \"google.notification.sound\" fields added.",
        "name": "payload",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1process_push_notification.html"
  },
  "rateSpeechRecognition": {
    "type": "function",
    "desc": "Rates recognized speech in a video note or a voice note message.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true if the speech recognition is good.",
        "name": "is_good",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rate_speech_recognition.html"
  },
  "readAllChatMentions": {
    "type": "function",
    "desc": "Marks all mentions in a chat as read.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_all_chat_mentions.html"
  },
  "readAllChatReactions": {
    "type": "function",
    "desc": "Marks all reactions in a chat or a forum topic as read.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_all_chat_reactions.html"
  },
  "readAllMessageThreadMentions": {
    "type": "function",
    "desc": "Marks all mentions in a forum topic as read.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier in which mentions are marked as read.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_all_message_thread_mentions.html"
  },
  "readAllMessageThreadReactions": {
    "type": "function",
    "desc": "Marks all reactions in a forum topic as read.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier in which reactions are marked as read.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_all_message_thread_reactions.html"
  },
  "readChatList": {
    "type": "function",
    "desc": "Traverse all chats in a chat list and marks all messages in the chats as read.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat list in which to mark all chats as read.",
        "name": "chat_list",
        "type": "ChatList"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_chat_list.html"
  },
  "readFilePart": {
    "type": "function",
    "desc": "Reads a part of a file from the TDLib file cache and returns read bytes. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct read from the file.\nReturns object_ptr<FilePart>.",
    "fields": [
      {
        "desc": "Identifier of the file. The file must be located in the TDLib file cache.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "The offset from which to read the file.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position.",
        "name": "count",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1read_file_part.html"
  },
  "recognizeSpeech": {
    "type": "function",
    "desc": "Recognizes speech in a video note or a voice note message. The message must be successfully sent, must not be scheduled, and must be from a non-secret chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recognize_speech.html"
  },
  "recoverAuthenticationPassword": {
    "type": "function",
    "desc": "Recovers the 2-step verification password with a password recovery code sent to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Recovery code to check.",
        "name": "recovery_code",
        "type": "string"
      },
      {
        "desc": "New 2-step verification password of the user; may be empty to remove the password.",
        "name": "new_password",
        "type": "string"
      },
      {
        "desc": "New password hint; may be empty.",
        "name": "new_hint",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recover_authentication_password.html"
  },
  "recoverPassword": {
    "type": "function",
    "desc": "Recovers the 2-step verification password using a recovery code sent to an email address that was previously set up.\nReturns object_ptr<PasswordState>.",
    "fields": [
      {
        "desc": "Recovery code to check.",
        "name": "recovery_code",
        "type": "string"
      },
      {
        "desc": "New 2-step verification password of the user; may be empty to remove the password.",
        "name": "new_password",
        "type": "string"
      },
      {
        "desc": "New password hint; may be empty.",
        "name": "new_hint",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recover_password.html"
  },
  "registerDevice": {
    "type": "function",
    "desc": "Registers the currently used device for receiving push notifications. Returns a globally unique identifier of the push notification subscription.\nReturns object_ptr<PushReceiverId>.",
    "fields": [
      {
        "desc": "Device token.",
        "name": "device_token",
        "type": "DeviceToken"
      },
      {
        "desc": "List of user identifiers of other users currently using the application.",
        "name": "other_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1register_device.html"
  },
  "registerUser": {
    "type": "function",
    "desc": "Finishes user registration. Works only when the current authorization state is authorizationStateWaitRegistration.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The first name of the user; 1-64 characters.",
        "name": "first_name",
        "type": "string"
      },
      {
        "desc": "The last name of the user; 0-64 characters.",
        "name": "last_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1register_user.html"
  },
  "removeAllFilesFromDownloads": {
    "type": "function",
    "desc": "Removes all files from the file download list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to remove only active downloads, including paused.",
        "name": "only_active",
        "type": "bool"
      },
      {
        "desc": "Pass true to remove only completed downloads.",
        "name": "only_completed",
        "type": "bool"
      },
      {
        "desc": "Pass true to delete the file from the TDLib file cache.",
        "name": "delete_from_cache",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_all_files_from_downloads.html"
  },
  "removeBackground": {
    "type": "function",
    "desc": "Removes background from the list of installed backgrounds.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The background identifier.",
        "name": "background_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_background.html"
  },
  "removeChatActionBar": {
    "type": "function",
    "desc": "Removes a chat action bar without any other action.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_chat_action_bar.html"
  },
  "removeContacts": {
    "type": "function",
    "desc": "Removes users from the contact list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifiers of users to be deleted.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_contacts.html"
  },
  "removeFavoriteSticker": {
    "type": "function",
    "desc": "Removes a sticker from the list of favorite stickers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker file to delete from the list.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_favorite_sticker.html"
  },
  "removeFileFromDownloads": {
    "type": "function",
    "desc": "Removes a file from the file download list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the downloaded file.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Pass true to delete the file from the TDLib file cache.",
        "name": "delete_from_cache",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_file_from_downloads.html"
  },
  "removeMessageReaction": {
    "type": "function",
    "desc": "Removes a reaction from a message. A chosen reaction can always be removed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Type of the reaction to remove.",
        "name": "reaction_type",
        "type": "ReactionType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_message_reaction.html"
  },
  "removeNotification": {
    "type": "function",
    "desc": "Removes an active notification from notification list. Needs to be called only if the notification is removed by the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of notification group to which the notification belongs.",
        "name": "notification_group_id",
        "type": "number"
      },
      {
        "desc": "Identifier of removed notification.",
        "name": "notification_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_notification.html"
  },
  "removeNotificationGroup": {
    "type": "function",
    "desc": "Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Notification group identifier.",
        "name": "notification_group_id",
        "type": "number"
      },
      {
        "desc": "The maximum identifier of removed notifications.",
        "name": "max_notification_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_notification_group.html"
  },
  "removeProxy": {
    "type": "function",
    "desc": "Removes a proxy server. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Proxy identifier.",
        "name": "proxy_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_proxy.html"
  },
  "removeRecentHashtag": {
    "type": "function",
    "desc": "Removes a hashtag from the list of recently used hashtags.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Hashtag to delete.",
        "name": "hashtag",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recent_hashtag.html"
  },
  "removeRecentSticker": {
    "type": "function",
    "desc": "Removes a sticker from the list of recently used stickers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers.",
        "name": "is_attached",
        "type": "bool"
      },
      {
        "desc": "Sticker file to delete.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recent_sticker.html"
  },
  "removeRecentlyFoundChat": {
    "type": "function",
    "desc": "Removes a chat from the list of recently found chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to be removed.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_recently_found_chat.html"
  },
  "removeSavedAnimation": {
    "type": "function",
    "desc": "Removes an animation from the list of saved animations.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Animation file to be removed.",
        "name": "animation",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_saved_animation.html"
  },
  "removeSavedNotificationSound": {
    "type": "function",
    "desc": "Removes a notification sound from the list of saved notification sounds.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the notification sound.",
        "name": "notification_sound_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_saved_notification_sound.html"
  },
  "removeStickerFromSet": {
    "type": "function",
    "desc": "Removes a sticker from the set to which it belongs; for bots only. The sticker set must have been created by the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_sticker_from_set.html"
  },
  "removeTopChat": {
    "type": "function",
    "desc": "Removes a chat from the list of frequently used chats. Supported only if the chat info database is enabled.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Category of frequently used chats.",
        "name": "category",
        "type": "TopChatCategory"
      },
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remove_top_chat.html"
  },
  "reorderActiveUsernames": {
    "type": "function",
    "desc": "Changes order of active usernames of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new order of active usernames. All currently active usernames must be specified.",
        "name": "usernames",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_active_usernames.html"
  },
  "reorderBotActiveUsernames": {
    "type": "function",
    "desc": "Changes order of active usernames of a bot. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The new order of active usernames. All currently active usernames must be specified.",
        "name": "usernames",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_bot_active_usernames.html"
  },
  "reorderChatFolders": {
    "type": "function",
    "desc": "Changes the order of chat folders.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifiers of chat folders in the new correct order.",
        "name": "chat_folder_ids",
        "type": "number"
      },
      {
        "desc": "Position of the main chat list among chat folders, 0-based. Can be non-zero only for Premium users.",
        "name": "main_chat_list_position",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_chat_folders.html"
  },
  "reorderInstalledStickerSets": {
    "type": "function",
    "desc": "Changes the order of installed sticker sets.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to reorder.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Identifiers of installed sticker sets in the new correct order.",
        "name": "sticker_set_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_installed_sticker_sets.html"
  },
  "reorderSupergroupActiveUsernames": {
    "type": "function",
    "desc": "Changes order of active usernames of a supergroup or channel, requires owner privileges in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "The new order of active usernames. All currently active usernames must be specified.",
        "name": "usernames",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reorder_supergroup_active_usernames.html"
  },
  "replacePrimaryChatInviteLink": {
    "type": "function",
    "desc": "Replaces current primary invite link for a chat with a new primary invite link. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right.\nReturns object_ptr<ChatInviteLink>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1replace_primary_chat_invite_link.html"
  },
  "replaceVideoChatRtmpUrl": {
    "type": "function",
    "desc": "Replaces the current RTMP URL for streaming to the chat; requires creator privileges.\nReturns object_ptr<RtmpUrl>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1replace_video_chat_rtmp_url.html"
  },
  "reportChat": {
    "type": "function",
    "desc": "Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of reported messages; may be empty to report the whole chat.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "The reason for reporting the chat.",
        "name": "reason",
        "type": "ReportReason"
      },
      {
        "desc": "Additional report details; 0-1024 characters.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_chat.html"
  },
  "reportChatPhoto": {
    "type": "function",
    "desc": "Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the photo to report. Only full photos from chatPhoto can be reported.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "The reason for reporting the chat photo.",
        "name": "reason",
        "type": "ReportReason"
      },
      {
        "desc": "Additional report details; 0-1024 characters.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_chat_photo.html"
  },
  "reportMessageReactions": {
    "type": "function",
    "desc": "Reports reactions set on a message to the Telegram moderators. Reactions on a message can be reported only if message.can_report_reactions.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender, which added the reaction.",
        "name": "sender_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_message_reactions.html"
  },
  "reportStory": {
    "type": "function",
    "desc": "Reports a story to the Telegram moderators.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story to report.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story to report.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "The reason for reporting the story.",
        "name": "reason",
        "type": "ReportReason"
      },
      {
        "desc": "Additional report details; 0-1024 characters.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_story.html"
  },
  "reportSupergroupAntiSpamFalsePositive": {
    "type": "function",
    "desc": "Reports a false deletion of a message by aggressive anti-spam checks; requires administrator rights in the supergroup. Can be called only for messages from chatEventMessageDeleted with can_report_anti_spam_false_positive == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Supergroup identifier.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the erroneously deleted message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_supergroup_anti_spam_false_positive.html"
  },
  "reportSupergroupSpam": {
    "type": "function",
    "desc": "Reports messages in a supergroup as spam; requires administrator rights in the supergroup.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Supergroup identifier.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of messages to report.",
        "name": "message_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_supergroup_spam.html"
  },
  "requestAuthenticationPasswordRecovery": {
    "type": "function",
    "desc": "Requests to send a 2-step verification password recovery code to an email address that was previously set up. Works only when the current authorization state is authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1request_authentication_password_recovery.html"
  },
  "requestPasswordRecovery": {
    "type": "function",
    "desc": "Requests to send a 2-step verification password recovery code to an email address that was previously set up.\nReturns object_ptr<EmailAddressAuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1request_password_recovery.html"
  },
  "requestQrCodeAuthentication": {
    "type": "function",
    "desc": "Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "List of user identifiers of other users currently using the application.",
        "name": "other_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1request_qr_code_authentication.html"
  },
  "resendAuthenticationCode": {
    "type": "function",
    "desc": "Resends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitCode, the next_code_type of the result is not null and the server-specified timeout has passed, or when the current authorization state is authorizationStateWaitEmailCode.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_authentication_code.html"
  },
  "resendChangePhoneNumberCode": {
    "type": "function",
    "desc": "Resends the authentication code sent to confirm a new phone number for the current user. Works only if the previously received authenticationCodeInfo next_code_type was not null and the server-specified timeout has passed.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_change_phone_number_code.html"
  },
  "resendEmailAddressVerificationCode": {
    "type": "function",
    "desc": "Resends the code to verify an email address to be added to a user's Telegram Passport.\nReturns object_ptr<EmailAddressAuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_email_address_verification_code.html"
  },
  "resendLoginEmailAddressCode": {
    "type": "function",
    "desc": "Resends the login email address verification code.\nReturns object_ptr<EmailAddressAuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_login_email_address_code.html"
  },
  "resendMessages": {
    "type": "function",
    "desc": "Resends messages which failed to send. Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in messageSendingStateFailed.retry_after time passed. If a message is re-sent, the corresponding failed to send message is deleted. Returns the sent messages in the same order as the message identifiers passed in message_ids. If a message can't be re-sent, null will be returned instead of the message.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Identifier of the chat to send messages.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "New manually chosen quote from the message to be replied; pass null if none. Ignored if more than one message is re-sent, or if messageSendingStateFailed.need_another_reply_quote == false.",
        "name": "quote",
        "type": "inputTextQuote"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_messages.html"
  },
  "resendPhoneNumberConfirmationCode": {
    "type": "function",
    "desc": "Resends phone number confirmation code.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_phone_number_confirmation_code.html"
  },
  "resendPhoneNumberVerificationCode": {
    "type": "function",
    "desc": "Resends the code to verify a phone number to be added to a user's Telegram Passport.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_phone_number_verification_code.html"
  },
  "resendRecoveryEmailAddressCode": {
    "type": "function",
    "desc": "Resends the 2-step verification recovery email address verification code.\nReturns object_ptr<PasswordState>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1resend_recovery_email_address_code.html"
  },
  "resetAllNotificationSettings": {
    "type": "function",
    "desc": "Resets all notification settings to their default values. By default, all chats are unmuted and message previews are shown.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_all_notification_settings.html"
  },
  "resetAuthenticationEmailAddress": {
    "type": "function",
    "desc": "Resets the login email address. May return an error with a message \"TASK_ALREADY_EXISTS\" if reset is still pending. Works only when the current authorization state is authorizationStateWaitEmailCode and authorization_state.can_reset_email_address == true.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_authentication_email_address.html"
  },
  "resetBackgrounds": {
    "type": "function",
    "desc": "Resets list of installed backgrounds to its default value.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_backgrounds.html"
  },
  "resetNetworkStatistics": {
    "type": "function",
    "desc": "Resets all network data usage statistics to zero. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_network_statistics.html"
  },
  "resetPassword": {
    "type": "function",
    "desc": "Removes 2-step verification password without previous password and access to recovery email address. The password can't be reset immediately and the request needs to be repeated after the specified time.\nReturns object_ptr<ResetPasswordResult>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_password.html"
  },
  "revokeChatInviteLink": {
    "type": "function",
    "desc": "Revokes invite link for a chat. Available for basic groups, supergroups, and channels. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links. If a primary link is revoked, then additionally to the revoked link returns new primary link.\nReturns object_ptr<ChatInviteLinks>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Invite link to be revoked.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1revoke_chat_invite_link.html"
  },
  "revokeGroupCallInviteLink": {
    "type": "function",
    "desc": "Revokes invite link for a group call. Requires groupCall.can_be_managed group call flag.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1revoke_group_call_invite_link.html"
  },
  "saveApplicationLogEvent": {
    "type": "function",
    "desc": "Saves application log event on the server. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Event type.",
        "name": "type",
        "type": "string"
      },
      {
        "desc": "Optional chat identifier, associated with the event.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The log event data.",
        "name": "data",
        "type": "JsonValue"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1save_application_log_event.html"
  },
  "searchBackground": {
    "type": "function",
    "desc": "Searches for a background by its name.\nReturns object_ptr<Background>.",
    "fields": [
      {
        "desc": "The name of the background.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_background.html"
  },
  "searchCallMessages": {
    "type": "function",
    "desc": "Searches for call messages. Returns the results in reverse chronological order (i.e., in order of decreasing message_id). For optimal performance, the number of returned messages is chosen by TDLib.\nReturns object_ptr<FoundMessages>.",
    "fields": [
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Pass true to search only for messages with missed/declined calls.",
        "name": "only_missed",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_call_messages.html"
  },
  "searchChatMembers": {
    "type": "function",
    "desc": "Searches for a specified query in the first name, last name and usernames of the members of a specified chat. Requires administrator rights in channels.\nReturns object_ptr<ChatMembers>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of users to be returned; up to 200.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "The type of users to search for; pass null to search among all chat members.",
        "name": "filter",
        "type": "ChatMembersFilter"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_members.html"
  },
  "searchChatMessages": {
    "type": "function",
    "desc": "Searches for messages with given words in the chat. Returns the results in reverse chronological order, i.e. in order of decreasing message_id. Cannot be used in secret chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled message database. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit. A combination of query, sender_id, filter and message_thread_id search criteria is expected to be supported, only if it is required for Telegram official application implementation.\nReturns object_ptr<FoundChatMessages>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to search messages.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender of messages to search for; pass null to search for messages from any sender. Not supported in secret chats.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.",
        "name": "from_message_id",
        "type": "string"
      },
      {
        "desc": "Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Additional filter for messages to search; pass null to search for all messages.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "If not 0, only messages in the specified thread will be returned; supergroups only.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_messages.html"
  },
  "searchChatRecentLocationMessages": {
    "type": "function",
    "desc": "Returns information about the recent locations of chat members that were sent to the chat. Returns up to 1 location message per user.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chat_recent_location_messages.html"
  },
  "searchChats": {
    "type": "function",
    "desc": "Searches for the specified query in the title and username of already known chats; this is an offline request. Returns chats in the order seen in the main chat list.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Query to search for. If the query is empty, returns up to 50 recently found chats.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of chats to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chats.html"
  },
  "searchChatsNearby": {
    "type": "function",
    "desc": "Returns a list of users and location-based supergroups nearby. The list of users nearby will be updated for 60 seconds after the request by the updates updateUsersNearby. The request must be sent again every 25 seconds with adjusted location to not miss new chats.\nReturns object_ptr<ChatsNearby>.",
    "fields": [
      {
        "desc": "Current user location.",
        "name": "location",
        "type": "location"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chats_nearby.html"
  },
  "searchChatsOnServer": {
    "type": "function",
    "desc": "Searches for the specified query in the title and username of already known chats via request to the server. Returns chats in the order seen in the main chat list.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of chats to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_chats_on_server.html"
  },
  "searchContacts": {
    "type": "function",
    "desc": "Searches for the specified query in the first names, last names and usernames of the known user contacts.\nReturns object_ptr<Users>.",
    "fields": [
      {
        "desc": "Query to search for; may be empty to return all contacts.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of users to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_contacts.html"
  },
  "searchEmojis": {
    "type": "function",
    "desc": "Searches for emojis by keywords. Supported only if the file database is enabled.\nReturns object_ptr<Emojis>.",
    "fields": [
      {
        "desc": "Text to search for.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Pass true if only emojis, which exactly match the text, needs to be returned.",
        "name": "exact_match",
        "type": "bool"
      },
      {
        "desc": "List of possible IETF language tags of the user's input language; may be empty if unknown.",
        "name": "input_language_codes",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_emojis.html"
  },
  "searchFileDownloads": {
    "type": "function",
    "desc": "Searches for files in the file download list or recently downloaded files from the list.\nReturns object_ptr<FoundFileDownloads>.",
    "fields": [
      {
        "desc": "Query to search for; may be empty to return all downloaded files.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Pass true to search only for active downloads, including paused.",
        "name": "only_active",
        "type": "bool"
      },
      {
        "desc": "Pass true to search only for completed downloads.",
        "name": "only_completed",
        "type": "bool"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of files to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_file_downloads.html"
  },
  "searchHashtags": {
    "type": "function",
    "desc": "Searches for recently used hashtags by their prefix.\nReturns object_ptr<Hashtags>.",
    "fields": [
      {
        "desc": "Hashtag prefix to search for.",
        "name": "prefix",
        "type": "string"
      },
      {
        "desc": "The maximum number of hashtags to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_hashtags.html"
  },
  "searchInstalledStickerSets": {
    "type": "function",
    "desc": "Searches for installed sticker sets by looking for specified query in their title and name.\nReturns object_ptr<StickerSets>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to search for.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of sticker sets to return.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_installed_sticker_sets.html"
  },
  "searchMessages": {
    "type": "function",
    "desc": "Searches for messages in all chats except secret chats. Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)). For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.\nReturns object_ptr<FoundMessages>.",
    "fields": [
      {
        "desc": "Chat list in which to search messages; pass null to search in all chats regardless of their chat list. Only Main and Archive chat lists are supported.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Additional filter for messages to search; pass null to search for all messages. Filters searchMessagesFilterMention, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, searchMessagesFilterFailedToSend, and searchMessagesFilterPinned are unsupported in this function.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      },
      {
        "desc": "If not 0, the minimum date of the messages to return.",
        "name": "min_date",
        "type": "number"
      },
      {
        "desc": "If not 0, the maximum date of the messages to return.",
        "name": "max_date",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages.html"
  },
  "searchOutgoingDocumentMessages": {
    "type": "function",
    "desc": "Searches for outgoing messages with content of the type messageDocument in all chats except secret chats. Returns the results in reverse chronological order.\nReturns object_ptr<FoundMessages>.",
    "fields": [
      {
        "desc": "Query to search for in document file name and message caption.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned; up to 100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_outgoing_document_messages.html"
  },
  "searchPublicChat": {
    "type": "function",
    "desc": "Searches a public chat by its username. Currently, only private chats, supergroups and channels can be public. Returns the chat if found; otherwise, an error is returned.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Username to be resolved.",
        "name": "username",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_public_chat.html"
  },
  "searchPublicChats": {
    "type": "function",
    "desc": "Searches public chats by looking for specified query in their username and title. Currently, only private chats, supergroups and channels can be public. Returns a meaningful number of results. Excludes private chats with contacts and chats from the chat list from the results.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_public_chats.html"
  },
  "searchQuote": {
    "type": "function",
    "desc": "Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously.\nReturns object_ptr<FoundPosition>.",
    "fields": [
      {
        "desc": "Text in which to search for the quote.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Quote to search for.",
        "name": "quote",
        "type": "formattedText"
      },
      {
        "desc": "Approximate quote position in UTF-16 code units.",
        "name": "quote_position",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_quote.html"
  },
  "searchRecentlyFoundChats": {
    "type": "function",
    "desc": "Searches for the specified query in the title and username of up to 50 recently found chats; this is an offline request.\nReturns object_ptr<Chats>.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of chats to be returned.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_recently_found_chats.html"
  },
  "searchSecretMessages": {
    "type": "function",
    "desc": "Searches for messages in secret chats. Returns the results in reverse chronological order. For optimal performance, the number of returned messages is chosen by TDLib.\nReturns object_ptr<FoundMessages>.",
    "fields": [
      {
        "desc": "Identifier of the chat in which to search. Specify 0 to search in all secret chats.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Query to search for. If empty, searchChatMessages must be used instead.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Additional filter for messages to search; pass null to search for all messages.",
        "name": "filter",
        "type": "SearchMessagesFilter"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_secret_messages.html"
  },
  "searchStickerSet": {
    "type": "function",
    "desc": "Searches for a sticker set by its name.\nReturns object_ptr<StickerSet>.",
    "fields": [
      {
        "desc": "Name of the sticker set.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_sticker_set.html"
  },
  "searchStickerSets": {
    "type": "function",
    "desc": "Searches for sticker sets by looking for specified query in their title and name. Excludes installed sticker sets from the results.\nReturns object_ptr<StickerSets>.",
    "fields": [
      {
        "desc": "Type of the sticker sets to return.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_sticker_sets.html"
  },
  "searchStickers": {
    "type": "function",
    "desc": "Searches for stickers from public sticker sets that correspond to any of the given emoji.\nReturns object_ptr<Stickers>.",
    "fields": [
      {
        "desc": "Type of the stickers to return.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "Space-separated list of emoji to search for; must be non-empty.",
        "name": "emojis",
        "type": "string"
      },
      {
        "desc": "The maximum number of stickers to be returned; 0-100.",
        "name": "limit",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_stickers.html"
  },
  "searchStringsByPrefix": {
    "type": "function",
    "desc": "Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously.\nReturns object_ptr<FoundPositions>.",
    "fields": [
      {
        "desc": "The strings to search in for the query.",
        "name": "strings",
        "type": "string"
      },
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "The maximum number of objects to return.",
        "name": "limit",
        "type": "number"
      },
      {
        "desc": "Pass true to receive no results for an empty query.",
        "name": "return_none_for_empty_query",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_strings_by_prefix.html"
  },
  "searchUserByPhoneNumber": {
    "type": "function",
    "desc": "Searches a user by their phone number. Returns a 404 error if the user can't be found.\nReturns object_ptr<User>.",
    "fields": [
      {
        "desc": "Phone number to search for.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_user_by_phone_number.html"
  },
  "searchUserByToken": {
    "type": "function",
    "desc": "Searches a user by a token from the user's link.\nReturns object_ptr<User>.",
    "fields": [
      {
        "desc": "Token to search for.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_user_by_token.html"
  },
  "searchWebApp": {
    "type": "function",
    "desc": "Returns information about a Web App by its short name. Returns a 404 error if the Web App is not found.\nReturns object_ptr<FoundWebApp>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Short name of the Web App.",
        "name": "web_app_short_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_web_app.html"
  },
  "sendAuthenticationFirebaseSms": {
    "type": "function",
    "desc": "Sends Firebase Authentication SMS to the phone number of the user. Works only when the current authorization state is authorizationStateWaitCode and the server returned code of the type authenticationCodeTypeFirebaseAndroid or authenticationCodeTypeFirebaseIos.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "SafetyNet Attestation API token for the Android application, or secret from push notification for the iOS application.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_authentication_firebase_sms.html"
  },
  "sendBotStartMessage": {
    "type": "function",
    "desc": "Invites a bot to a chat (if it is not yet a member) and sends it the /start command. Bots can't be invited to a private chat other than the chat with the bot. Bots can't be invited to channels (although they can be added as admins) and secret chats. Returns the sent message.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Identifier of the bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the target chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking).",
        "name": "parameter",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_bot_start_message.html"
  },
  "sendCallDebugInformation": {
    "type": "function",
    "desc": "Sends debug information for a call to Telegram servers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "Debug information in application-specific format.",
        "name": "debug_information",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_debug_information.html"
  },
  "sendCallLog": {
    "type": "function",
    "desc": "Sends log file for a call to Telegram servers.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "Call log file. Only inputFileLocal and inputFileGenerated are supported.",
        "name": "log_file",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_log.html"
  },
  "sendCallRating": {
    "type": "function",
    "desc": "Sends a call rating.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "Call rating; 1-5.",
        "name": "rating",
        "type": "number"
      },
      {
        "desc": "An optional user comment if the rating is less than 5.",
        "name": "comment",
        "type": "string"
      },
      {
        "desc": "List of the exact types of problems with the call, specified by the user.",
        "name": "problems",
        "type": "CallProblem"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_rating.html"
  },
  "sendCallSignalingData": {
    "type": "function",
    "desc": "Sends call signaling data.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "The data.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_call_signaling_data.html"
  },
  "sendChatAction": {
    "type": "function",
    "desc": "Sends a notification about user activity in a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the action was performed.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "The action description; pass null to cancel the currently active action.",
        "name": "action",
        "type": "ChatAction"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_chat_action.html"
  },
  "sendCustomRequest": {
    "type": "function",
    "desc": "Sends a custom request; for bots only.\nReturns object_ptr<CustomRequestResult>.",
    "fields": [
      {
        "desc": "The method name.",
        "name": "method",
        "type": "string"
      },
      {
        "desc": "JSON-serialized method parameters.",
        "name": "parameters",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_custom_request.html"
  },
  "sendEmailAddressVerificationCode": {
    "type": "function",
    "desc": "Sends a code to verify an email address to be added to a user's Telegram Passport.\nReturns object_ptr<EmailAddressAuthenticationCodeInfo>.",
    "fields": [
      {
        "desc": "Email address.",
        "name": "email_address",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_email_address_verification_code.html"
  },
  "sendInlineQueryResultMessage": {
    "type": "function",
    "desc": "Sends the result of an inline query as a message. Returns the sent message. Always clears a chat draft message.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Target chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the message will be sent.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Information about the message or story to be replied; pass null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      },
      {
        "desc": "Options to be used to send the message; pass null to use default options.",
        "name": "options",
        "type": "messageSendOptions"
      },
      {
        "desc": "Identifier of the inline query.",
        "name": "query_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the inline query result.",
        "name": "result_id",
        "type": "string"
      },
      {
        "desc": "Pass true to hide the bot, via which the message is sent. Can be used only for bots getOption(\"animation_search_bot_username\"), getOption(\"photo_search_bot_username\"), and getOption(\"venue_search_bot_username\").",
        "name": "hide_via_bot",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_inline_query_result_message.html"
  },
  "sendMessage": {
    "type": "function",
    "desc": "Sends a message. Returns the sent message.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "Target chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the message will be sent.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Information about the message or story to be replied; pass null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      },
      {
        "desc": "Options to be used to send the message; pass null to use default options.",
        "name": "options",
        "type": "messageSendOptions"
      },
      {
        "desc": "Markup for replying to the message; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_message.html"
  },
  "sendMessageAlbum": {
    "type": "function",
    "desc": "Sends 2-10 messages grouped together into an album. Currently, only audio, document, photo and video messages can be grouped into an album. Documents and audio files can be only grouped in an album with messages of the same type. Returns sent messages.\nReturns object_ptr<Messages>.",
    "fields": [
      {
        "desc": "Target chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the messages will be sent.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Information about the message or story to be replied; pass null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      },
      {
        "desc": "Options to be used to send the messages; pass null to use default options.",
        "name": "options",
        "type": "messageSendOptions"
      },
      {
        "desc": "Contents of messages to be sent. At most 10 messages can be added to an album.",
        "name": "input_message_contents",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_message_album.html"
  },
  "sendPassportAuthorizationForm": {
    "type": "function",
    "desc": "Sends a Telegram Passport authorization form, effectively sharing data with the service. This method must be called after getPassportAuthorizationFormAvailableElements if some previously available elements are going to be reused.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Authorization form identifier.",
        "name": "authorization_form_id",
        "type": "number"
      },
      {
        "desc": "Types of Telegram Passport elements chosen by user to complete the authorization form.",
        "name": "types",
        "type": "PassportElementType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_passport_authorization_form.html"
  },
  "sendPaymentForm": {
    "type": "function",
    "desc": "Sends a filled-out payment form to the bot for final verification.\nReturns object_ptr<PaymentResult>.",
    "fields": [
      {
        "desc": "The invoice.",
        "name": "input_invoice",
        "type": "InputInvoice"
      },
      {
        "desc": "Payment form identifier returned by getPaymentForm.",
        "name": "payment_form_id",
        "type": "string"
      },
      {
        "desc": "Identifier returned by validateOrderInfo, or an empty string.",
        "name": "order_info_id",
        "type": "string"
      },
      {
        "desc": "Identifier of a chosen shipping option, if applicable.",
        "name": "shipping_option_id",
        "type": "string"
      },
      {
        "desc": "The credentials chosen by user for payment.",
        "name": "credentials",
        "type": "InputCredentials"
      },
      {
        "desc": "Chosen by the user amount of tip in the smallest units of the currency.",
        "name": "tip_amount",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_payment_form.html"
  },
  "sendPhoneNumberConfirmationCode": {
    "type": "function",
    "desc": "Sends phone number confirmation code to handle links of the type internalLinkTypePhoneNumberConfirmation.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [
      {
        "desc": "Hash value from the link.",
        "name": "hash",
        "type": "string"
      },
      {
        "desc": "Phone number value from the link.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Settings for the authentication of the user's phone number; pass null to use default settings.",
        "name": "settings",
        "type": "phoneNumberAuthenticationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_phone_number_confirmation_code.html"
  },
  "sendPhoneNumberVerificationCode": {
    "type": "function",
    "desc": "Sends a code to verify a phone number to be added to a user's Telegram Passport.\nReturns object_ptr<AuthenticationCodeInfo>.",
    "fields": [
      {
        "desc": "The phone number of the user, in international format.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Settings for the authentication of the user's phone number; pass null to use default settings.",
        "name": "settings",
        "type": "phoneNumberAuthenticationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_phone_number_verification_code.html"
  },
  "sendStory": {
    "type": "function",
    "desc": "Sends a new story to a chat; requires can_post_stories rights for channel chats. Returns a temporary story.\nReturns object_ptr<Story>.",
    "fields": [
      {
        "desc": "Identifier of the chat that will post the story.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Content of the story.",
        "name": "content",
        "type": "InputStoryContent"
      },
      {
        "desc": "Clickable rectangle areas to be shown on the story media; pass null if none.",
        "name": "areas",
        "type": "inputStoryAreas"
      },
      {
        "desc": "Story caption; pass null to use an empty caption; 0-getOption(\"story_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "The privacy settings for the story.",
        "name": "privacy_settings",
        "type": "StoryPrivacySettings"
      },
      {
        "desc": "Period after which the story is moved to archive, in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400 for Telegram Premium users, and 86400 otherwise.",
        "name": "active_period",
        "type": "number"
      },
      {
        "desc": "Full identifier of the original story, which content was used to create the story.",
        "name": "from_story_full_id",
        "type": "storyFullId"
      },
      {
        "desc": "Pass true to keep the story accessible after expiration.",
        "name": "is_pinned",
        "type": "bool"
      },
      {
        "desc": "Pass true if the content of the story must be protected from forwarding and screenshotting.",
        "name": "protect_content",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_story.html"
  },
  "sendWebAppCustomRequest": {
    "type": "function",
    "desc": "Sends a custom request from a Web App.\nReturns object_ptr<CustomRequestResult>.",
    "fields": [
      {
        "desc": "Identifier of the bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The method name.",
        "name": "method",
        "type": "string"
      },
      {
        "desc": "JSON-serialized method parameters.",
        "name": "parameters",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_web_app_custom_request.html"
  },
  "sendWebAppData": {
    "type": "function",
    "desc": "Sends data received from a keyboardButtonTypeWebApp Web App to a bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Text of the keyboardButtonTypeWebApp button, which opened the Web App.",
        "name": "button_text",
        "type": "string"
      },
      {
        "desc": "The data.",
        "name": "data",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1send_web_app_data.html"
  },
  "setAccentColor": {
    "type": "function",
    "desc": "Changes accent color and background custom emoji for the current user; for Telegram Premium users only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the accent color to use.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown on the reply header background; 0 if none.",
        "name": "background_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_accent_color.html"
  },
  "setAccountTtl": {
    "type": "function",
    "desc": "Changes the period of inactivity after which the account of the current user will automatically be deleted.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New account TTL.",
        "name": "ttl",
        "type": "accountTtl"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_account_ttl.html"
  },
  "setAlarm": {
    "type": "function",
    "desc": "Succeeds after a specified amount of time has passed. Can be called before initialization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Number of seconds before the function returns.",
        "name": "seconds",
        "type": "double"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_alarm.html"
  },
  "setArchiveChatListSettings": {
    "type": "function",
    "desc": "Changes settings for automatic moving of chats to and from the Archive chat lists.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New settings.",
        "name": "settings",
        "type": "archiveChatListSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_archive_chat_list_settings.html"
  },
  "setAuthenticationEmailAddress": {
    "type": "function",
    "desc": "Sets the email address of the user and sends an authentication code to the email address. Works only when the current authorization state is authorizationStateWaitEmailAddress.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The email address of the user.",
        "name": "email_address",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_authentication_email_address.html"
  },
  "setAuthenticationPhoneNumber": {
    "type": "function",
    "desc": "Sets the phone number of the user and sends an authentication code to the user. Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The phone number of the user, in international format.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Settings for the authentication of the user's phone number; pass null to use default settings.",
        "name": "settings",
        "type": "phoneNumberAuthenticationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_authentication_phone_number.html"
  },
  "setAutoDownloadSettings": {
    "type": "function",
    "desc": "Sets auto-download settings.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New user auto-download settings.",
        "name": "settings",
        "type": "autoDownloadSettings"
      },
      {
        "desc": "Type of the network for which the new settings are relevant.",
        "name": "type",
        "type": "NetworkType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_auto_download_settings.html"
  },
  "setAutosaveSettings": {
    "type": "function",
    "desc": "Sets autosave settings for the given scope. The method is guaranteed to work only after at least one call to getAutosaveSettings.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Autosave settings scope.",
        "name": "scope",
        "type": "AutosaveSettingsScope"
      },
      {
        "desc": "New autosave settings for the scope; pass null to set autosave settings to default.",
        "name": "settings",
        "type": "scopeAutosaveSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_autosave_settings.html"
  },
  "setBackground": {
    "type": "function",
    "desc": "Changes the background selected by the user; adds background to the list of installed backgrounds.\nReturns object_ptr<Background>.",
    "fields": [
      {
        "desc": "The input background to use; pass null to create a new filled background or to remove the current background.",
        "name": "background",
        "type": "InputBackground"
      },
      {
        "desc": "Background type; pass null to use the default type of the remote background or to remove the current background.",
        "name": "type",
        "type": "BackgroundType"
      },
      {
        "desc": "Pass true if the background is changed for a dark theme.",
        "name": "for_dark_theme",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_background.html"
  },
  "setBio": {
    "type": "function",
    "desc": "Changes the bio of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new value of the user bio; 0-getOption(\"bio_length_max\") characters without line feeds.",
        "name": "bio",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bio.html"
  },
  "setBotInfoDescription": {
    "type": "function",
    "desc": "Sets the text shown in the chat with a bot if the chat is empty. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code. If empty, the description will be shown to all users for whose languages there is no dedicated description.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "New bot's description on the specified language.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_info_description.html"
  },
  "setBotInfoShortDescription": {
    "type": "function",
    "desc": "Sets the text shown on a bot's profile page and sent together with the link when users share the bot. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code. If empty, the short description will be shown to all users for whose languages there is no dedicated description.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "New bot's short description on the specified language.",
        "name": "short_description",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_info_short_description.html"
  },
  "setBotName": {
    "type": "function",
    "desc": "Sets the name of a bot. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose languages there is no dedicated name.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "New bot's name on the specified language; 0-64 characters; must be non-empty if language code is empty.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_name.html"
  },
  "setBotProfilePhoto": {
    "type": "function",
    "desc": "Changes a profile photo for a bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Profile photo to set; pass null to delete the chat photo.",
        "name": "photo",
        "type": "InputChatPhoto"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_profile_photo.html"
  },
  "setBotUpdatesStatus": {
    "type": "function",
    "desc": "Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The number of pending updates.",
        "name": "pending_update_count",
        "type": "number"
      },
      {
        "desc": "The last error message.",
        "name": "error_message",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_bot_updates_status.html"
  },
  "setChatAccentColor": {
    "type": "function",
    "desc": "Changes accent color and background custom emoji of a chat. Supported only for channels with getOption(\"channel_custom_accent_color_boost_level_min\") boost level. Requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the accent color to use.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown on the reply header background; 0 if none.",
        "name": "background_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_accent_color.html"
  },
  "setChatActiveStoriesList": {
    "type": "function",
    "desc": "Changes story list in which stories from the chat are shown.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted stories.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New list for active stories posted by the chat.",
        "name": "story_list",
        "type": "StoryList"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_active_stories_list.html"
  },
  "setChatAvailableReactions": {
    "type": "function",
    "desc": "Changes reactions, available in a chat. Available for basic groups, supergroups, and channels. Requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Reactions available in the chat. All explicitly specified emoji reactions must be active. Up to the chat's boost level custom emoji reactions can be explicitly specified.",
        "name": "available_reactions",
        "type": "ChatAvailableReactions"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_available_reactions.html"
  },
  "setChatBackground": {
    "type": "function",
    "desc": "Sets the background in a specific chat. Supported only in private and secret chats with non-deleted users.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The input background to use; pass null to create a new filled background.",
        "name": "background",
        "type": "InputBackground"
      },
      {
        "desc": "Background type; pass null to use default background type for the chosen background.",
        "name": "type",
        "type": "BackgroundType"
      },
      {
        "desc": "Dimming of the background in dark themes, as a percentage; 0-100.",
        "name": "dark_theme_dimming",
        "type": "number"
      },
      {
        "desc": "Pass true to set background only for self; pass false to set background for both chat users. Background can be set for both users only by Telegram Premium users and if set background isn't of the type inputBackgroundPrevious.",
        "name": "only_for_self",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_background.html"
  },
  "setChatClientData": {
    "type": "function",
    "desc": "Changes application-specific data associated with a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of client_data.",
        "name": "client_data",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_client_data.html"
  },
  "setChatDescription": {
    "type": "function",
    "desc": "Changes information about a chat. Available for basic groups, supergroups, and channels. Requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New chat description; 0-255 characters.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_description.html"
  },
  "setChatDiscussionGroup": {
    "type": "function",
    "desc": "Changes the discussion group of a channel chat; requires can_change_info administrator right in the channel if it is specified.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed in the second argument to a linked channel chat (requires can_pin_messages rights in the supergroup).",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of a new channel's discussion group. Use 0 to remove the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group chats must be first upgraded to supergroup chats. If new chat members don't have access to old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change that.",
        "name": "discussion_chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_discussion_group.html"
  },
  "setChatDraftMessage": {
    "type": "function",
    "desc": "Changes the draft message in a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the draft was changed.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "New draft message; pass null to remove the draft.",
        "name": "draft_message",
        "type": "draftMessage"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_draft_message.html"
  },
  "setChatLocation": {
    "type": "function",
    "desc": "Changes the location of a chat. Available only for some location-based supergroups, use supergroupFullInfo.can_set_location to check whether the method is allowed to use.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New location for the chat; must be valid and not null.",
        "name": "location",
        "type": "chatLocation"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_location.html"
  },
  "setChatMemberStatus": {
    "type": "function",
    "desc": "Changes the status of a chat member, needs appropriate privileges. This function is currently not suitable for transferring chat ownership; use transferChatOwnership instead. Use addChatMember or banChatMember if some additional parameters needs to be passed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Member identifier. Chats can be only banned and unbanned in supergroups and channels.",
        "name": "member_id",
        "type": "MessageSender"
      },
      {
        "desc": "The new status of the member in the chat.",
        "name": "status",
        "type": "ChatMemberStatus"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_member_status.html"
  },
  "setChatMessageAutoDeleteTime": {
    "type": "function",
    "desc": "Changes the message auto-delete or self-destruct (for secret chats) time in a chat. Requires change_info administrator right in basic groups, supergroups and channels Message auto-delete time can't be changed in a chat with the current user (Saved Messages) and the chat 777000 (Telegram).\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New time value, in seconds; unless the chat is secret, it must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.",
        "name": "message_auto_delete_time",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_message_auto_delete_time.html"
  },
  "setChatMessageSender": {
    "type": "function",
    "desc": "Selects a message sender to send messages in a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New message sender for the chat.",
        "name": "message_sender_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_message_sender.html"
  },
  "setChatNotificationSettings": {
    "type": "function",
    "desc": "Changes the notification settings of a chat. Notification settings of a chat with the current user (Saved Messages) can't be changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New notification settings for the chat. If the chat is muted for more than 366 days, it is considered to be muted forever.",
        "name": "notification_settings",
        "type": "chatNotificationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_notification_settings.html"
  },
  "setChatPermissions": {
    "type": "function",
    "desc": "Changes the chat members permissions. Supported only for basic groups and supergroups. Requires can_restrict_members administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New non-administrator members permissions in the chat.",
        "name": "permissions",
        "type": "chatPermissions"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_permissions.html"
  },
  "setChatPhoto": {
    "type": "function",
    "desc": "Changes the photo of a chat. Supported only for basic groups, supergroups and channels. Requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New chat photo; pass null to delete the chat photo.",
        "name": "photo",
        "type": "InputChatPhoto"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_photo.html"
  },
  "setChatSlowModeDelay": {
    "type": "function",
    "desc": "Changes the slow mode delay of a chat. Available only for supergroups; requires can_restrict_members rights.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60, 300, 900, 3600.",
        "name": "slow_mode_delay",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_slow_mode_delay.html"
  },
  "setChatTheme": {
    "type": "function",
    "desc": "Changes the chat theme. Supported only in private and secret chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Name of the new chat theme; pass an empty string to return the default theme.",
        "name": "theme_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_theme.html"
  },
  "setChatTitle": {
    "type": "function",
    "desc": "Changes the chat title. Supported only for basic groups, supergroups and channels. Requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New title of the chat; 1-128 characters.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_chat_title.html"
  },
  "setCloseFriends": {
    "type": "function",
    "desc": "Changes the list of close friends of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "User identifiers of close friends; the users must be contacts of the current user.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_close_friends.html"
  },
  "setCommands": {
    "type": "function",
    "desc": "Sets the list of commands supported by the bot for the given user scope and language; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The scope to which the commands are relevant; pass null to change commands in the default bot command scope.",
        "name": "scope",
        "type": "BotCommandScope"
      },
      {
        "desc": "A two-letter ISO 639-1 language code. If empty, the commands will be applied to all users from the given scope, for which language there are no dedicated commands.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "List of the bot's commands.",
        "name": "commands",
        "type": "botCommand"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_commands.html"
  },
  "setCustomEmojiStickerSetThumbnail": {
    "type": "function",
    "desc": "Sets a custom emoji sticker set thumbnail; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker set name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Identifier of the custom emoji from the sticker set, which will be set as sticker set thumbnail; pass 0 to remove the sticker set thumbnail.",
        "name": "custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_custom_emoji_sticker_set_thumbnail.html"
  },
  "setCustomLanguagePack": {
    "type": "function",
    "desc": "Adds or changes a custom local language pack to the current localization target.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Information about the language pack. Language pack identifier must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization.",
        "name": "info",
        "type": "languagePackInfo"
      },
      {
        "desc": "Strings of the new language pack.",
        "name": "strings",
        "type": "languagePackString"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_custom_language_pack.html"
  },
  "setCustomLanguagePackString": {
    "type": "function",
    "desc": "Adds, edits or deletes a string in a custom local language pack. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a previously added custom local language pack in the current localization target.",
        "name": "language_pack_id",
        "type": "string"
      },
      {
        "desc": "New language pack string.",
        "name": "new_string",
        "type": "languagePackString"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_custom_language_pack_string.html"
  },
  "setDatabaseEncryptionKey": {
    "type": "function",
    "desc": "Changes the database encryption key. Usually the encryption key is never changed and is stored in some OS keychain.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New encryption key.",
        "name": "new_encryption_key",
        "type": "bytes"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_database_encryption_key.html"
  },
  "setDefaultChannelAdministratorRights": {
    "type": "function",
    "desc": "Sets default administrator rights for adding the bot to channel chats; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Default administrator rights for adding the bot to channels; pass null to remove default rights.",
        "name": "default_channel_administrator_rights",
        "type": "chatAdministratorRights"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_default_channel_administrator_rights.html"
  },
  "setDefaultGroupAdministratorRights": {
    "type": "function",
    "desc": "Sets default administrator rights for adding the bot to basic group and supergroup chats; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Default administrator rights for adding the bot to basic group and supergroup chats; pass null to remove default rights.",
        "name": "default_group_administrator_rights",
        "type": "chatAdministratorRights"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_default_group_administrator_rights.html"
  },
  "setDefaultMessageAutoDeleteTime": {
    "type": "function",
    "desc": "Changes the default message auto-delete time for new chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New default message auto-delete time; must be from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren't deleted automatically.",
        "name": "message_auto_delete_time",
        "type": "messageAutoDeleteTime"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_default_message_auto_delete_time.html"
  },
  "setDefaultReactionType": {
    "type": "function",
    "desc": "Changes type of default reaction for the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New type of the default reaction.",
        "name": "reaction_type",
        "type": "ReactionType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_default_reaction_type.html"
  },
  "setEmojiStatus": {
    "type": "function",
    "desc": "Changes the emoji status of the current user; for Telegram Premium users only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New emoji status; pass null to switch to the default badge.",
        "name": "emoji_status",
        "type": "emojiStatus"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_emoji_status.html"
  },
  "setFileGenerationProgress": {
    "type": "function",
    "desc": "Informs TDLib on a file generation progress.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the generation process.",
        "name": "generation_id",
        "type": "string"
      },
      {
        "desc": "Expected size of the generated file, in bytes; 0 if unknown.",
        "name": "expected_size",
        "type": "string"
      },
      {
        "desc": "The number of bytes already generated.",
        "name": "local_prefix_size",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_file_generation_progress.html"
  },
  "setForumTopicNotificationSettings": {
    "type": "function",
    "desc": "Changes the notification settings of a forum topic.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "New notification settings for the forum topic. If the topic is muted for more than 366 days, it is considered to be muted forever.",
        "name": "notification_settings",
        "type": "chatNotificationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_forum_topic_notification_settings.html"
  },
  "setGameScore": {
    "type": "function",
    "desc": "Updates the game score of the specified user in the game; for bots only.\nReturns object_ptr<Message>.",
    "fields": [
      {
        "desc": "The chat to which the message with the game belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Pass true to edit the game message to include the current scoreboard.",
        "name": "edit_message",
        "type": "bool"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The new score.",
        "name": "score",
        "type": "number"
      },
      {
        "desc": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table.",
        "name": "force",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_game_score.html"
  },
  "setGroupCallParticipantIsSpeaking": {
    "type": "function",
    "desc": "Informs TDLib that speaking state of a participant of an active group has changed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Group call participant's synchronization audio source identifier, or 0 for the current user.",
        "name": "audio_source",
        "type": "number"
      },
      {
        "desc": "Pass true if the user is speaking.",
        "name": "is_speaking",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_group_call_participant_is_speaking.html"
  },
  "setGroupCallParticipantVolumeLevel": {
    "type": "function",
    "desc": "Changes volume level of a participant of an active group call. If the current user can manage the group call, then the participant's volume level will be changed for all users with the default volume level.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Participant identifier.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "New participant's volume level; 1-20000 in hundreds of percents.",
        "name": "volume_level",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_group_call_participant_volume_level.html"
  },
  "setGroupCallTitle": {
    "type": "function",
    "desc": "Sets group call title. Requires groupCall.can_be_managed group call flag.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "New group call title; 1-64 characters.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_group_call_title.html"
  },
  "setInactiveSessionTtl": {
    "type": "function",
    "desc": "Changes the period of inactivity after which sessions will automatically be terminated.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New number of days of inactivity before sessions will be automatically terminated; 1-366 days.",
        "name": "inactive_session_ttl_days",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_inactive_session_ttl.html"
  },
  "setInlineGameScore": {
    "type": "function",
    "desc": "Updates the game score of the specified user in a game; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Inline message identifier.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "Pass true to edit the game message to include the current scoreboard.",
        "name": "edit_message",
        "type": "bool"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The new score.",
        "name": "score",
        "type": "number"
      },
      {
        "desc": "Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table.",
        "name": "force",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_inline_game_score.html"
  },
  "setLocation": {
    "type": "function",
    "desc": "Changes the location of the current user. Needs to be called if getOption(\"is_location_visible\") is true and location changes for more than 1 kilometer.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new location of the user.",
        "name": "location",
        "type": "location"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_location.html"
  },
  "setLogStream": {
    "type": "function",
    "desc": "Sets new log stream for internal logging of TDLib. Can be called synchronously.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New log stream.",
        "name": "log_stream",
        "type": "LogStream"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_log_stream.html"
  },
  "setLogTagVerbosityLevel": {
    "type": "function",
    "desc": "Sets the verbosity level for a specified TDLib internal log tag. Can be called synchronously.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Logging tag to change verbosity level.",
        "name": "tag",
        "type": "string"
      },
      {
        "desc": "New verbosity level; 1-1024.",
        "name": "new_verbosity_level",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_log_tag_verbosity_level.html"
  },
  "setLogVerbosityLevel": {
    "type": "function",
    "desc": "Sets the verbosity level of the internal logging of TDLib. Can be called synchronously.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging.",
        "name": "new_verbosity_level",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_log_verbosity_level.html"
  },
  "setLoginEmailAddress": {
    "type": "function",
    "desc": "Changes the login email address of the user. The email address can be changed only if the current user already has login email and passwordState.login_email_address_pattern is non-empty. The change will not be applied until the new login email address is confirmed with checkLoginEmailAddressCode. To use Apple ID/Google ID instead of a email address, call checkLoginEmailAddressCode directly.\nReturns object_ptr<EmailAddressAuthenticationCodeInfo>.",
    "fields": [
      {
        "desc": "New login email address.",
        "name": "new_login_email_address",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_login_email_address.html"
  },
  "setMenuButton": {
    "type": "function",
    "desc": "Sets menu button for the given user or for all users; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the user or 0 to set menu button for all users.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "New menu button.",
        "name": "menu_button",
        "type": "botMenuButton"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_menu_button.html"
  },
  "setMessageSenderBlockList": {
    "type": "function",
    "desc": "Changes the block list of a message sender. Currently, only users and supergroup chats can be blocked.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of a message sender to block/unblock.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "New block list for the message sender; pass null to unblock the message sender.",
        "name": "block_list",
        "type": "BlockList"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_message_sender_block_list.html"
  },
  "setName": {
    "type": "function",
    "desc": "Changes the first and last name of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new value of the first name for the current user; 1-64 characters.",
        "name": "first_name",
        "type": "string"
      },
      {
        "desc": "The new value of the optional last name for the current user; 0-64 characters.",
        "name": "last_name",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_name.html"
  },
  "setNetworkType": {
    "type": "function",
    "desc": "Sets the current network type. Can be called before authorization. Calling this method forces all network connections to reopen, mitigating the delay in switching between different networks, so it must be called whenever the network is changed, even if the network type remains the same. Network type is used to check whether the library can use the network at all and also for collecting detailed network data usage statistics.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new network type; pass null to set network type to networkTypeOther.",
        "name": "type",
        "type": "NetworkType"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_network_type.html"
  },
  "setOption": {
    "type": "function",
    "desc": "Sets the value of an option. (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The name of the option.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "The new value of the option; pass null to reset option value to a default value.",
        "name": "value",
        "type": "OptionValue"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_option.html"
  },
  "setPassportElement": {
    "type": "function",
    "desc": "Adds an element to the user's Telegram Passport. May return an error with a message \"PHONE_VERIFICATION_NEEDED\" or \"EMAIL_VERIFICATION_NEEDED\" if the chosen phone number or the chosen email address must be verified first.\nReturns object_ptr<PassportElement>.",
    "fields": [
      {
        "desc": "Input Telegram Passport element.",
        "name": "element",
        "type": "InputPassportElement"
      },
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_passport_element.html"
  },
  "setPassportElementErrors": {
    "type": "function",
    "desc": "Informs the user that some of the elements in their Telegram Passport contain errors; for bots only. The user will not be able to resend the elements, until the errors are fixed.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The errors.",
        "name": "errors",
        "type": "inputPassportElementError"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_passport_element_errors.html"
  },
  "setPassword": {
    "type": "function",
    "desc": "Changes the 2-step verification password for the current user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed.\nReturns object_ptr<PasswordState>.",
    "fields": [
      {
        "desc": "Previous 2-step verification password of the user.",
        "name": "old_password",
        "type": "string"
      },
      {
        "desc": "New 2-step verification password of the user; may be empty to remove the password.",
        "name": "new_password",
        "type": "string"
      },
      {
        "desc": "New password hint; may be empty.",
        "name": "new_hint",
        "type": "string"
      },
      {
        "desc": "Pass true to change also the recovery email address.",
        "name": "set_recovery_email_address",
        "type": "bool"
      },
      {
        "desc": "New recovery email address; may be empty.",
        "name": "new_recovery_email_address",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_password.html"
  },
  "setPinnedChats": {
    "type": "function",
    "desc": "Changes the order of pinned chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat list in which to change the order of pinned chats.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "The new list of pinned chats.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_pinned_chats.html"
  },
  "setPinnedForumTopics": {
    "type": "function",
    "desc": "Changes the order of pinned forum topics.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new list of pinned forum topics.",
        "name": "message_thread_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_pinned_forum_topics.html"
  },
  "setPollAnswer": {
    "type": "function",
    "desc": "Changes the user answer to a poll. A poll in quiz mode can be answered only once.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the poll belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message containing the poll.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.",
        "name": "option_ids",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_poll_answer.html"
  },
  "setProfileAccentColor": {
    "type": "function",
    "desc": "Changes accent color and background custom emoji for profile of the current user; for Telegram Premium users only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the accent color to use for profile; pass -1 if none.",
        "name": "profile_accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown in the on the user's profile photo background; 0 if none.",
        "name": "profile_background_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_profile_accent_color.html"
  },
  "setProfilePhoto": {
    "type": "function",
    "desc": "Changes a profile photo for the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Profile photo to set.",
        "name": "photo",
        "type": "InputChatPhoto"
      },
      {
        "desc": "Pass true to set a public photo, which will be visible even the main photo is hidden by privacy settings.",
        "name": "is_public",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_profile_photo.html"
  },
  "setRecoveryEmailAddress": {
    "type": "function",
    "desc": "Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed. If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation.\nReturns object_ptr<PasswordState>.",
    "fields": [
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      },
      {
        "desc": "New recovery email address.",
        "name": "new_recovery_email_address",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_recovery_email_address.html"
  },
  "setScopeNotificationSettings": {
    "type": "function",
    "desc": "Changes notification settings for chats of a given type.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Types of chats for which to change the notification settings.",
        "name": "scope",
        "type": "NotificationSettingsScope"
      },
      {
        "desc": "The new notification settings for the given scope.",
        "name": "notification_settings",
        "type": "scopeNotificationSettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_scope_notification_settings.html"
  },
  "setStickerEmojis": {
    "type": "function",
    "desc": "Changes the list of emoji corresponding to a sticker; for bots only. The sticker must belong to a regular or custom emoji sticker set created by the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "New string with 1-20 emoji corresponding to the sticker.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_emojis.html"
  },
  "setStickerKeywords": {
    "type": "function",
    "desc": "Changes the list of keywords of a sticker; for bots only. The sticker must belong to a regular or custom emoji sticker set created by the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker.",
        "name": "keywords",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_keywords.html"
  },
  "setStickerMaskPosition": {
    "type": "function",
    "desc": "Changes the mask position of a mask sticker; for bots only. The sticker must belong to a mask sticker set created by the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "Position where the mask is placed; pass null to remove mask position.",
        "name": "mask_position",
        "type": "maskPosition"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_mask_position.html"
  },
  "setStickerPositionInSet": {
    "type": "function",
    "desc": "Changes the position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "New position of the sticker in the set, 0-based.",
        "name": "position",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_position_in_set.html"
  },
  "setStickerSetThumbnail": {
    "type": "function",
    "desc": "Sets a sticker set thumbnail; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker set owner.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Sticker set name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Thumbnail to set in PNG, TGS, or WEBM format; pass null to remove the sticker set thumbnail. Thumbnail format must match the format of stickers in the set.",
        "name": "thumbnail",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_set_thumbnail.html"
  },
  "setStickerSetTitle": {
    "type": "function",
    "desc": "Sets a sticker set title; for bots only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Sticker set name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "New sticker set title.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_sticker_set_title.html"
  },
  "setStoryPrivacySettings": {
    "type": "function",
    "desc": "Changes privacy settings of a story. Can be called only if story.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "The new privacy settigs for the story.",
        "name": "privacy_settings",
        "type": "StoryPrivacySettings"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_story_privacy_settings.html"
  },
  "setStoryReaction": {
    "type": "function",
    "desc": "Changes chosen reaction on a story.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Type of the reaction to set; pass null to remove the reaction. reactionTypeCustomEmoji reactions can be used only by Telegram Premium users.",
        "name": "reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "Pass true if the reaction needs to be added to recent reactions.",
        "name": "update_recent_reactions",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_story_reaction.html"
  },
  "setSupergroupStickerSet": {
    "type": "function",
    "desc": "Changes the sticker set of a supergroup; requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set.",
        "name": "sticker_set_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_supergroup_sticker_set.html"
  },
  "setSupergroupUsername": {
    "type": "function",
    "desc": "Changes the editable username of a supergroup or channel, requires owner privileges in the supergroup or channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username.",
        "name": "username",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_supergroup_username.html"
  },
  "setTdlibParameters": {
    "type": "function",
    "desc": "Sets the parameters for TDLib initialization. Works only when the current authorization state is authorizationStateWaitTdlibParameters.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to use Telegram test environment instead of the production environment.",
        "name": "use_test_dc",
        "type": "bool"
      },
      {
        "desc": "The path to the directory for the persistent database; if empty, the current working directory will be used.",
        "name": "database_directory",
        "type": "string"
      },
      {
        "desc": "The path to the directory for storing files; if empty, database_directory will be used.",
        "name": "files_directory",
        "type": "string"
      },
      {
        "desc": "Encryption key for the database. If the encryption key is invalid, then an error with code 401 will be returned.",
        "name": "database_encryption_key",
        "type": "bytes"
      },
      {
        "desc": "Pass true to keep information about downloaded and uploaded files between application restarts.",
        "name": "use_file_database",
        "type": "bool"
      },
      {
        "desc": "Pass true to keep cache of users, basic groups, supergroups, channels and secret chats between restarts. Implies use_file_database.",
        "name": "use_chat_info_database",
        "type": "bool"
      },
      {
        "desc": "Pass true to keep cache of chats and messages between restarts. Implies use_chat_info_database.",
        "name": "use_message_database",
        "type": "bool"
      },
      {
        "desc": "Pass true to enable support for secret chats.",
        "name": "use_secret_chats",
        "type": "bool"
      },
      {
        "desc": "Application identifier for Telegram API access, which can be obtained at https://my.telegram.org.",
        "name": "api_id",
        "type": "number"
      },
      {
        "desc": "Application identifier hash for Telegram API access, which can be obtained at https://my.telegram.org.",
        "name": "api_hash",
        "type": "string"
      },
      {
        "desc": "IETF language tag of the user's operating system language; must be non-empty.",
        "name": "system_language_code",
        "type": "string"
      },
      {
        "desc": "Model of the device the application is being run on; must be non-empty.",
        "name": "device_model",
        "type": "string"
      },
      {
        "desc": "Version of the operating system the application is being run on. If empty, the version is automatically detected by TDLib.",
        "name": "system_version",
        "type": "string"
      },
      {
        "desc": "Application version; must be non-empty.",
        "name": "application_version",
        "type": "string"
      },
      {
        "desc": "Pass true to automatically delete old files in background.",
        "name": "enable_storage_optimizer",
        "type": "bool"
      },
      {
        "desc": "Pass true to ignore original file names for downloaded files. Otherwise, downloaded files are saved under names as close as possible to the original name.",
        "name": "ignore_file_names",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_tdlib_parameters.html"
  },
  "setUserPersonalProfilePhoto": {
    "type": "function",
    "desc": "Changes a personal profile photo of a contact user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Profile photo to set; pass null to delete the photo; inputChatPhotoPrevious isn't supported in this function.",
        "name": "photo",
        "type": "InputChatPhoto"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_user_personal_profile_photo.html"
  },
  "setUserPrivacySettingRules": {
    "type": "function",
    "desc": "Changes user privacy settings.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The privacy setting.",
        "name": "setting",
        "type": "UserPrivacySetting"
      },
      {
        "desc": "The new privacy rules.",
        "name": "rules",
        "type": "userPrivacySettingRules"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_user_privacy_setting_rules.html"
  },
  "setUserSupportInfo": {
    "type": "function",
    "desc": "Sets support information for the given user; for Telegram support only.\nReturns object_ptr<UserSupportInfo>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "New information message.",
        "name": "message",
        "type": "formattedText"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_user_support_info.html"
  },
  "setUsername": {
    "type": "function",
    "desc": "Changes the editable username of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The new value of the username. Use an empty string to remove the username. The username can't be completely removed if there is another active or disabled username.",
        "name": "username",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_username.html"
  },
  "setVideoChatDefaultParticipant": {
    "type": "function",
    "desc": "Changes default participant identifier, on whose behalf a video chat in the chat will be joined.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Default group call participant identifier to join the video chats.",
        "name": "default_participant_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1set_video_chat_default_participant.html"
  },
  "shareChatWithBot": {
    "type": "function",
    "desc": "Shares a chat after pressing a keyboardButtonTypeRequestChat button with the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat with the bot.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message with the button.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the button.",
        "name": "button_id",
        "type": "number"
      },
      {
        "desc": "Identifier of the shared chat.",
        "name": "shared_chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to check that the chat can be shared by the button instead of actually sharing it. Doesn't check bot_is_member and bot_administrator_rights restrictions. If the bot must be a member, then all chats from getGroupsInCommon and all chats, where the user can add the bot, are suitable. In the latter case the bot will be automatically added to the chat. If the bot must be an administrator, then all chats, where the bot already has requested rights or can be added to administrators by the user, are suitable. In the latter case the bot will be automatically granted requested rights.",
        "name": "only_check",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1share_chat_with_bot.html"
  },
  "sharePhoneNumber": {
    "type": "function",
    "desc": "Shares the phone number of the current user with a mutual contact. Supposed to be called when the user clicks on chatActionBarSharePhoneNumber.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the user with whom to share the phone number. The user must be a mutual contact.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1share_phone_number.html"
  },
  "shareUserWithBot": {
    "type": "function",
    "desc": "Shares a user after pressing a keyboardButtonTypeRequestUser button with the bot.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat with the bot.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message with the button.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the button.",
        "name": "button_id",
        "type": "number"
      },
      {
        "desc": "Identifier of the shared user.",
        "name": "shared_user_id",
        "type": "string"
      },
      {
        "desc": "Pass true to check that the user can be shared by the button instead of actually sharing them.",
        "name": "only_check",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1share_user_with_bot.html"
  },
  "startGroupCallRecording": {
    "type": "function",
    "desc": "Starts recording of an active group call. Requires groupCall.can_be_managed group call flag.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Group call recording title; 0-64 characters.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Pass true to record a video file instead of an audio file.",
        "name": "record_video",
        "type": "bool"
      },
      {
        "desc": "Pass true to use portrait orientation for video instead of landscape one.",
        "name": "use_portrait_orientation",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1start_group_call_recording.html"
  },
  "startGroupCallScreenSharing": {
    "type": "function",
    "desc": "Starts screen sharing in a joined group call. Returns join response payload for tgcalls.\nReturns object_ptr<Text>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Screen sharing audio channel synchronization source identifier; received from tgcalls.",
        "name": "audio_source_id",
        "type": "number"
      },
      {
        "desc": "Group call join payload; received from tgcalls.",
        "name": "payload",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1start_group_call_screen_sharing.html"
  },
  "startScheduledGroupCall": {
    "type": "function",
    "desc": "Starts a scheduled group call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1start_scheduled_group_call.html"
  },
  "stopPoll": {
    "type": "function",
    "desc": "Stops a poll. A poll in a message can be stopped when the message has can_be_edited flag is set.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the poll belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message containing the poll.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new message reply markup; pass null if none; for bots only.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1stop_poll.html"
  },
  "suggestUserProfilePhoto": {
    "type": "function",
    "desc": "Suggests a profile photo to another regular user with common messages.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Profile photo to suggest; inputChatPhotoPrevious isn't supported in this function.",
        "name": "photo",
        "type": "InputChatPhoto"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggest_user_profile_photo.html"
  },
  "synchronizeLanguagePack": {
    "type": "function",
    "desc": "Fetches the latest versions of all strings from a language pack in the current localization target from the server. This method doesn't need to be called explicitly for the current used/base language packs. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Language pack identifier.",
        "name": "language_pack_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1synchronize_language_pack.html"
  },
  "terminateAllOtherSessions": {
    "type": "function",
    "desc": "Terminates all other sessions of the current user.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1terminate_all_other_sessions.html"
  },
  "terminateSession": {
    "type": "function",
    "desc": "Terminates a session of the current user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "session_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1terminate_session.html"
  },
  "testCallBytes": {
    "type": "function",
    "desc": "Returns the received bytes; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestBytes>.",
    "fields": [
      {
        "desc": "Bytes to return.",
        "name": "x",
        "type": "bytes"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_bytes.html"
  },
  "testCallEmpty": {
    "type": "function",
    "desc": "Does nothing; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_empty.html"
  },
  "testCallString": {
    "type": "function",
    "desc": "Returns the received string; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestString>.",
    "fields": [
      {
        "desc": "String to return.",
        "name": "x",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_string.html"
  },
  "testCallVectorInt": {
    "type": "function",
    "desc": "Returns the received vector of numbers; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestVectorInt>.",
    "fields": [
      {
        "desc": "Vector of numbers to return.",
        "name": "x",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_int.html"
  },
  "testCallVectorIntObject": {
    "type": "function",
    "desc": "Returns the received vector of objects containing a number; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestVectorIntObject>.",
    "fields": [
      {
        "desc": "Vector of objects to return.",
        "name": "x",
        "type": "testInt"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_int_object.html"
  },
  "testCallVectorString": {
    "type": "function",
    "desc": "Returns the received vector of strings; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestVectorString>.",
    "fields": [
      {
        "desc": "Vector of strings to return.",
        "name": "x",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_string.html"
  },
  "testCallVectorStringObject": {
    "type": "function",
    "desc": "Returns the received vector of objects containing a string; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestVectorStringObject>.",
    "fields": [
      {
        "desc": "Vector of objects to return.",
        "name": "x",
        "type": "testString"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_call_vector_string_object.html"
  },
  "testGetDifference": {
    "type": "function",
    "desc": "Forces an updates.getDifference call to the Telegram servers; for testing only.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_get_difference.html"
  },
  "testNetwork": {
    "type": "function",
    "desc": "Sends a simple network request to the Telegram servers; for testing only. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_network.html"
  },
  "testProxy": {
    "type": "function",
    "desc": "Sends a simple network request to the Telegram servers via proxy; for testing only. Can be called before authorization.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Proxy server domain or IP address.",
        "name": "server",
        "type": "string"
      },
      {
        "desc": "Proxy server port.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Proxy type.",
        "name": "type",
        "type": "ProxyType"
      },
      {
        "desc": "Identifier of a datacenter with which to test connection.",
        "name": "dc_id",
        "type": "number"
      },
      {
        "desc": "The maximum overall timeout for the request.",
        "name": "timeout",
        "type": "double"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_proxy.html"
  },
  "testReturnError": {
    "type": "function",
    "desc": "Returns the specified error and ensures that the Error object is used; for testing only. Can be called synchronously.\nReturns object_ptr<Error>.",
    "fields": [
      {
        "desc": "The error to be returned.",
        "name": "error",
        "type": "error"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_return_error.html"
  },
  "testSquareInt": {
    "type": "function",
    "desc": "Returns the squared received number; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<TestInt>.",
    "fields": [
      {
        "desc": "Number to square.",
        "name": "x",
        "type": "number"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_square_int.html"
  },
  "testUseUpdate": {
    "type": "function",
    "desc": "Does nothing and ensures that the Update object is used; for testing only. This is an offline method. Can be called before authorization.\nReturns object_ptr<Update>.",
    "fields": [

    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_use_update.html"
  },
  "toggleAllDownloadsArePaused": {
    "type": "function",
    "desc": "Changes pause state of all files in the file download list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Pass true to pause all downloads; pass false to unpause them.",
        "name": "are_paused",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_all_downloads_are_paused.html"
  },
  "toggleBotIsAddedToAttachmentMenu": {
    "type": "function",
    "desc": "Adds or removes a bot to attachment and side menu. Bot can be added to the menu, only if userTypeBot.can_be_added_to_attachment_menu == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Bot's user identifier.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Pass true to add the bot to attachment menu; pass false to remove the bot from attachment menu.",
        "name": "is_added",
        "type": "bool"
      },
      {
        "desc": "Pass true if the current user allowed the bot to send them messages. Ignored if is_added is false.",
        "name": "allow_write_access",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_bot_is_added_to_attachment_menu.html"
  },
  "toggleBotUsernameIsActive": {
    "type": "function",
    "desc": "Changes active state for a username of a bot. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached. Can be called only if userTypeBot.can_be_edited == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the target bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The username to change.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Pass true to activate the username; pass false to disable it.",
        "name": "is_active",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_bot_username_is_active.html"
  },
  "toggleChatDefaultDisableNotification": {
    "type": "function",
    "desc": "Changes the value of the default disable_notification parameter, used when a message is sent to a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of default_disable_notification.",
        "name": "default_disable_notification",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_default_disable_notification.html"
  },
  "toggleChatHasProtectedContent": {
    "type": "function",
    "desc": "Changes the ability of users to save, forward, or copy chat content. Supported only for basic groups, supergroups and channels. Requires owner privileges.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of has_protected_content.",
        "name": "has_protected_content",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_has_protected_content.html"
  },
  "toggleChatIsMarkedAsUnread": {
    "type": "function",
    "desc": "Changes the marked as unread state of a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of is_marked_as_unread.",
        "name": "is_marked_as_unread",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_is_marked_as_unread.html"
  },
  "toggleChatIsPinned": {
    "type": "function",
    "desc": "Changes the pinned state of a chat. There can be up to getOption(\"pinned_chat_count_max\")/getOption(\"pinned_archived_chat_count_max\") pinned non-secret chats and the same number of secret chats in the main/archive chat list. The limit can be increased with Telegram Premium.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat list in which to change the pinned state of the chat.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to pin the chat; pass false to unpin it.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_is_pinned.html"
  },
  "toggleChatIsTranslatable": {
    "type": "function",
    "desc": "Changes the translatable state of a chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of is_translatable.",
        "name": "is_translatable",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_is_translatable.html"
  },
  "toggleChatViewAsTopics": {
    "type": "function",
    "desc": "Changes the view_as_topics setting of a forum chat.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of view_as_topics.",
        "name": "view_as_topics",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_chat_view_as_topics.html"
  },
  "toggleDownloadIsPaused": {
    "type": "function",
    "desc": "Changes pause state of a file in the file download list.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the downloaded file.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Pass true if the download is paused.",
        "name": "is_paused",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_download_is_paused.html"
  },
  "toggleForumTopicIsClosed": {
    "type": "function",
    "desc": "Toggles whether a topic is closed in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup unless the user is creator of the topic.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Pass true to close the topic; pass false to reopen it.",
        "name": "is_closed",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_forum_topic_is_closed.html"
  },
  "toggleForumTopicIsPinned": {
    "type": "function",
    "desc": "Changes the pinned state of a forum topic; requires can_manage_topics administrator right in the supergroup. There can be up to getOption(\"pinned_forum_topic_count_max\") pinned forum topics.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier of the forum topic.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Pass true to pin the topic; pass false to unpin it.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_forum_topic_is_pinned.html"
  },
  "toggleGeneralForumTopicIsHidden": {
    "type": "function",
    "desc": "Toggles whether a General topic is hidden in a forum supergroup chat; requires can_manage_topics administrator right in the supergroup.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Pass true to hide and close the General topic; pass false to unhide it.",
        "name": "is_hidden",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_general_forum_topic_is_hidden.html"
  },
  "toggleGroupCallEnabledStartNotification": {
    "type": "function",
    "desc": "Toggles whether the current user will receive a notification when the group call starts; scheduled group calls only.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "New value of the enabled_start_notification setting.",
        "name": "enabled_start_notification",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_enabled_start_notification.html"
  },
  "toggleGroupCallIsMyVideoEnabled": {
    "type": "function",
    "desc": "Toggles whether current user's video is enabled.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Pass true if the current user's video is enabled.",
        "name": "is_my_video_enabled",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_is_my_video_enabled.html"
  },
  "toggleGroupCallIsMyVideoPaused": {
    "type": "function",
    "desc": "Toggles whether current user's video is paused.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Pass true if the current user's video is paused.",
        "name": "is_my_video_paused",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_is_my_video_paused.html"
  },
  "toggleGroupCallMuteNewParticipants": {
    "type": "function",
    "desc": "Toggles whether new participants of a group call can be unmuted only by administrators of the group call. Requires groupCall.can_toggle_mute_new_participants group call flag.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "New value of the mute_new_participants setting.",
        "name": "mute_new_participants",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_mute_new_participants.html"
  },
  "toggleGroupCallParticipantIsHandRaised": {
    "type": "function",
    "desc": "Toggles whether a group call participant hand is rased.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Participant identifier.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "Pass true if the user's hand needs to be raised. Only self hand can be raised. Requires groupCall.can_be_managed group call flag to lower other's hand.",
        "name": "is_hand_raised",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_participant_is_hand_raised.html"
  },
  "toggleGroupCallParticipantIsMuted": {
    "type": "function",
    "desc": "Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Participant identifier.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "Pass true to mute the user; pass false to unmute them.",
        "name": "is_muted",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_participant_is_muted.html"
  },
  "toggleGroupCallScreenSharingIsPaused": {
    "type": "function",
    "desc": "Pauses or unpauses screen sharing in a joined group call.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Pass true to pause screen sharing; pass false to unpause it.",
        "name": "is_paused",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_group_call_screen_sharing_is_paused.html"
  },
  "toggleSessionCanAcceptCalls": {
    "type": "function",
    "desc": "Toggles whether a session can accept incoming calls.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "session_id",
        "type": "string"
      },
      {
        "desc": "Pass true to allow accepting incoming calls by the session; pass false otherwise.",
        "name": "can_accept_calls",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_session_can_accept_calls.html"
  },
  "toggleSessionCanAcceptSecretChats": {
    "type": "function",
    "desc": "Toggles whether a session can accept incoming secret chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "session_id",
        "type": "string"
      },
      {
        "desc": "Pass true to allow accepting secret chats by the session; pass false otherwise.",
        "name": "can_accept_secret_chats",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_session_can_accept_secret_chats.html"
  },
  "toggleStoryIsPinned": {
    "type": "function",
    "desc": "Toggles whether a story is accessible after expiration. Can be called only if story.can_toggle_is_pinned == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Pass true to make the story accessible after expiration; pass false to make it private.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_story_is_pinned.html"
  },
  "toggleSupergroupHasAggressiveAntiSpamEnabled": {
    "type": "function",
    "desc": "Toggles whether aggressive anti-spam checks are enabled in the supergroup. Can be called only if supergroupFullInfo.can_toggle_aggressive_anti_spam == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the supergroup, which isn't a broadcast group.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "The new value of has_aggressive_anti_spam_enabled.",
        "name": "has_aggressive_anti_spam_enabled",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_has_aggressive_anti_spam_enabled.html"
  },
  "toggleSupergroupHasHiddenMembers": {
    "type": "function",
    "desc": "Toggles whether non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers. Can be called only if supergroupFullInfo.can_hide_members == true.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of has_hidden_members.",
        "name": "has_hidden_members",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_has_hidden_members.html"
  },
  "toggleSupergroupIsAllHistoryAvailable": {
    "type": "function",
    "desc": "Toggles whether the message history of a supergroup is available to new members; requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "The new value of is_all_history_available.",
        "name": "is_all_history_available",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_is_all_history_available.html"
  },
  "toggleSupergroupIsBroadcastGroup": {
    "type": "function",
    "desc": "Upgrades supergroup to a broadcast group; requires owner privileges in the supergroup.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_is_broadcast_group.html"
  },
  "toggleSupergroupIsForum": {
    "type": "function",
    "desc": "Toggles whether the supergroup is a forum; requires owner privileges in the supergroup. Discussion supergroups can't be converted to forums.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of is_forum.",
        "name": "is_forum",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_is_forum.html"
  },
  "toggleSupergroupJoinByRequest": {
    "type": "function",
    "desc": "Toggles whether all users directly joining the supergroup need to be approved by supergroup administrators; requires can_restrict_members administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of join_by_request.",
        "name": "join_by_request",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_join_by_request.html"
  },
  "toggleSupergroupJoinToSendMessages": {
    "type": "function",
    "desc": "Toggles whether joining is mandatory to send messages to a discussion supergroup; requires can_restrict_members administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of join_to_send_messages.",
        "name": "join_to_send_messages",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_join_to_send_messages.html"
  },
  "toggleSupergroupSignMessages": {
    "type": "function",
    "desc": "Toggles whether sender signature is added to sent messages in a channel; requires can_change_info administrator right.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New value of sign_messages.",
        "name": "sign_messages",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_sign_messages.html"
  },
  "toggleSupergroupUsernameIsActive": {
    "type": "function",
    "desc": "Changes active state for a username of a supergroup or channel, requires owner privileges in the supergroup or channel. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "The username to change.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Pass true to activate the username; pass false to disable it.",
        "name": "is_active",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_supergroup_username_is_active.html"
  },
  "toggleUsernameIsActive": {
    "type": "function",
    "desc": "Changes active state for a username of the current user. The editable username can't be disabled. May return an error with a message \"USERNAMES_ACTIVE_TOO_MUCH\" if the maximum number of active usernames has been reached.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The username to change.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Pass true to activate the username; pass false to disable it.",
        "name": "is_active",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1toggle_username_is_active.html"
  },
  "transferChatOwnership": {
    "type": "function",
    "desc": "Changes the owner of a chat. The current user must be a current owner of the chat. Use the method canTransferOwnership to check whether the ownership can be transferred from the current session. Available only for supergroups and channel chats.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user to which transfer the ownership. The ownership can't be transferred to a bot or to a deleted user.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The 2-step verification password of the current user.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1transfer_chat_ownership.html"
  },
  "translateMessageText": {
    "type": "function",
    "desc": "Extracts text or caption of the given message and translates it to the given language. If the current user is a Telegram Premium user, then text formatting is preserved.\nReturns object_ptr<FormattedText>.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Language code of the language to which the message is translated. Must be one of \"af\", \"sq\", \"am\", \"ar\", \"hy\", \"az\", \"eu\", \"be\", \"bn\", \"bs\", \"bg\", \"ca\", \"ceb\", \"zh-CN\", \"zh\", \"zh-Hans\", \"zh-TW\", \"zh-Hant\", \"co\", \"hr\", \"cs\", \"da\", \"nl\", \"en\", \"eo\", \"et\", \"fi\", \"fr\", \"fy\", \"gl\", \"ka\", \"de\", \"el\", \"gu\", \"ht\", \"ha\", \"haw\", \"he\", \"iw\", \"hi\", \"hmn\", \"hu\", \"is\", \"ig\", \"id\", \"in\", \"ga\", \"it\", \"ja\", \"jv\", \"kn\", \"kk\", \"km\", \"rw\", \"ko\", \"ku\", \"ky\", \"lo\", \"la\", \"lv\", \"lt\", \"lb\", \"mk\", \"mg\", \"ms\", \"ml\", \"mt\", \"mi\", \"mr\", \"mn\", \"my\", \"ne\", \"no\", \"ny\", \"or\", \"ps\", \"fa\", \"pl\", \"pt\", \"pa\", \"ro\", \"ru\", \"sm\", \"gd\", \"sr\", \"st\", \"sn\", \"sd\", \"si\", \"sk\", \"sl\", \"so\", \"es\", \"su\", \"sw\", \"sv\", \"tl\", \"tg\", \"ta\", \"tt\", \"te\", \"th\", \"tr\", \"tk\", \"uk\", \"ur\", \"ug\", \"uz\", \"vi\", \"cy\", \"xh\", \"yi\", \"ji\", \"yo\", \"zu\".",
        "name": "to_language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1translate_message_text.html"
  },
  "translateText": {
    "type": "function",
    "desc": "Translates a text to the given language. If the current user is a Telegram Premium user, then text formatting is preserved.\nReturns object_ptr<FormattedText>.",
    "fields": [
      {
        "desc": "Text to translate.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Language code of the language to which the message is translated. Must be one of \"af\", \"sq\", \"am\", \"ar\", \"hy\", \"az\", \"eu\", \"be\", \"bn\", \"bs\", \"bg\", \"ca\", \"ceb\", \"zh-CN\", \"zh\", \"zh-Hans\", \"zh-TW\", \"zh-Hant\", \"co\", \"hr\", \"cs\", \"da\", \"nl\", \"en\", \"eo\", \"et\", \"fi\", \"fr\", \"fy\", \"gl\", \"ka\", \"de\", \"el\", \"gu\", \"ht\", \"ha\", \"haw\", \"he\", \"iw\", \"hi\", \"hmn\", \"hu\", \"is\", \"ig\", \"id\", \"in\", \"ga\", \"it\", \"ja\", \"jv\", \"kn\", \"kk\", \"km\", \"rw\", \"ko\", \"ku\", \"ky\", \"lo\", \"la\", \"lv\", \"lt\", \"lb\", \"mk\", \"mg\", \"ms\", \"ml\", \"mt\", \"mi\", \"mr\", \"mn\", \"my\", \"ne\", \"no\", \"ny\", \"or\", \"ps\", \"fa\", \"pl\", \"pt\", \"pa\", \"ro\", \"ru\", \"sm\", \"gd\", \"sr\", \"st\", \"sn\", \"sd\", \"si\", \"sk\", \"sl\", \"so\", \"es\", \"su\", \"sw\", \"sv\", \"tl\", \"tg\", \"ta\", \"tt\", \"te\", \"th\", \"tr\", \"tk\", \"uk\", \"ur\", \"ug\", \"uz\", \"vi\", \"cy\", \"xh\", \"yi\", \"ji\", \"yo\", \"zu\".",
        "name": "to_language_code",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1translate_text.html"
  },
  "unpinAllChatMessages": {
    "type": "function",
    "desc": "Removes all pinned messages from a chat; requires can_pin_messages rights in the group or can_edit_messages rights in the channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unpin_all_chat_messages.html"
  },
  "unpinAllMessageThreadMessages": {
    "type": "function",
    "desc": "Removes all pinned messages from a forum topic; requires can_pin_messages rights in the supergroup.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier in which messages will be unpinned.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unpin_all_message_thread_messages.html"
  },
  "unpinChatMessage": {
    "type": "function",
    "desc": "Removes a pinned message from a chat; requires can_pin_messages rights in the group or can_edit_messages rights in the channel.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the removed pinned message.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unpin_chat_message.html"
  },
  "upgradeBasicGroupChatToSupergroupChat": {
    "type": "function",
    "desc": "Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges. Deactivates the original basic group.\nReturns object_ptr<Chat>.",
    "fields": [
      {
        "desc": "Identifier of the chat to upgrade.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1upgrade_basic_group_chat_to_supergroup_chat.html"
  },
  "uploadStickerFile": {
    "type": "function",
    "desc": "Uploads a file with a sticker; returns the uploaded file.\nReturns object_ptr<File>.",
    "fields": [
      {
        "desc": "Sticker file owner; ignored for regular users.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Sticker format.",
        "name": "sticker_format",
        "type": "StickerFormat"
      },
      {
        "desc": "File file to upload; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements.",
        "name": "sticker",
        "type": "InputFile"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1upload_sticker_file.html"
  },
  "validateOrderInfo": {
    "type": "function",
    "desc": "Validates the order information provided by a user and returns the available shipping options for a flexible invoice.\nReturns object_ptr<ValidatedOrderInfo>.",
    "fields": [
      {
        "desc": "The invoice.",
        "name": "input_invoice",
        "type": "InputInvoice"
      },
      {
        "desc": "The order information, provided by the user; pass null if empty.",
        "name": "order_info",
        "type": "orderInfo"
      },
      {
        "desc": "Pass true to save the order information.",
        "name": "allow_save",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1validate_order_info.html"
  },
  "viewMessages": {
    "type": "function",
    "desc": "Informs TDLib that messages are being viewed by the user. Sponsored messages must be marked as viewed only when the entire text of the message is shown on the screen (excluding the button). Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels).\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The identifiers of the messages being viewed.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "Source of the message view; pass null to guess the source based on chat open state.",
        "name": "source",
        "type": "MessageSource"
      },
      {
        "desc": "Pass true to mark as read the specified messages even the chat is closed.",
        "name": "force_read",
        "type": "bool"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1view_messages.html"
  },
  "viewPremiumFeature": {
    "type": "function",
    "desc": "Informs TDLib that the user viewed detailed information about a Premium feature on the Premium features screen.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The viewed premium feature.",
        "name": "feature",
        "type": "PremiumFeature"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1view_premium_feature.html"
  },
  "viewTrendingStickerSets": {
    "type": "function",
    "desc": "Informs the server that some trending sticker sets have been viewed by the user.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "Identifiers of viewed trending sticker sets.",
        "name": "sticker_set_ids",
        "type": "string"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1view_trending_sticker_sets.html"
  },
  "writeGeneratedFilePart": {
    "type": "function",
    "desc": "Writes a part of a generated file. This method is intended to be used only if the application has no direct access to TDLib's file system, because it is usually slower than a direct write to the destination file.\nReturns object_ptr<Ok>.",
    "fields": [
      {
        "desc": "The identifier of the generation process.",
        "name": "generation_id",
        "type": "string"
      },
      {
        "desc": "The offset from which to write the data to the file.",
        "name": "offset",
        "type": "string"
      },
      {
        "desc": "The data to write.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDFunction",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1write_generated_file_part.html"
  },
  "AuthenticationCodeType": {
    "type": "object",
    "desc": "This class is an abstract base class. Provides information about the method by which an authentication code is delivered to the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_authentication_code_type.html"
  },
  "authenticationCodeTypeCall": {
    "type": "object",
    "desc": "An authentication code is delivered via a phone call to the specified phone number.",
    "fields": [
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_call.html"
  },
  "authenticationCodeTypeFirebaseAndroid": {
    "type": "object",
    "desc": "An authentication code is delivered via Firebase Authentication to the official Android application.",
    "fields": [
      {
        "desc": "Nonce to pass to the SafetyNet Attestation API.",
        "name": "nonce",
        "type": "bytes"
      },
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_firebase_android.html"
  },
  "authenticationCodeTypeFirebaseIos": {
    "type": "object",
    "desc": "An authentication code is delivered via Firebase Authentication to the official iOS application.",
    "fields": [
      {
        "desc": "Receipt of successful application token validation to compare with receipt from push notification.",
        "name": "receipt",
        "type": "string"
      },
      {
        "desc": "Time after the next authentication method is supposed to be used if verification push notification isn't received, in seconds.",
        "name": "push_timeout",
        "type": "number"
      },
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_firebase_ios.html"
  },
  "authenticationCodeTypeFlashCall": {
    "type": "object",
    "desc": "An authentication code is delivered by an immediately canceled call to the specified phone number. The phone number that calls is the code that must be entered automatically.",
    "fields": [
      {
        "desc": "Pattern of the phone number from which the call will be made.",
        "name": "pattern",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_flash_call.html"
  },
  "authenticationCodeTypeFragment": {
    "type": "object",
    "desc": "An authentication code is delivered to https://fragment.com. The user must be logged in there via a wallet owning the phone number's NFT.",
    "fields": [
      {
        "desc": "URL to open to receive the code.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_fragment.html"
  },
  "authenticationCodeTypeMissedCall": {
    "type": "object",
    "desc": "An authentication code is delivered by an immediately canceled call to the specified phone number. The last digits of the phone number that calls are the code that must be entered manually by the user.",
    "fields": [
      {
        "desc": "Prefix of the phone number from which the call will be made.",
        "name": "phone_number_prefix",
        "type": "string"
      },
      {
        "desc": "Number of digits in the code, excluding the prefix.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_missed_call.html"
  },
  "authenticationCodeTypeSms": {
    "type": "object",
    "desc": "An authentication code is delivered via an SMS message to the specified phone number; applications may not receive this type of code.",
    "fields": [
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_sms.html"
  },
  "authenticationCodeTypeTelegramMessage": {
    "type": "object",
    "desc": "An authentication code is delivered via a private Telegram message, which can be viewed from another active session.",
    "fields": [
      {
        "desc": "Length of the code.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_type_telegram_message.html"
  },
  "AuthorizationState": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the current authorization state of the TDLib client.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_authorization_state.html"
  },
  "authorizationStateClosed": {
    "type": "object",
    "desc": "TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one must create a new instance of the TDLib client.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_closed.html"
  },
  "authorizationStateClosing": {
    "type": "object",
    "desc": "TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_closing.html"
  },
  "authorizationStateLoggingOut": {
    "type": "object",
    "desc": "The user is currently logging out.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_logging_out.html"
  },
  "authorizationStateReady": {
    "type": "object",
    "desc": "The user has been successfully authorized. TDLib is now ready to answer general requests.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_ready.html"
  },
  "authorizationStateWaitCode": {
    "type": "object",
    "desc": "TDLib needs the user's authentication code to authorize. Call checkAuthenticationCode to check the code.",
    "fields": [
      {
        "desc": "Information about the authorization code that was sent.",
        "name": "code_info",
        "type": "authenticationCodeInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_code.html"
  },
  "authorizationStateWaitEmailAddress": {
    "type": "object",
    "desc": "TDLib needs the user's email address to authorize. Call setAuthenticationEmailAddress to provide the email address, or directly call checkAuthenticationEmailCode with Apple ID/Google ID token if allowed.",
    "fields": [
      {
        "desc": "True, if authorization through Apple ID is allowed.",
        "name": "allow_apple_id",
        "type": "bool"
      },
      {
        "desc": "True, if authorization through Google ID is allowed.",
        "name": "allow_google_id",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_email_address.html"
  },
  "authorizationStateWaitEmailCode": {
    "type": "object",
    "desc": "TDLib needs the user's authentication code sent to an email address to authorize. Call checkAuthenticationEmailCode to provide the code.",
    "fields": [
      {
        "desc": "True, if authorization through Apple ID is allowed.",
        "name": "allow_apple_id",
        "type": "bool"
      },
      {
        "desc": "True, if authorization through Google ID is allowed.",
        "name": "allow_google_id",
        "type": "bool"
      },
      {
        "desc": "Information about the sent authentication code.",
        "name": "code_info",
        "type": "emailAddressAuthenticationCodeInfo"
      },
      {
        "desc": "Reset state of the email address; may be null if the email address can't be reset.",
        "name": "email_address_reset_state",
        "type": "EmailAddressResetState"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_email_code.html"
  },
  "authorizationStateWaitOtherDeviceConfirmation": {
    "type": "object",
    "desc": "The user needs to confirm authorization on another logged in device by scanning a QR code with the provided link.",
    "fields": [
      {
        "desc": "A tg:// URL for the QR code. The link will be updated frequently.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_other_device_confirmation.html"
  },
  "authorizationStateWaitPassword": {
    "type": "object",
    "desc": "The user has been authorized, but needs to enter a 2-step verification password to start using the application. Call checkAuthenticationPassword to provide the password, or requestAuthenticationPasswordRecovery to recover the password, or deleteAccount to delete the account after a week.",
    "fields": [
      {
        "desc": "Hint for the password; may be empty.",
        "name": "password_hint",
        "type": "string"
      },
      {
        "desc": "True, if a recovery email address has been set up.",
        "name": "has_recovery_email_address",
        "type": "bool"
      },
      {
        "desc": "True, if some Telegram Passport elements were saved.",
        "name": "has_passport_data",
        "type": "bool"
      },
      {
        "desc": "Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent.",
        "name": "recovery_email_address_pattern",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_password.html"
  },
  "authorizationStateWaitPhoneNumber": {
    "type": "object",
    "desc": "TDLib needs the user's phone number to authorize. Call setAuthenticationPhoneNumber to provide the phone number, or use requestQrCodeAuthentication or checkAuthenticationBotToken for other authentication options.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_phone_number.html"
  },
  "authorizationStateWaitRegistration": {
    "type": "object",
    "desc": "The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration. Call registerUser to accept the terms of service and provide the data.",
    "fields": [
      {
        "desc": "Telegram terms of service.",
        "name": "terms_of_service",
        "type": "termsOfService"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_registration.html"
  },
  "authorizationStateWaitTdlibParameters": {
    "type": "object",
    "desc": "Initialization parameters are needed. Call setTdlibParameters to provide them.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authorization_state_wait_tdlib_parameters.html"
  },
  "AutosaveSettingsScope": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes scope of autosave settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_autosave_settings_scope.html"
  },
  "autosaveSettingsScopeChannelChats": {
    "type": "object",
    "desc": "Autosave settings applied to all channel chats without chat-specific settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings_scope_channel_chats.html"
  },
  "autosaveSettingsScopeChat": {
    "type": "object",
    "desc": "Autosave settings applied to a chat.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings_scope_chat.html"
  },
  "autosaveSettingsScopeGroupChats": {
    "type": "object",
    "desc": "Autosave settings applied to all basic group and supergroup chats without chat-specific settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings_scope_group_chats.html"
  },
  "autosaveSettingsScopePrivateChats": {
    "type": "object",
    "desc": "Autosave settings applied to all private chats without chat-specific settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings_scope_private_chats.html"
  },
  "BackgroundFill": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a fill of a background.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_background_fill.html"
  },
  "backgroundFillFreeformGradient": {
    "type": "object",
    "desc": "Describes a freeform gradient fill of a background.",
    "fields": [
      {
        "desc": "A list of 3 or 4 colors of the freeform gradients in the RGB24 format.",
        "name": "colors",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_fill_freeform_gradient.html"
  },
  "backgroundFillGradient": {
    "type": "object",
    "desc": "Describes a gradient fill of a background.",
    "fields": [
      {
        "desc": "A top color of the background in the RGB24 format.",
        "name": "top_color",
        "type": "number"
      },
      {
        "desc": "A bottom color of the background in the RGB24 format.",
        "name": "bottom_color",
        "type": "number"
      },
      {
        "desc": "Clockwise rotation angle of the gradient, in degrees; 0-359. Must always be divisible by 45.",
        "name": "rotation_angle",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_fill_gradient.html"
  },
  "backgroundFillSolid": {
    "type": "object",
    "desc": "Describes a solid fill of a background.",
    "fields": [
      {
        "desc": "A color of the background in the RGB24 format.",
        "name": "color",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_fill_solid.html"
  },
  "BackgroundType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a background.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_background_type.html"
  },
  "backgroundTypeFill": {
    "type": "object",
    "desc": "A filled background.",
    "fields": [
      {
        "desc": "The background fill.",
        "name": "fill",
        "type": "BackgroundFill"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_type_fill.html"
  },
  "backgroundTypePattern": {
    "type": "object",
    "desc": "A PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern to be combined with the background fill chosen by the user.",
    "fields": [
      {
        "desc": "Fill of the background.",
        "name": "fill",
        "type": "BackgroundFill"
      },
      {
        "desc": "Intensity of the pattern when it is shown above the filled background; 0-100.",
        "name": "intensity",
        "type": "number"
      },
      {
        "desc": "True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only.",
        "name": "is_inverted",
        "type": "bool"
      },
      {
        "desc": "True, if the background needs to be slightly moved when device is tilted.",
        "name": "is_moving",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_type_pattern.html"
  },
  "backgroundTypeWallpaper": {
    "type": "object",
    "desc": "A wallpaper in JPEG format.",
    "fields": [
      {
        "desc": "True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12.",
        "name": "is_blurred",
        "type": "bool"
      },
      {
        "desc": "True, if the background needs to be slightly moved when device is tilted.",
        "name": "is_moving",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background_type_wallpaper.html"
  },
  "BlockList": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a type of a block list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_block_list.html"
  },
  "blockListMain": {
    "type": "object",
    "desc": "The main block list that disallows writing messages to the current user, receiving their status and photo, viewing of stories, and some other actions.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1block_list_main.html"
  },
  "blockListStories": {
    "type": "object",
    "desc": "The block list that disallows viewing of stories of the current user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1block_list_stories.html"
  },
  "BotCommandScope": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the scope to which bot commands are relevant.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_bot_command_scope.html"
  },
  "botCommandScopeAllChatAdministrators": {
    "type": "object",
    "desc": "A scope covering all group and supergroup chat administrators.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_all_chat_administrators.html"
  },
  "botCommandScopeAllGroupChats": {
    "type": "object",
    "desc": "A scope covering all group and supergroup chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_all_group_chats.html"
  },
  "botCommandScopeAllPrivateChats": {
    "type": "object",
    "desc": "A scope covering all private chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_all_private_chats.html"
  },
  "botCommandScopeChat": {
    "type": "object",
    "desc": "A scope covering all members of a chat.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_chat.html"
  },
  "botCommandScopeChatAdministrators": {
    "type": "object",
    "desc": "A scope covering all administrators of a chat.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_chat_administrators.html"
  },
  "botCommandScopeChatMember": {
    "type": "object",
    "desc": "A scope covering a member of a chat.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_chat_member.html"
  },
  "botCommandScopeDefault": {
    "type": "object",
    "desc": "A scope covering all users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command_scope_default.html"
  },
  "BotWriteAccessAllowReason": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a reason why a bot was allowed to write messages to the current user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_bot_write_access_allow_reason.html"
  },
  "botWriteAccessAllowReasonAcceptedRequest": {
    "type": "object",
    "desc": "The user accepted bot's request to send messages with allowBotToSendMessages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_write_access_allow_reason_accepted_request.html"
  },
  "botWriteAccessAllowReasonAddedToAttachmentMenu": {
    "type": "object",
    "desc": "The user added the bot to attachment or side menu using toggleBotIsAddedToAttachmentMenu.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_write_access_allow_reason_added_to_attachment_menu.html"
  },
  "botWriteAccessAllowReasonConnectedWebsite": {
    "type": "object",
    "desc": "The user connected a website by logging in using Telegram Login Widget on it.",
    "fields": [
      {
        "desc": "Domain name of the connected website.",
        "name": "domain_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_write_access_allow_reason_connected_website.html"
  },
  "botWriteAccessAllowReasonLaunchedWebApp": {
    "type": "object",
    "desc": "The user launched a Web App using getWebAppLinkUrl.",
    "fields": [
      {
        "desc": "Information about the Web App.",
        "name": "web_app",
        "type": "webApp"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_write_access_allow_reason_launched_web_app.html"
  },
  "CallDiscardReason": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the reason why a call was discarded.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_discard_reason.html"
  },
  "callDiscardReasonDeclined": {
    "type": "object",
    "desc": "The call was ended before the conversation started. It was declined by the other party.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_declined.html"
  },
  "callDiscardReasonDisconnected": {
    "type": "object",
    "desc": "The call was ended during the conversation because the users were disconnected.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_disconnected.html"
  },
  "callDiscardReasonEmpty": {
    "type": "object",
    "desc": "The call wasn't discarded, or the reason is unknown.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_empty.html"
  },
  "callDiscardReasonHungUp": {
    "type": "object",
    "desc": "The call was ended because one of the parties hung up.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_hung_up.html"
  },
  "callDiscardReasonMissed": {
    "type": "object",
    "desc": "The call was ended before the conversation started. It was canceled by the caller or missed by the other party.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_discard_reason_missed.html"
  },
  "CallProblem": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the exact type of a problem with a call.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_problem.html"
  },
  "callProblemDistortedSpeech": {
    "type": "object",
    "desc": "The speech was distorted.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_distorted_speech.html"
  },
  "callProblemDistortedVideo": {
    "type": "object",
    "desc": "The video was distorted.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_distorted_video.html"
  },
  "callProblemDropped": {
    "type": "object",
    "desc": "The call ended unexpectedly.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_dropped.html"
  },
  "callProblemEcho": {
    "type": "object",
    "desc": "The user heard their own voice.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_echo.html"
  },
  "callProblemInterruptions": {
    "type": "object",
    "desc": "The other side kept disappearing.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_interruptions.html"
  },
  "callProblemNoise": {
    "type": "object",
    "desc": "The user heard background noise.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_noise.html"
  },
  "callProblemPixelatedVideo": {
    "type": "object",
    "desc": "The video was pixelated.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_pixelated_video.html"
  },
  "callProblemSilentLocal": {
    "type": "object",
    "desc": "The user couldn't hear the other side.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_silent_local.html"
  },
  "callProblemSilentRemote": {
    "type": "object",
    "desc": "The other side couldn't hear the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_problem_silent_remote.html"
  },
  "CallServerType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a call server.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_server_type.html"
  },
  "callServerTypeTelegramReflector": {
    "type": "object",
    "desc": "A Telegram call reflector.",
    "fields": [
      {
        "desc": "A peer tag to be used with the reflector.",
        "name": "peer_tag",
        "type": "bytes"
      },
      {
        "desc": "True, if the server uses TCP instead of UDP.",
        "name": "is_tcp",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_server_type_telegram_reflector.html"
  },
  "callServerTypeWebrtc": {
    "type": "object",
    "desc": "A WebRTC server.",
    "fields": [
      {
        "desc": "Username to be used for authentication.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Authentication password.",
        "name": "password",
        "type": "string"
      },
      {
        "desc": "True, if the server supports TURN.",
        "name": "supports_turn",
        "type": "bool"
      },
      {
        "desc": "True, if the server supports STUN.",
        "name": "supports_stun",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_server_type_webrtc.html"
  },
  "CallState": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the current call state.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_call_state.html"
  },
  "callStateDiscarded": {
    "type": "object",
    "desc": "The call has ended successfully.",
    "fields": [
      {
        "desc": "The reason why the call has ended.",
        "name": "reason",
        "type": "CallDiscardReason"
      },
      {
        "desc": "True, if the call rating must be sent to the server.",
        "name": "need_rating",
        "type": "bool"
      },
      {
        "desc": "True, if the call debug information must be sent to the server.",
        "name": "need_debug_information",
        "type": "bool"
      },
      {
        "desc": "True, if the call log must be sent to the server.",
        "name": "need_log",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_discarded.html"
  },
  "callStateError": {
    "type": "object",
    "desc": "The call has ended with an error.",
    "fields": [
      {
        "desc": "Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout.",
        "name": "error",
        "type": "error"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_error.html"
  },
  "callStateExchangingKeys": {
    "type": "object",
    "desc": "The call has been answered and encryption keys are being exchanged.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_exchanging_keys.html"
  },
  "callStateHangingUp": {
    "type": "object",
    "desc": "The call is hanging up after discardCall has been called.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_hanging_up.html"
  },
  "callStatePending": {
    "type": "object",
    "desc": "The call is pending, waiting to be accepted by a user.",
    "fields": [
      {
        "desc": "True, if the call has already been created by the server.",
        "name": "is_created",
        "type": "bool"
      },
      {
        "desc": "True, if the call has already been received by the other party.",
        "name": "is_received",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_pending.html"
  },
  "callStateReady": {
    "type": "object",
    "desc": "The call is ready to use.",
    "fields": [
      {
        "desc": "Call protocols supported by the other call participant.",
        "name": "protocol",
        "type": "callProtocol"
      },
      {
        "desc": "List of available call servers.",
        "name": "servers",
        "type": "callServer"
      },
      {
        "desc": "A JSON-encoded call config.",
        "name": "config",
        "type": "string"
      },
      {
        "desc": "Call encryption key.",
        "name": "encryption_key",
        "type": "bytes"
      },
      {
        "desc": "Encryption key emojis fingerprint.",
        "name": "emojis",
        "type": "string"
      },
      {
        "desc": "True, if peer-to-peer connection is allowed by users privacy settings.",
        "name": "allow_p2p",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_state_ready.html"
  },
  "CallbackQueryPayload": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a payload of a callback query.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_callback_query_payload.html"
  },
  "callbackQueryPayloadData": {
    "type": "object",
    "desc": "The payload for a general callback button.",
    "fields": [
      {
        "desc": "Data that was attached to the callback button.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_payload_data.html"
  },
  "callbackQueryPayloadDataWithPassword": {
    "type": "object",
    "desc": "The payload for a callback button requiring password.",
    "fields": [
      {
        "desc": "The 2-step verification password for the current user.",
        "name": "password",
        "type": "string"
      },
      {
        "desc": "Data that was attached to the callback button.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_payload_data_with_password.html"
  },
  "callbackQueryPayloadGame": {
    "type": "object",
    "desc": "The payload for a game callback button.",
    "fields": [
      {
        "desc": "A short name of the game that was attached to the callback button.",
        "name": "game_short_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_payload_game.html"
  },
  "CanSendStoryResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents result of checking whether the current user can send a story in the specific chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_can_send_story_result.html"
  },
  "canSendStoryResultActiveStoryLimitExceeded": {
    "type": "object",
    "desc": "The limit for the number of active stories exceeded. The user can buy Telegram Premium, delete an active story, or wait for the oldest story to expire.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_active_story_limit_exceeded.html"
  },
  "canSendStoryResultBoostNeeded": {
    "type": "object",
    "desc": "The channel chat must be boosted first by Telegram Premium subscribers to post more stories. Call getChatBoostStatus to get current boost status of the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_boost_needed.html"
  },
  "canSendStoryResultMonthlyLimitExceeded": {
    "type": "object",
    "desc": "The monthly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time.",
    "fields": [
      {
        "desc": "Time left before the user can send the next story.",
        "name": "retry_after",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_monthly_limit_exceeded.html"
  },
  "canSendStoryResultOk": {
    "type": "object",
    "desc": "A story can be sent.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_ok.html"
  },
  "canSendStoryResultPremiumNeeded": {
    "type": "object",
    "desc": "The user must subscribe to Telegram Premium to be able to post stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_premium_needed.html"
  },
  "canSendStoryResultWeeklyLimitExceeded": {
    "type": "object",
    "desc": "The weekly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time.",
    "fields": [
      {
        "desc": "Time left before the user can send the next story.",
        "name": "retry_after",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_send_story_result_weekly_limit_exceeded.html"
  },
  "CanTransferOwnershipResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents result of checking whether the current session can be used to transfer a chat ownership to another user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_can_transfer_ownership_result.html"
  },
  "canTransferOwnershipResultOk": {
    "type": "object",
    "desc": "The session can be used.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_transfer_ownership_result_ok.html"
  },
  "canTransferOwnershipResultPasswordNeeded": {
    "type": "object",
    "desc": "The 2-step verification needs to be enabled first.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_transfer_ownership_result_password_needed.html"
  },
  "canTransferOwnershipResultPasswordTooFresh": {
    "type": "object",
    "desc": "The 2-step verification was enabled recently, user needs to wait.",
    "fields": [
      {
        "desc": "Time left before the session can be used to transfer ownership of a chat, in seconds.",
        "name": "retry_after",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_transfer_ownership_result_password_too_fresh.html"
  },
  "canTransferOwnershipResultSessionTooFresh": {
    "type": "object",
    "desc": "The session was created recently, user needs to wait.",
    "fields": [
      {
        "desc": "Time left before the session can be used to transfer ownership of a chat, in seconds.",
        "name": "retry_after",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1can_transfer_ownership_result_session_too_fresh.html"
  },
  "ChatAction": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the different types of activity in a chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_action.html"
  },
  "chatActionCancel": {
    "type": "object",
    "desc": "The user has canceled the previous action.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_cancel.html"
  },
  "chatActionChoosingContact": {
    "type": "object",
    "desc": "The user is picking a contact to send.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_choosing_contact.html"
  },
  "chatActionChoosingLocation": {
    "type": "object",
    "desc": "The user is picking a location or venue to send.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_choosing_location.html"
  },
  "chatActionChoosingSticker": {
    "type": "object",
    "desc": "The user is picking a sticker to send.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_choosing_sticker.html"
  },
  "chatActionRecordingVideo": {
    "type": "object",
    "desc": "The user is recording a video.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_video.html"
  },
  "chatActionRecordingVideoNote": {
    "type": "object",
    "desc": "The user is recording a video note.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_video_note.html"
  },
  "chatActionRecordingVoiceNote": {
    "type": "object",
    "desc": "The user is recording a voice note.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_recording_voice_note.html"
  },
  "chatActionStartPlayingGame": {
    "type": "object",
    "desc": "The user has started to play a game.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_start_playing_game.html"
  },
  "chatActionTyping": {
    "type": "object",
    "desc": "The user is typing a message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_typing.html"
  },
  "chatActionUploadingDocument": {
    "type": "object",
    "desc": "The user is uploading a document.",
    "fields": [
      {
        "desc": "Upload progress, as a percentage.",
        "name": "progress",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_document.html"
  },
  "chatActionUploadingPhoto": {
    "type": "object",
    "desc": "The user is uploading a photo.",
    "fields": [
      {
        "desc": "Upload progress, as a percentage.",
        "name": "progress",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_photo.html"
  },
  "chatActionUploadingVideo": {
    "type": "object",
    "desc": "The user is uploading a video.",
    "fields": [
      {
        "desc": "Upload progress, as a percentage.",
        "name": "progress",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_video.html"
  },
  "chatActionUploadingVideoNote": {
    "type": "object",
    "desc": "The user is uploading a video note.",
    "fields": [
      {
        "desc": "Upload progress, as a percentage.",
        "name": "progress",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_video_note.html"
  },
  "chatActionUploadingVoiceNote": {
    "type": "object",
    "desc": "The user is uploading a voice note.",
    "fields": [
      {
        "desc": "Upload progress, as a percentage.",
        "name": "progress",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_uploading_voice_note.html"
  },
  "chatActionWatchingAnimations": {
    "type": "object",
    "desc": "The user is watching animations sent by the other party by clicking on an animated emoji.",
    "fields": [
      {
        "desc": "The animated emoji.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_watching_animations.html"
  },
  "ChatActionBar": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes actions which must be possible to do through a chat action bar.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_action_bar.html"
  },
  "chatActionBarAddContact": {
    "type": "object",
    "desc": "The chat is a private or secret chat and the other user can be added to the contact list using the method addContact.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_add_contact.html"
  },
  "chatActionBarInviteMembers": {
    "type": "object",
    "desc": "The chat is a recently created group chat to which new members can be invited.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_invite_members.html"
  },
  "chatActionBarJoinRequest": {
    "type": "object",
    "desc": "The chat is a private chat with an administrator of a chat to which the user sent join request.",
    "fields": [
      {
        "desc": "Title of the chat to which the join request was sent.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "True, if the join request was sent to a channel chat.",
        "name": "is_channel",
        "type": "bool"
      },
      {
        "desc": "Point in time (Unix timestamp) when the join request was sent.",
        "name": "request_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_join_request.html"
  },
  "chatActionBarReportAddBlock": {
    "type": "object",
    "desc": "The chat is a private or secret chat, which can be reported using the method reportChat, or the other user can be blocked using the method setMessageSenderBlockList, or the other user can be added to the contact list using the method addContact. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown.",
    "fields": [
      {
        "desc": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings.",
        "name": "can_unarchive",
        "type": "bool"
      },
      {
        "desc": "If non-negative, the current user was found by the other user through searchChatsNearby and this is the distance between the users.",
        "name": "distance",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_report_add_block.html"
  },
  "chatActionBarReportSpam": {
    "type": "object",
    "desc": "The chat can be reported as spam using the method reportChat with the reason reportReasonSpam. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown.",
    "fields": [
      {
        "desc": "If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings.",
        "name": "can_unarchive",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_report_spam.html"
  },
  "chatActionBarReportUnrelatedLocation": {
    "type": "object",
    "desc": "The chat is a location-based supergroup, which can be reported as having unrelated location using the method reportChat with the reason reportReasonUnrelatedLocation.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_report_unrelated_location.html"
  },
  "chatActionBarSharePhoneNumber": {
    "type": "object",
    "desc": "The chat is a private or secret chat with a mutual contact and the user's phone number can be shared with the other user using the method sharePhoneNumber.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_action_bar_share_phone_number.html"
  },
  "ChatAvailableReactions": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes reactions available in the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_available_reactions.html"
  },
  "chatAvailableReactionsAll": {
    "type": "object",
    "desc": "All reactions are available in the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_available_reactions_all.html"
  },
  "chatAvailableReactionsSome": {
    "type": "object",
    "desc": "Only specific reactions are available in the chat.",
    "fields": [
      {
        "desc": "The list of reactions.",
        "name": "reactions",
        "type": "ReactionType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_available_reactions_some.html"
  },
  "ChatBoostSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes source of a chat boost.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_boost_source.html"
  },
  "chatBoostSourceGiftCode": {
    "type": "object",
    "desc": "The chat created a Telegram Premium gift code for a user.",
    "fields": [
      {
        "desc": "Identifier of a user, for which the gift code was created.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The created Telegram Premium gift code, which is known only if this is a gift code for the current user, or it has already been claimed.",
        "name": "gift_code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_source_gift_code.html"
  },
  "chatBoostSourceGiveaway": {
    "type": "object",
    "desc": "The chat created a Telegram Premium giveaway.",
    "fields": [
      {
        "desc": "Identifier of a user that won in the giveaway; 0 if none.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "The created Telegram Premium gift code if it was used by the user or can be claimed by the current user; an empty string otherwise.",
        "name": "gift_code",
        "type": "string"
      },
      {
        "desc": "Identifier of the corresponding giveaway message; can be an identifier of a deleted message.",
        "name": "giveaway_message_id",
        "type": "string"
      },
      {
        "desc": "True, if the winner for the corresponding Telegram Premium subscription wasn't chosen, because there were not enough participants.",
        "name": "is_unclaimed",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_source_giveaway.html"
  },
  "chatBoostSourcePremium": {
    "type": "object",
    "desc": "A user with Telegram Premium subscription or gifted Telegram Premium boosted the chat.",
    "fields": [
      {
        "desc": "Identifier of the user.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_source_premium.html"
  },
  "ChatEventAction": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a chat event.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_event_action.html"
  },
  "chatEventAccentColorChanged": {
    "type": "object",
    "desc": "The chat accent color was changed.",
    "fields": [
      {
        "desc": "Previous identifier of chat accent color.",
        "name": "old_accent_color_id",
        "type": "number"
      },
      {
        "desc": "New identifier of chat accent color.",
        "name": "new_accent_color_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_accent_color_changed.html"
  },
  "chatEventActiveUsernamesChanged": {
    "type": "object",
    "desc": "The chat active usernames were changed.",
    "fields": [
      {
        "desc": "Previous list of active usernames.",
        "name": "old_usernames",
        "type": "string"
      },
      {
        "desc": "New list of active usernames.",
        "name": "new_usernames",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_active_usernames_changed.html"
  },
  "chatEventAvailableReactionsChanged": {
    "type": "object",
    "desc": "The chat available reactions were changed.",
    "fields": [
      {
        "desc": "Previous chat available reactions.",
        "name": "old_available_reactions",
        "type": "ChatAvailableReactions"
      },
      {
        "desc": "New chat available reactions.",
        "name": "new_available_reactions",
        "type": "ChatAvailableReactions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_available_reactions_changed.html"
  },
  "chatEventBackgroundCustomEmojiChanged": {
    "type": "object",
    "desc": "The chat's custom emoji for reply background was changed.",
    "fields": [
      {
        "desc": "Previous identifier of the custom emoji; 0 if none.",
        "name": "old_background_custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "New identifier of the custom emoji; 0 if none.",
        "name": "new_background_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_background_custom_emoji_changed.html"
  },
  "chatEventDescriptionChanged": {
    "type": "object",
    "desc": "The chat description was changed.",
    "fields": [
      {
        "desc": "Previous chat description.",
        "name": "old_description",
        "type": "string"
      },
      {
        "desc": "New chat description.",
        "name": "new_description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_description_changed.html"
  },
  "chatEventForumTopicCreated": {
    "type": "object",
    "desc": "A new forum topic was created.",
    "fields": [
      {
        "desc": "Information about the topic.",
        "name": "topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_created.html"
  },
  "chatEventForumTopicDeleted": {
    "type": "object",
    "desc": "A forum topic was deleted.",
    "fields": [
      {
        "desc": "Information about the topic.",
        "name": "topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_deleted.html"
  },
  "chatEventForumTopicEdited": {
    "type": "object",
    "desc": "A forum topic was edited.",
    "fields": [
      {
        "desc": "Old information about the topic.",
        "name": "old_topic_info",
        "type": "forumTopicInfo"
      },
      {
        "desc": "New information about the topic.",
        "name": "new_topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_edited.html"
  },
  "chatEventForumTopicPinned": {
    "type": "object",
    "desc": "A pinned forum topic was changed.",
    "fields": [
      {
        "desc": "Information about the old pinned topic; may be null.",
        "name": "old_topic_info",
        "type": "forumTopicInfo"
      },
      {
        "desc": "Information about the new pinned topic; may be null.",
        "name": "new_topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_pinned.html"
  },
  "chatEventForumTopicToggleIsClosed": {
    "type": "object",
    "desc": "A forum topic was closed or reopened.",
    "fields": [
      {
        "desc": "New information about the topic.",
        "name": "topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_toggle_is_closed.html"
  },
  "chatEventForumTopicToggleIsHidden": {
    "type": "object",
    "desc": "The General forum topic was hidden or unhidden.",
    "fields": [
      {
        "desc": "New information about the topic.",
        "name": "topic_info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_forum_topic_toggle_is_hidden.html"
  },
  "chatEventHasAggressiveAntiSpamEnabledToggled": {
    "type": "object",
    "desc": "The has_aggressive_anti_spam_enabled setting of a supergroup was toggled.",
    "fields": [
      {
        "desc": "New value of has_aggressive_anti_spam_enabled.",
        "name": "has_aggressive_anti_spam_enabled",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_has_aggressive_anti_spam_enabled_toggled.html"
  },
  "chatEventHasProtectedContentToggled": {
    "type": "object",
    "desc": "The has_protected_content setting of a channel was toggled.",
    "fields": [
      {
        "desc": "New value of has_protected_content.",
        "name": "has_protected_content",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_has_protected_content_toggled.html"
  },
  "chatEventInviteLinkDeleted": {
    "type": "object",
    "desc": "A revoked chat invite link was deleted.",
    "fields": [
      {
        "desc": "The invite link.",
        "name": "invite_link",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_invite_link_deleted.html"
  },
  "chatEventInviteLinkEdited": {
    "type": "object",
    "desc": "A chat invite link was edited.",
    "fields": [
      {
        "desc": "Previous information about the invite link.",
        "name": "old_invite_link",
        "type": "chatInviteLink"
      },
      {
        "desc": "New information about the invite link.",
        "name": "new_invite_link",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_invite_link_edited.html"
  },
  "chatEventInviteLinkRevoked": {
    "type": "object",
    "desc": "A chat invite link was revoked.",
    "fields": [
      {
        "desc": "The invite link.",
        "name": "invite_link",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_invite_link_revoked.html"
  },
  "chatEventInvitesToggled": {
    "type": "object",
    "desc": "The can_invite_users permission of a supergroup chat was toggled.",
    "fields": [
      {
        "desc": "New value of can_invite_users permission.",
        "name": "can_invite_users",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_invites_toggled.html"
  },
  "chatEventIsAllHistoryAvailableToggled": {
    "type": "object",
    "desc": "The is_all_history_available setting of a supergroup was toggled.",
    "fields": [
      {
        "desc": "New value of is_all_history_available.",
        "name": "is_all_history_available",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_is_all_history_available_toggled.html"
  },
  "chatEventIsForumToggled": {
    "type": "object",
    "desc": "The is_forum setting of a channel was toggled.",
    "fields": [
      {
        "desc": "New value of is_forum.",
        "name": "is_forum",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_is_forum_toggled.html"
  },
  "chatEventLinkedChatChanged": {
    "type": "object",
    "desc": "The linked chat of a supergroup was changed.",
    "fields": [
      {
        "desc": "Previous supergroup linked chat identifier.",
        "name": "old_linked_chat_id",
        "type": "string"
      },
      {
        "desc": "New supergroup linked chat identifier.",
        "name": "new_linked_chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_linked_chat_changed.html"
  },
  "chatEventLocationChanged": {
    "type": "object",
    "desc": "The supergroup location was changed.",
    "fields": [
      {
        "desc": "Previous location; may be null.",
        "name": "old_location",
        "type": "chatLocation"
      },
      {
        "desc": "New location; may be null.",
        "name": "new_location",
        "type": "chatLocation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_location_changed.html"
  },
  "chatEventMemberInvited": {
    "type": "object",
    "desc": "A new chat member was invited.",
    "fields": [
      {
        "desc": "New member user identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "New member status.",
        "name": "status",
        "type": "ChatMemberStatus"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_invited.html"
  },
  "chatEventMemberJoined": {
    "type": "object",
    "desc": "A new member joined the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_joined.html"
  },
  "chatEventMemberJoinedByInviteLink": {
    "type": "object",
    "desc": "A new member joined the chat via an invite link.",
    "fields": [
      {
        "desc": "Invite link used to join the chat.",
        "name": "invite_link",
        "type": "chatInviteLink"
      },
      {
        "desc": "True, if the user has joined the chat using an invite link for a chat folder.",
        "name": "via_chat_folder_invite_link",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_joined_by_invite_link.html"
  },
  "chatEventMemberJoinedByRequest": {
    "type": "object",
    "desc": "A new member was accepted to the chat by an administrator.",
    "fields": [
      {
        "desc": "User identifier of the chat administrator, approved user join request.",
        "name": "approver_user_id",
        "type": "string"
      },
      {
        "desc": "Invite link used to join the chat; may be null.",
        "name": "invite_link",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_joined_by_request.html"
  },
  "chatEventMemberLeft": {
    "type": "object",
    "desc": "A member left the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_left.html"
  },
  "chatEventMemberPromoted": {
    "type": "object",
    "desc": "A chat member has gained/lost administrator status, or the list of their administrator privileges has changed.",
    "fields": [
      {
        "desc": "Affected chat member user identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Previous status of the chat member.",
        "name": "old_status",
        "type": "ChatMemberStatus"
      },
      {
        "desc": "New status of the chat member.",
        "name": "new_status",
        "type": "ChatMemberStatus"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_promoted.html"
  },
  "chatEventMemberRestricted": {
    "type": "object",
    "desc": "A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed.",
    "fields": [
      {
        "desc": "Affected chat member identifier.",
        "name": "member_id",
        "type": "MessageSender"
      },
      {
        "desc": "Previous status of the chat member.",
        "name": "old_status",
        "type": "ChatMemberStatus"
      },
      {
        "desc": "New status of the chat member.",
        "name": "new_status",
        "type": "ChatMemberStatus"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_member_restricted.html"
  },
  "chatEventMessageAutoDeleteTimeChanged": {
    "type": "object",
    "desc": "The message auto-delete timer was changed.",
    "fields": [
      {
        "desc": "Previous value of message_auto_delete_time.",
        "name": "old_message_auto_delete_time",
        "type": "number"
      },
      {
        "desc": "New value of message_auto_delete_time.",
        "name": "new_message_auto_delete_time",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_auto_delete_time_changed.html"
  },
  "chatEventMessageDeleted": {
    "type": "object",
    "desc": "A message was deleted.",
    "fields": [
      {
        "desc": "Deleted message.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "True, if the message deletion can be reported via reportSupergroupAntiSpamFalsePositive.",
        "name": "can_report_anti_spam_false_positive",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_deleted.html"
  },
  "chatEventMessageEdited": {
    "type": "object",
    "desc": "A message was edited.",
    "fields": [
      {
        "desc": "The original message before the edit.",
        "name": "old_message",
        "type": "message"
      },
      {
        "desc": "The message after it was edited.",
        "name": "new_message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_edited.html"
  },
  "chatEventMessagePinned": {
    "type": "object",
    "desc": "A message was pinned.",
    "fields": [
      {
        "desc": "Pinned message.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_pinned.html"
  },
  "chatEventMessageUnpinned": {
    "type": "object",
    "desc": "A message was unpinned.",
    "fields": [
      {
        "desc": "Unpinned message.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_message_unpinned.html"
  },
  "chatEventPermissionsChanged": {
    "type": "object",
    "desc": "The chat permissions were changed.",
    "fields": [
      {
        "desc": "Previous chat permissions.",
        "name": "old_permissions",
        "type": "chatPermissions"
      },
      {
        "desc": "New chat permissions.",
        "name": "new_permissions",
        "type": "chatPermissions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_permissions_changed.html"
  },
  "chatEventPhotoChanged": {
    "type": "object",
    "desc": "The chat photo was changed.",
    "fields": [
      {
        "desc": "Previous chat photo value; may be null.",
        "name": "old_photo",
        "type": "chatPhoto"
      },
      {
        "desc": "New chat photo value; may be null.",
        "name": "new_photo",
        "type": "chatPhoto"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_photo_changed.html"
  },
  "chatEventPollStopped": {
    "type": "object",
    "desc": "A poll in a message was stopped.",
    "fields": [
      {
        "desc": "The message with the poll.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_poll_stopped.html"
  },
  "chatEventSignMessagesToggled": {
    "type": "object",
    "desc": "The sign_messages setting of a channel was toggled.",
    "fields": [
      {
        "desc": "New value of sign_messages.",
        "name": "sign_messages",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_sign_messages_toggled.html"
  },
  "chatEventSlowModeDelayChanged": {
    "type": "object",
    "desc": "The slow_mode_delay setting of a supergroup was changed.",
    "fields": [
      {
        "desc": "Previous value of slow_mode_delay, in seconds.",
        "name": "old_slow_mode_delay",
        "type": "number"
      },
      {
        "desc": "New value of slow_mode_delay, in seconds.",
        "name": "new_slow_mode_delay",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_slow_mode_delay_changed.html"
  },
  "chatEventStickerSetChanged": {
    "type": "object",
    "desc": "The supergroup sticker set was changed.",
    "fields": [
      {
        "desc": "Previous identifier of the chat sticker set; 0 if none.",
        "name": "old_sticker_set_id",
        "type": "string"
      },
      {
        "desc": "New identifier of the chat sticker set; 0 if none.",
        "name": "new_sticker_set_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_sticker_set_changed.html"
  },
  "chatEventTitleChanged": {
    "type": "object",
    "desc": "The chat title was changed.",
    "fields": [
      {
        "desc": "Previous chat title.",
        "name": "old_title",
        "type": "string"
      },
      {
        "desc": "New chat title.",
        "name": "new_title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_title_changed.html"
  },
  "chatEventUsernameChanged": {
    "type": "object",
    "desc": "The chat editable username was changed.",
    "fields": [
      {
        "desc": "Previous chat username.",
        "name": "old_username",
        "type": "string"
      },
      {
        "desc": "New chat username.",
        "name": "new_username",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_username_changed.html"
  },
  "chatEventVideoChatCreated": {
    "type": "object",
    "desc": "A video chat was created.",
    "fields": [
      {
        "desc": "Identifier of the video chat. The video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_video_chat_created.html"
  },
  "chatEventVideoChatEnded": {
    "type": "object",
    "desc": "A video chat was ended.",
    "fields": [
      {
        "desc": "Identifier of the video chat. The video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_video_chat_ended.html"
  },
  "chatEventVideoChatMuteNewParticipantsToggled": {
    "type": "object",
    "desc": "The mute_new_participants setting of a video chat was toggled.",
    "fields": [
      {
        "desc": "New value of the mute_new_participants setting.",
        "name": "mute_new_participants",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_video_chat_mute_new_participants_toggled.html"
  },
  "chatEventVideoChatParticipantIsMutedToggled": {
    "type": "object",
    "desc": "A video chat participant was muted or unmuted.",
    "fields": [
      {
        "desc": "Identifier of the affected group call participant.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "New value of is_muted.",
        "name": "is_muted",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_video_chat_participant_is_muted_toggled.html"
  },
  "chatEventVideoChatParticipantVolumeLevelChanged": {
    "type": "object",
    "desc": "A video chat participant volume level was changed.",
    "fields": [
      {
        "desc": "Identifier of the affected group call participant.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "New value of volume_level; 1-20000 in hundreds of percents.",
        "name": "volume_level",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_video_chat_participant_volume_level_changed.html"
  },
  "ChatList": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a list of chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_list.html"
  },
  "chatListArchive": {
    "type": "object",
    "desc": "A list of chats usually located at the top of the main chat list. Unmuted chats are automatically moved from the Archive to the Main chat list when a new message arrives.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_list_archive.html"
  },
  "chatListFolder": {
    "type": "object",
    "desc": "A list of chats added to a chat folder.",
    "fields": [
      {
        "desc": "Chat folder identifier.",
        "name": "chat_folder_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_list_folder.html"
  },
  "chatListMain": {
    "type": "object",
    "desc": "A main list of chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_list_main.html"
  },
  "ChatMemberStatus": {
    "type": "object",
    "desc": "This class is an abstract base class. Provides information about the status of a member in a chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_member_status.html"
  },
  "chatMemberStatusAdministrator": {
    "type": "object",
    "desc": "The user is a member of the chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, ban unprivileged members, and manage video chats. In supergroups and channels, there are more detailed options for administrator privileges.",
    "fields": [
      {
        "desc": "A custom title of the administrator; 0-16 characters without emojis; applicable to supergroups only.",
        "name": "custom_title",
        "type": "string"
      },
      {
        "desc": "True, if the current user can edit the administrator privileges for the called user.",
        "name": "can_be_edited",
        "type": "bool"
      },
      {
        "desc": "Rights of the administrator.",
        "name": "rights",
        "type": "chatAdministratorRights"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_administrator.html"
  },
  "chatMemberStatusBanned": {
    "type": "object",
    "desc": "The user or the chat was banned (and hence is not a member of the chat). Implies the user can't return to the chat, view messages, or be used as a participant identifier to join a video chat of the chat.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Always 0 in basic groups.",
        "name": "banned_until_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_banned.html"
  },
  "chatMemberStatusCreator": {
    "type": "object",
    "desc": "The user is the owner of the chat and has all the administrator privileges.",
    "fields": [
      {
        "desc": "A custom title of the owner; 0-16 characters without emojis; applicable to supergroups only.",
        "name": "custom_title",
        "type": "string"
      },
      {
        "desc": "True, if the creator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only.",
        "name": "is_anonymous",
        "type": "bool"
      },
      {
        "desc": "True, if the user is a member of the chat.",
        "name": "is_member",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_creator.html"
  },
  "chatMemberStatusLeft": {
    "type": "object",
    "desc": "The user or the chat is not a chat member.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_left.html"
  },
  "chatMemberStatusMember": {
    "type": "object",
    "desc": "The user is a member of the chat, without any additional privileges or restrictions.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_member.html"
  },
  "chatMemberStatusRestricted": {
    "type": "object",
    "desc": "The user is under certain restrictions in the chat. Not supported in basic groups and channels.",
    "fields": [
      {
        "desc": "True, if the user is a member of the chat.",
        "name": "is_member",
        "type": "bool"
      },
      {
        "desc": "Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever.",
        "name": "restricted_until_date",
        "type": "number"
      },
      {
        "desc": "User permissions in the chat.",
        "name": "permissions",
        "type": "chatPermissions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member_status_restricted.html"
  },
  "ChatMembersFilter": {
    "type": "object",
    "desc": "This class is an abstract base class. Specifies the kind of chat members to return in searchChatMembers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_members_filter.html"
  },
  "chatMembersFilterAdministrators": {
    "type": "object",
    "desc": "Returns the owner and administrators.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_administrators.html"
  },
  "chatMembersFilterBanned": {
    "type": "object",
    "desc": "Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_banned.html"
  },
  "chatMembersFilterBots": {
    "type": "object",
    "desc": "Returns bot members of the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_bots.html"
  },
  "chatMembersFilterContacts": {
    "type": "object",
    "desc": "Returns contacts of the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_contacts.html"
  },
  "chatMembersFilterMembers": {
    "type": "object",
    "desc": "Returns all chat members, including restricted chat members.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_members.html"
  },
  "chatMembersFilterMention": {
    "type": "object",
    "desc": "Returns users which can be mentioned in the chat.",
    "fields": [
      {
        "desc": "If non-zero, the identifier of the current message thread.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_mention.html"
  },
  "chatMembersFilterRestricted": {
    "type": "object",
    "desc": "Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members_filter_restricted.html"
  },
  "ChatPhotoStickerType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a sticker, which was used to create a chat photo.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_photo_sticker_type.html"
  },
  "chatPhotoStickerTypeCustomEmoji": {
    "type": "object",
    "desc": "Information about the custom emoji, which was used to create the chat photo.",
    "fields": [
      {
        "desc": "Identifier of the custom emoji.",
        "name": "custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo_sticker_type_custom_emoji.html"
  },
  "chatPhotoStickerTypeRegularOrMask": {
    "type": "object",
    "desc": "Information about the sticker, which was used to create the chat photo.",
    "fields": [
      {
        "desc": "Sticker set identifier.",
        "name": "sticker_set_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sticker in the set.",
        "name": "sticker_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo_sticker_type_regular_or_mask.html"
  },
  "ChatSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a reason why an external chat is shown in a chat list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_source.html"
  },
  "chatSourceMtprotoProxy": {
    "type": "object",
    "desc": "The chat is sponsored by the user's MTProxy server.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_source_mtproto_proxy.html"
  },
  "chatSourcePublicServiceAnnouncement": {
    "type": "object",
    "desc": "The chat contains a public service announcement.",
    "fields": [
      {
        "desc": "The type of the announcement.",
        "name": "type",
        "type": "string"
      },
      {
        "desc": "The text of the announcement.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_source_public_service_announcement.html"
  },
  "ChatStatistics": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains a detailed statistics about a chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_statistics.html"
  },
  "chatStatisticsChannel": {
    "type": "object",
    "desc": "A detailed statistics about a channel chat.",
    "fields": [
      {
        "desc": "A period to which the statistics applies.",
        "name": "period",
        "type": "dateRange"
      },
      {
        "desc": "Number of members in the chat.",
        "name": "member_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times the recently sent messages were viewed.",
        "name": "mean_message_view_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times the recently sent messages were shared.",
        "name": "mean_message_share_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times reactions were added to the recently sent messages.",
        "name": "mean_message_reaction_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times the recently sent stories were viewed.",
        "name": "mean_story_view_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times the recently sent stories were shared.",
        "name": "mean_story_share_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Mean number of times reactions were added to the recently sent stories.",
        "name": "mean_story_reaction_count",
        "type": "statisticalValue"
      },
      {
        "desc": "A percentage of users with enabled notifications for the chat; 0-100.",
        "name": "enabled_notifications_percentage",
        "type": "double"
      },
      {
        "desc": "A graph containing number of members in the chat.",
        "name": "member_count_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of members joined and left the chat.",
        "name": "join_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of members muted and unmuted the chat.",
        "name": "mute_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of message views in a given hour in the last two weeks.",
        "name": "view_count_by_hour_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of message views per source.",
        "name": "view_count_by_source_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of new member joins per source.",
        "name": "join_by_source_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of users viewed chat messages per language.",
        "name": "language_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of chat message views and shares.",
        "name": "message_interaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of reactions on messages.",
        "name": "message_reaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of story views and shares.",
        "name": "story_interaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of reactions on stories.",
        "name": "story_reaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of views of associated with the chat instant views.",
        "name": "instant_view_interaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "Detailed statistics about number of views and shares of recently sent messages and stories.",
        "name": "recent_interactions",
        "type": "chatStatisticsInteractionInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_channel.html"
  },
  "chatStatisticsSupergroup": {
    "type": "object",
    "desc": "A detailed statistics about a supergroup chat.",
    "fields": [
      {
        "desc": "A period to which the statistics applies.",
        "name": "period",
        "type": "dateRange"
      },
      {
        "desc": "Number of members in the chat.",
        "name": "member_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Number of messages sent to the chat.",
        "name": "message_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Number of users who viewed messages in the chat.",
        "name": "viewer_count",
        "type": "statisticalValue"
      },
      {
        "desc": "Number of users who sent messages to the chat.",
        "name": "sender_count",
        "type": "statisticalValue"
      },
      {
        "desc": "A graph containing number of members in the chat.",
        "name": "member_count_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of members joined and left the chat.",
        "name": "join_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of new member joins per source.",
        "name": "join_by_source_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing distribution of active users per language.",
        "name": "language_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing distribution of sent messages by content type.",
        "name": "message_content_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of different actions in the chat.",
        "name": "action_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing distribution of message views per hour.",
        "name": "day_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing distribution of message views per day of week.",
        "name": "week_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "List of users sent most messages in the last week.",
        "name": "top_senders",
        "type": "chatStatisticsMessageSenderInfo"
      },
      {
        "desc": "List of most active administrators in the last week.",
        "name": "top_administrators",
        "type": "chatStatisticsAdministratorActionsInfo"
      },
      {
        "desc": "List of most active inviters of new members in the last week.",
        "name": "top_inviters",
        "type": "chatStatisticsInviterInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_supergroup.html"
  },
  "ChatStatisticsObjectType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of an object, for which statistics are provided.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_statistics_object_type.html"
  },
  "chatStatisticsObjectTypeMessage": {
    "type": "object",
    "desc": "Describes a message sent in the chat.",
    "fields": [
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_object_type_message.html"
  },
  "chatStatisticsObjectTypeStory": {
    "type": "object",
    "desc": "Describes a story sent by the chat.",
    "fields": [
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_object_type_story.html"
  },
  "ChatType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_chat_type.html"
  },
  "chatTypeBasicGroup": {
    "type": "object",
    "desc": "A basic group (a chat with 0-200 other users).",
    "fields": [
      {
        "desc": "Basic group identifier.",
        "name": "basic_group_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_basic_group.html"
  },
  "chatTypePrivate": {
    "type": "object",
    "desc": "An ordinary chat with a user.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_private.html"
  },
  "chatTypeSecret": {
    "type": "object",
    "desc": "A secret chat with a user.",
    "fields": [
      {
        "desc": "Secret chat identifier.",
        "name": "secret_chat_id",
        "type": "number"
      },
      {
        "desc": "User identifier of the other user in the secret chat.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_secret.html"
  },
  "chatTypeSupergroup": {
    "type": "object",
    "desc": "A supergroup or channel (with unlimited members).",
    "fields": [
      {
        "desc": "Supergroup or channel identifier.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "True, if the supergroup is a channel.",
        "name": "is_channel",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_type_supergroup.html"
  },
  "CheckChatUsernameResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents result of checking whether a username can be set for a chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_check_chat_username_result.html"
  },
  "checkChatUsernameResultOk": {
    "type": "object",
    "desc": "The username can be set.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_ok.html"
  },
  "checkChatUsernameResultPublicChatsTooMany": {
    "type": "object",
    "desc": "The user has too many chats with username, one of them must be made private first.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_public_chats_too_many.html"
  },
  "checkChatUsernameResultPublicGroupsUnavailable": {
    "type": "object",
    "desc": "The user can't be a member of a public supergroup.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_public_groups_unavailable.html"
  },
  "checkChatUsernameResultUsernameInvalid": {
    "type": "object",
    "desc": "The username is invalid.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_username_invalid.html"
  },
  "checkChatUsernameResultUsernameOccupied": {
    "type": "object",
    "desc": "The username is occupied.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_username_occupied.html"
  },
  "checkChatUsernameResultUsernamePurchasable": {
    "type": "object",
    "desc": "The username can be purchased at fragment.com.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_chat_username_result_username_purchasable.html"
  },
  "CheckStickerSetNameResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents result of checking whether a name can be used for a new sticker set.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_check_sticker_set_name_result.html"
  },
  "checkStickerSetNameResultNameInvalid": {
    "type": "object",
    "desc": "The name is invalid.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_sticker_set_name_result_name_invalid.html"
  },
  "checkStickerSetNameResultNameOccupied": {
    "type": "object",
    "desc": "The name is occupied.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_sticker_set_name_result_name_occupied.html"
  },
  "checkStickerSetNameResultOk": {
    "type": "object",
    "desc": "The name can be set.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1check_sticker_set_name_result_ok.html"
  },
  "ConnectionState": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the current state of the connection to Telegram servers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_connection_state.html"
  },
  "connectionStateConnecting": {
    "type": "object",
    "desc": "Establishing a connection to the Telegram servers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_connecting.html"
  },
  "connectionStateConnectingToProxy": {
    "type": "object",
    "desc": "Establishing a connection with a proxy server.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_connecting_to_proxy.html"
  },
  "connectionStateReady": {
    "type": "object",
    "desc": "There is a working connection to the Telegram servers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_ready.html"
  },
  "connectionStateUpdating": {
    "type": "object",
    "desc": "Downloading data supposed to be received while the application was offline.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_updating.html"
  },
  "connectionStateWaitingForNetwork": {
    "type": "object",
    "desc": "Waiting for the network to become available. Use setNetworkType to change the available network type.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connection_state_waiting_for_network.html"
  },
  "DeviceToken": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a data needed to subscribe for push notifications through registerDevice method. To use specific push notification service, the correct application platform must be specified and a valid server authentication data must be uploaded at https://my.telegram.org.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_device_token.html"
  },
  "deviceTokenApplePush": {
    "type": "object",
    "desc": "A token for Apple Push Notification service.",
    "fields": [
      {
        "desc": "Device token; may be empty to deregister a device.",
        "name": "device_token",
        "type": "string"
      },
      {
        "desc": "True, if App Sandbox is enabled.",
        "name": "is_app_sandbox",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_apple_push.html"
  },
  "deviceTokenApplePushVoIP": {
    "type": "object",
    "desc": "A token for Apple Push Notification service VoIP notifications.",
    "fields": [
      {
        "desc": "Device token; may be empty to deregister a device.",
        "name": "device_token",
        "type": "string"
      },
      {
        "desc": "True, if App Sandbox is enabled.",
        "name": "is_app_sandbox",
        "type": "bool"
      },
      {
        "desc": "True, if push notifications must be additionally encrypted.",
        "name": "encrypt",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_apple_push_vo_i_p.html"
  },
  "deviceTokenBlackBerryPush": {
    "type": "object",
    "desc": "A token for BlackBerry Push Service.",
    "fields": [
      {
        "desc": "Token; may be empty to deregister a device.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_black_berry_push.html"
  },
  "deviceTokenFirebaseCloudMessaging": {
    "type": "object",
    "desc": "A token for Firebase Cloud Messaging.",
    "fields": [
      {
        "desc": "Device registration token; may be empty to deregister a device.",
        "name": "token",
        "type": "string"
      },
      {
        "desc": "True, if push notifications must be additionally encrypted.",
        "name": "encrypt",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_firebase_cloud_messaging.html"
  },
  "deviceTokenHuaweiPush": {
    "type": "object",
    "desc": "A token for HUAWEI Push Service.",
    "fields": [
      {
        "desc": "Device registration token; may be empty to deregister a device.",
        "name": "token",
        "type": "string"
      },
      {
        "desc": "True, if push notifications must be additionally encrypted.",
        "name": "encrypt",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_huawei_push.html"
  },
  "deviceTokenMicrosoftPush": {
    "type": "object",
    "desc": "A token for Microsoft Push Notification Service.",
    "fields": [
      {
        "desc": "Push notification channel URI; may be empty to deregister a device.",
        "name": "channel_uri",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_microsoft_push.html"
  },
  "deviceTokenMicrosoftPushVoIP": {
    "type": "object",
    "desc": "A token for Microsoft Push Notification Service VoIP channel.",
    "fields": [
      {
        "desc": "Push notification channel URI; may be empty to deregister a device.",
        "name": "channel_uri",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_microsoft_push_vo_i_p.html"
  },
  "deviceTokenSimplePush": {
    "type": "object",
    "desc": "A token for Simple Push API for Firefox OS.",
    "fields": [
      {
        "desc": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device.",
        "name": "endpoint",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_simple_push.html"
  },
  "deviceTokenTizenPush": {
    "type": "object",
    "desc": "A token for Tizen Push Service.",
    "fields": [
      {
        "desc": "Push service registration identifier; may be empty to deregister a device.",
        "name": "reg_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_tizen_push.html"
  },
  "deviceTokenUbuntuPush": {
    "type": "object",
    "desc": "A token for Ubuntu Push Client service.",
    "fields": [
      {
        "desc": "Token; may be empty to deregister a device.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_ubuntu_push.html"
  },
  "deviceTokenWebPush": {
    "type": "object",
    "desc": "A token for web Push API.",
    "fields": [
      {
        "desc": "Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device.",
        "name": "endpoint",
        "type": "string"
      },
      {
        "desc": "Base64url-encoded P-256 elliptic curve Diffie-Hellman public key.",
        "name": "p256dh_base64url",
        "type": "string"
      },
      {
        "desc": "Base64url-encoded authentication secret.",
        "name": "auth_base64url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_web_push.html"
  },
  "deviceTokenWindowsPush": {
    "type": "object",
    "desc": "A token for Windows Push Notification Services.",
    "fields": [
      {
        "desc": "The access token that will be used to send notifications; may be empty to deregister a device.",
        "name": "access_token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1device_token_windows_push.html"
  },
  "DiceStickers": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains animated stickers which must be used for dice animation rendering.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_dice_stickers.html"
  },
  "diceStickersRegular": {
    "type": "object",
    "desc": "A regular animated sticker.",
    "fields": [
      {
        "desc": "The animated sticker with the dice animation.",
        "name": "sticker",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1dice_stickers_regular.html"
  },
  "diceStickersSlotMachine": {
    "type": "object",
    "desc": "Animated stickers to be combined into a slot machine.",
    "fields": [
      {
        "desc": "The animated sticker with the slot machine background. The background animation must start playing after all reel animations finish.",
        "name": "background",
        "type": "sticker"
      },
      {
        "desc": "The animated sticker with the lever animation. The lever animation must play once in the initial dice state.",
        "name": "lever",
        "type": "sticker"
      },
      {
        "desc": "The animated sticker with the left reel.",
        "name": "left_reel",
        "type": "sticker"
      },
      {
        "desc": "The animated sticker with the center reel.",
        "name": "center_reel",
        "type": "sticker"
      },
      {
        "desc": "The animated sticker with the right reel.",
        "name": "right_reel",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1dice_stickers_slot_machine.html"
  },
  "EmailAddressAuthentication": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains authentication data for a email address.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_email_address_authentication.html"
  },
  "emailAddressAuthenticationAppleId": {
    "type": "object",
    "desc": "An authentication token received through Apple ID.",
    "fields": [
      {
        "desc": "The token.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_authentication_apple_id.html"
  },
  "emailAddressAuthenticationCode": {
    "type": "object",
    "desc": "An authentication code delivered to a user's email address.",
    "fields": [
      {
        "desc": "The code.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_authentication_code.html"
  },
  "emailAddressAuthenticationGoogleId": {
    "type": "object",
    "desc": "An authentication token received through Google ID.",
    "fields": [
      {
        "desc": "The token.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_authentication_google_id.html"
  },
  "EmailAddressResetState": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes reset state of a email address.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_email_address_reset_state.html"
  },
  "emailAddressResetStateAvailable": {
    "type": "object",
    "desc": "Email address can be reset after the given period. Call resetAuthenticationEmailAddress to reset it and allow the user to authorize with a code sent to the user's phone number.",
    "fields": [
      {
        "desc": "Time required to wait before the email address can be reset; 0 if the user is subscribed to Telegram Premium.",
        "name": "wait_period",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_reset_state_available.html"
  },
  "emailAddressResetStatePending": {
    "type": "object",
    "desc": "Email address reset has already been requested. Call resetAuthenticationEmailAddress to check whether immediate reset is possible.",
    "fields": [
      {
        "desc": "Left time before the email address will be reset, in seconds. updateAuthorizationState is not sent when this field changes.",
        "name": "reset_in",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_reset_state_pending.html"
  },
  "EmojiCategoryType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of an emoji category.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_emoji_category_type.html"
  },
  "emojiCategoryTypeChatPhoto": {
    "type": "object",
    "desc": "The category must be used for chat photo emoji selection.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_category_type_chat_photo.html"
  },
  "emojiCategoryTypeDefault": {
    "type": "object",
    "desc": "The category must be used by default.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_category_type_default.html"
  },
  "emojiCategoryTypeEmojiStatus": {
    "type": "object",
    "desc": "The category must be used for emoji status selection.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_category_type_emoji_status.html"
  },
  "FileType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the type of a file.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_file_type.html"
  },
  "fileTypeAnimation": {
    "type": "object",
    "desc": "The file is an animation.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_animation.html"
  },
  "fileTypeAudio": {
    "type": "object",
    "desc": "The file is an audio file.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_audio.html"
  },
  "fileTypeDocument": {
    "type": "object",
    "desc": "The file is a document.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_document.html"
  },
  "fileTypeNone": {
    "type": "object",
    "desc": "The data is not a file.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_none.html"
  },
  "fileTypeNotificationSound": {
    "type": "object",
    "desc": "The file is a notification sound.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_notification_sound.html"
  },
  "fileTypePhoto": {
    "type": "object",
    "desc": "The file is a photo.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_photo.html"
  },
  "fileTypePhotoStory": {
    "type": "object",
    "desc": "The file is a photo published as a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_photo_story.html"
  },
  "fileTypeProfilePhoto": {
    "type": "object",
    "desc": "The file is a profile photo.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_profile_photo.html"
  },
  "fileTypeSecret": {
    "type": "object",
    "desc": "The file was sent to a secret chat (the file type is not known to the server).",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_secret.html"
  },
  "fileTypeSecretThumbnail": {
    "type": "object",
    "desc": "The file is a thumbnail of a file from a secret chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_secret_thumbnail.html"
  },
  "fileTypeSecure": {
    "type": "object",
    "desc": "The file is a file from Secure storage used for storing Telegram Passport files.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_secure.html"
  },
  "fileTypeSticker": {
    "type": "object",
    "desc": "The file is a sticker.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_sticker.html"
  },
  "fileTypeThumbnail": {
    "type": "object",
    "desc": "The file is a thumbnail of another file.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_thumbnail.html"
  },
  "fileTypeUnknown": {
    "type": "object",
    "desc": "The file type is not yet known.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_unknown.html"
  },
  "fileTypeVideo": {
    "type": "object",
    "desc": "The file is a video.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_video.html"
  },
  "fileTypeVideoNote": {
    "type": "object",
    "desc": "The file is a video note.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_video_note.html"
  },
  "fileTypeVideoStory": {
    "type": "object",
    "desc": "The file is a video published as a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_video_story.html"
  },
  "fileTypeVoiceNote": {
    "type": "object",
    "desc": "The file is a voice note.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_voice_note.html"
  },
  "fileTypeWallpaper": {
    "type": "object",
    "desc": "The file is a wallpaper or a background pattern.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_type_wallpaper.html"
  },
  "FirebaseAuthenticationSettings": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains settings for Firebase Authentication in the official applications.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_firebase_authentication_settings.html"
  },
  "firebaseAuthenticationSettingsAndroid": {
    "type": "object",
    "desc": "Settings for Firebase Authentication in the official Android application.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1firebase_authentication_settings_android.html"
  },
  "firebaseAuthenticationSettingsIos": {
    "type": "object",
    "desc": "Settings for Firebase Authentication in the official iOS application.",
    "fields": [
      {
        "desc": "Device token from Apple Push Notification service.",
        "name": "device_token",
        "type": "string"
      },
      {
        "desc": "True, if App Sandbox is enabled.",
        "name": "is_app_sandbox",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1firebase_authentication_settings_ios.html"
  },
  "GroupCallVideoQuality": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the quality of a group call video.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_group_call_video_quality.html"
  },
  "groupCallVideoQualityFull": {
    "type": "object",
    "desc": "The best available video quality.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_video_quality_full.html"
  },
  "groupCallVideoQualityMedium": {
    "type": "object",
    "desc": "The medium video quality.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_video_quality_medium.html"
  },
  "groupCallVideoQualityThumbnail": {
    "type": "object",
    "desc": "The worst available video quality.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_video_quality_thumbnail.html"
  },
  "InlineKeyboardButtonType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of an inline keyboard button.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_inline_keyboard_button_type.html"
  },
  "inlineKeyboardButtonTypeBuy": {
    "type": "object",
    "desc": "A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_buy.html"
  },
  "inlineKeyboardButtonTypeCallback": {
    "type": "object",
    "desc": "A button that sends a callback query to a bot.",
    "fields": [
      {
        "desc": "Data to be sent to the bot via a callback query.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_callback.html"
  },
  "inlineKeyboardButtonTypeCallbackGame": {
    "type": "object",
    "desc": "A button with a game that sends a callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_callback_game.html"
  },
  "inlineKeyboardButtonTypeCallbackWithPassword": {
    "type": "object",
    "desc": "A button that asks for the 2-step verification password of the current user and then sends a callback query to a bot.",
    "fields": [
      {
        "desc": "Data to be sent to the bot via a callback query.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_callback_with_password.html"
  },
  "inlineKeyboardButtonTypeLoginUrl": {
    "type": "object",
    "desc": "A button that opens a specified URL and automatically authorize the current user by calling getLoginUrlInfo.",
    "fields": [
      {
        "desc": "An HTTP URL to pass to getLoginUrlInfo.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Unique button identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "If non-empty, new text of the button in forwarded messages.",
        "name": "forward_text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_login_url.html"
  },
  "inlineKeyboardButtonTypeSwitchInline": {
    "type": "object",
    "desc": "A button that forces an inline query to the bot to be inserted in the input field.",
    "fields": [
      {
        "desc": "Inline query to be sent to the bot.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Target chat from which to send the inline query.",
        "name": "target_chat",
        "type": "TargetChat"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_switch_inline.html"
  },
  "inlineKeyboardButtonTypeUrl": {
    "type": "object",
    "desc": "A button that opens a specified URL.",
    "fields": [
      {
        "desc": "HTTP or tg:// URL to open.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_url.html"
  },
  "inlineKeyboardButtonTypeUser": {
    "type": "object",
    "desc": "A button with a user reference to be handled in the same way as textEntityTypeMentionName entities.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_user.html"
  },
  "inlineKeyboardButtonTypeWebApp": {
    "type": "object",
    "desc": "A button that opens a Web App by calling openWebApp.",
    "fields": [
      {
        "desc": "An HTTP URL to pass to openWebApp.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button_type_web_app.html"
  },
  "InlineQueryResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a single result of an inline query.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_inline_query_result.html"
  },
  "inlineQueryResultAnimation": {
    "type": "object",
    "desc": "Represents an animation file.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Animation file.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Animation title.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_animation.html"
  },
  "inlineQueryResultArticle": {
    "type": "object",
    "desc": "Represents a link to an article or web page.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "URL of the result, if it exists.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "True, if the URL must be not shown.",
        "name": "hide_url",
        "type": "bool"
      },
      {
        "desc": "Title of the result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A short description of the result.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Result thumbnail in JPEG format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_article.html"
  },
  "inlineQueryResultAudio": {
    "type": "object",
    "desc": "Represents an audio file.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Audio file.",
        "name": "audio",
        "type": "audio"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_audio.html"
  },
  "inlineQueryResultContact": {
    "type": "object",
    "desc": "Represents a user contact.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "A user contact.",
        "name": "contact",
        "type": "contact"
      },
      {
        "desc": "Result thumbnail in JPEG format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_contact.html"
  },
  "inlineQueryResultDocument": {
    "type": "object",
    "desc": "Represents a document.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Document.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "Document title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Document description.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_document.html"
  },
  "inlineQueryResultGame": {
    "type": "object",
    "desc": "Represents information about a game.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Game result.",
        "name": "game",
        "type": "game"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_game.html"
  },
  "inlineQueryResultLocation": {
    "type": "object",
    "desc": "Represents a point on the map.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Location result.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Title of the result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Result thumbnail in JPEG format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_location.html"
  },
  "inlineQueryResultPhoto": {
    "type": "object",
    "desc": "Represents a photo.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Photo.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Title of the result, if known.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A short description of the result, if known.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_photo.html"
  },
  "inlineQueryResultSticker": {
    "type": "object",
    "desc": "Represents a sticker.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Sticker.",
        "name": "sticker",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_sticker.html"
  },
  "inlineQueryResultVenue": {
    "type": "object",
    "desc": "Represents information about a venue.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Venue result.",
        "name": "venue",
        "type": "venue"
      },
      {
        "desc": "Result thumbnail in JPEG format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_venue.html"
  },
  "inlineQueryResultVideo": {
    "type": "object",
    "desc": "Represents a video.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Video.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Title of the video.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Description of the video.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_video.html"
  },
  "inlineQueryResultVoiceNote": {
    "type": "object",
    "desc": "Represents a voice note.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Voice note.",
        "name": "voice_note",
        "type": "voiceNote"
      },
      {
        "desc": "Title of the voice note.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_result_voice_note.html"
  },
  "InlineQueryResultsButtonType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a type of a button in results of inline query.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_inline_query_results_button_type.html"
  },
  "inlineQueryResultsButtonTypeStartBot": {
    "type": "object",
    "desc": "Describes the button that opens a private chat with the bot and sends a start message to the bot with the given parameter.",
    "fields": [
      {
        "desc": "The parameter for the bot start message.",
        "name": "parameter",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_results_button_type_start_bot.html"
  },
  "inlineQueryResultsButtonTypeWebApp": {
    "type": "object",
    "desc": "Describes the button that opens a Web App by calling getWebAppUrl.",
    "fields": [
      {
        "desc": "An HTTP URL to pass to getWebAppUrl.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_results_button_type_web_app.html"
  },
  "InputBackground": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about background to set.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_background.html"
  },
  "inputBackgroundLocal": {
    "type": "object",
    "desc": "A background from a local file.",
    "fields": [
      {
        "desc": "Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file must be in JPEG format for wallpapers and in PNG format for patterns.",
        "name": "background",
        "type": "InputFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_background_local.html"
  },
  "inputBackgroundPrevious": {
    "type": "object",
    "desc": "A background previously set in the chat; for chat backgrounds only.",
    "fields": [
      {
        "desc": "Identifier of the message with the background.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_background_previous.html"
  },
  "inputBackgroundRemote": {
    "type": "object",
    "desc": "A background from the server.",
    "fields": [
      {
        "desc": "The background identifier.",
        "name": "background_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_background_remote.html"
  },
  "InputChatPhoto": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a photo to be set as a user profile or chat photo.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_chat_photo.html"
  },
  "inputChatPhotoAnimation": {
    "type": "object",
    "desc": "An animation in MPEG4 format; must be square, at most 10 seconds long, have width between 160 and 1280 and be at most 2MB in size.",
    "fields": [
      {
        "desc": "Animation to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed.",
        "name": "animation",
        "type": "InputFile"
      },
      {
        "desc": "Timestamp of the frame, which will be used as static chat photo.",
        "name": "main_frame_timestamp",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_chat_photo_animation.html"
  },
  "inputChatPhotoPrevious": {
    "type": "object",
    "desc": "A previously used profile photo of the current user.",
    "fields": [
      {
        "desc": "Identifier of the current user's profile photo to reuse.",
        "name": "chat_photo_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_chat_photo_previous.html"
  },
  "inputChatPhotoStatic": {
    "type": "object",
    "desc": "A static photo in JPEG format.",
    "fields": [
      {
        "desc": "Photo to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed.",
        "name": "photo",
        "type": "InputFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_chat_photo_static.html"
  },
  "inputChatPhotoSticker": {
    "type": "object",
    "desc": "A sticker on a custom background.",
    "fields": [
      {
        "desc": "Information about the sticker.",
        "name": "sticker",
        "type": "chatPhotoSticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_chat_photo_sticker.html"
  },
  "InputCredentials": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the payment method chosen by the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_credentials.html"
  },
  "inputCredentialsApplePay": {
    "type": "object",
    "desc": "Applies if a user enters new credentials using Apple Pay.",
    "fields": [
      {
        "desc": "JSON-encoded data with the credential identifier.",
        "name": "data",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_apple_pay.html"
  },
  "inputCredentialsGooglePay": {
    "type": "object",
    "desc": "Applies if a user enters new credentials using Google Pay.",
    "fields": [
      {
        "desc": "JSON-encoded data with the credential identifier.",
        "name": "data",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_google_pay.html"
  },
  "inputCredentialsNew": {
    "type": "object",
    "desc": "Applies if a user enters new credentials on a payment provider website.",
    "fields": [
      {
        "desc": "JSON-encoded data with the credential identifier from the payment provider.",
        "name": "data",
        "type": "string"
      },
      {
        "desc": "True, if the credential identifier can be saved on the server side.",
        "name": "allow_save",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_new.html"
  },
  "inputCredentialsSaved": {
    "type": "object",
    "desc": "Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password.",
    "fields": [
      {
        "desc": "Identifier of the saved credentials.",
        "name": "saved_credentials_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_credentials_saved.html"
  },
  "InputFile": {
    "type": "object",
    "desc": "This class is an abstract base class. Points to a file.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_file.html"
  },
  "inputFileGenerated": {
    "type": "object",
    "desc": "A file generated by the application.",
    "fields": [
      {
        "desc": "Local path to a file from which the file is generated; may be empty if there is no such file.",
        "name": "original_path",
        "type": "string"
      },
      {
        "desc": "String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage.",
        "name": "conversion",
        "type": "string"
      },
      {
        "desc": "Expected size of the generated file, in bytes; 0 if unknown.",
        "name": "expected_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_generated.html"
  },
  "inputFileId": {
    "type": "object",
    "desc": "A file defined by its unique identifier.",
    "fields": [
      {
        "desc": "Unique file identifier.",
        "name": "id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_id.html"
  },
  "inputFileLocal": {
    "type": "object",
    "desc": "A file defined by a local path.",
    "fields": [
      {
        "desc": "Local path to the file.",
        "name": "path",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_local.html"
  },
  "inputFileRemote": {
    "type": "object",
    "desc": "A file defined by its remote identifier. The remote identifier is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application.",
    "fields": [
      {
        "desc": "Remote file identifier.",
        "name": "id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_file_remote.html"
  },
  "InputInlineQueryResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a single result of an inline query; for bots only.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_inline_query_result.html"
  },
  "inputInlineQueryResultAnimation": {
    "type": "object",
    "desc": "Represents a link to an animated GIF or an animated (i.e., without sound) H.264/MPEG-4 AVC video.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the query result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "MIME type of the video thumbnail. If non-empty, must be one of \"image/jpeg\", \"image/gif\" and \"video/mp4\".",
        "name": "thumbnail_mime_type",
        "type": "string"
      },
      {
        "desc": "The URL of the video file (file size must not exceed 1MB).",
        "name": "video_url",
        "type": "string"
      },
      {
        "desc": "MIME type of the video file. Must be one of \"image/gif\" and \"video/mp4\".",
        "name": "video_mime_type",
        "type": "string"
      },
      {
        "desc": "Duration of the video, in seconds.",
        "name": "video_duration",
        "type": "number"
      },
      {
        "desc": "Width of the video.",
        "name": "video_width",
        "type": "number"
      },
      {
        "desc": "Height of the video.",
        "name": "video_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_animation.html"
  },
  "inputInlineQueryResultArticle": {
    "type": "object",
    "desc": "Represents a link to an article or web page.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "URL of the result, if it exists.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "True, if the URL must be not shown.",
        "name": "hide_url",
        "type": "bool"
      },
      {
        "desc": "Title of the result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A short description of the result.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "URL of the result thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "Thumbnail width, if known.",
        "name": "thumbnail_width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, if known.",
        "name": "thumbnail_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_article.html"
  },
  "inputInlineQueryResultAudio": {
    "type": "object",
    "desc": "Represents a link to an MP3 audio file.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the audio file.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Performer of the audio file.",
        "name": "performer",
        "type": "string"
      },
      {
        "desc": "The URL of the audio file.",
        "name": "audio_url",
        "type": "string"
      },
      {
        "desc": "Audio file duration, in seconds.",
        "name": "audio_duration",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_audio.html"
  },
  "inputInlineQueryResultContact": {
    "type": "object",
    "desc": "Represents a user contact.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "User contact.",
        "name": "contact",
        "type": "contact"
      },
      {
        "desc": "URL of the result thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "Thumbnail width, if known.",
        "name": "thumbnail_width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, if known.",
        "name": "thumbnail_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_contact.html"
  },
  "inputInlineQueryResultDocument": {
    "type": "object",
    "desc": "Represents a link to a file.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the resulting file.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Short description of the result, if known.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "URL of the file.",
        "name": "document_url",
        "type": "string"
      },
      {
        "desc": "MIME type of the file content; only \"application/pdf\" and \"application/zip\" are currently allowed.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "The URL of the file thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "Width of the thumbnail.",
        "name": "thumbnail_width",
        "type": "number"
      },
      {
        "desc": "Height of the thumbnail.",
        "name": "thumbnail_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_document.html"
  },
  "inputInlineQueryResultGame": {
    "type": "object",
    "desc": "Represents a game.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Short name of the game.",
        "name": "game_short_name",
        "type": "string"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_game.html"
  },
  "inputInlineQueryResultLocation": {
    "type": "object",
    "desc": "Represents a point on the map.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Location result.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Amount of time relative to the message sent time until the location can be updated, in seconds.",
        "name": "live_period",
        "type": "number"
      },
      {
        "desc": "Title of the result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "URL of the result thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "Thumbnail width, if known.",
        "name": "thumbnail_width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, if known.",
        "name": "thumbnail_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_location.html"
  },
  "inputInlineQueryResultPhoto": {
    "type": "object",
    "desc": "Represents link to a JPEG image.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the result, if known.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A short description of the result, if known.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "URL of the photo thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "The URL of the JPEG photo (photo size must not exceed 5MB).",
        "name": "photo_url",
        "type": "string"
      },
      {
        "desc": "Width of the photo.",
        "name": "photo_width",
        "type": "number"
      },
      {
        "desc": "Height of the photo.",
        "name": "photo_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_photo.html"
  },
  "inputInlineQueryResultSticker": {
    "type": "object",
    "desc": "Represents a link to a WEBP, TGS, or WEBM sticker.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "URL of the sticker thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed 5MB).",
        "name": "sticker_url",
        "type": "string"
      },
      {
        "desc": "Width of the sticker.",
        "name": "sticker_width",
        "type": "number"
      },
      {
        "desc": "Height of the sticker.",
        "name": "sticker_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_sticker.html"
  },
  "inputInlineQueryResultVenue": {
    "type": "object",
    "desc": "Represents information about a venue.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Venue result.",
        "name": "venue",
        "type": "venue"
      },
      {
        "desc": "URL of the result thumbnail, if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "Thumbnail width, if known.",
        "name": "thumbnail_width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, if known.",
        "name": "thumbnail_height",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_venue.html"
  },
  "inputInlineQueryResultVideo": {
    "type": "object",
    "desc": "Represents a link to a page containing an embedded video player or a video file.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the result.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A short description of the result, if known.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "The URL of the video thumbnail (JPEG), if it exists.",
        "name": "thumbnail_url",
        "type": "string"
      },
      {
        "desc": "URL of the embedded video player or video file.",
        "name": "video_url",
        "type": "string"
      },
      {
        "desc": "MIME type of the content of the video URL, only \"text/html\" or \"video/mp4\" are currently supported.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "Width of the video.",
        "name": "video_width",
        "type": "number"
      },
      {
        "desc": "Height of the video.",
        "name": "video_height",
        "type": "number"
      },
      {
        "desc": "Video duration, in seconds.",
        "name": "video_duration",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_video.html"
  },
  "inputInlineQueryResultVoiceNote": {
    "type": "object",
    "desc": "Represents a link to an opus-encoded audio file within an OGG container, single channel audio.",
    "fields": [
      {
        "desc": "Unique identifier of the query result.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the voice note.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "The URL of the voice note file.",
        "name": "voice_note_url",
        "type": "string"
      },
      {
        "desc": "Duration of the voice note, in seconds.",
        "name": "voice_note_duration",
        "type": "number"
      },
      {
        "desc": "The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      },
      {
        "desc": "The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact.",
        "name": "input_message_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_inline_query_result_voice_note.html"
  },
  "InputInvoice": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes an invoice to process.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_invoice.html"
  },
  "inputInvoiceMessage": {
    "type": "object",
    "desc": "An invoice from a message of the type messageInvoice.",
    "fields": [
      {
        "desc": "Chat identifier of the message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_invoice_message.html"
  },
  "inputInvoiceName": {
    "type": "object",
    "desc": "An invoice from a link of the type internalLinkTypeInvoice.",
    "fields": [
      {
        "desc": "Name of the invoice.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_invoice_name.html"
  },
  "inputInvoiceTelegram": {
    "type": "object",
    "desc": "An invoice for a payment toward Telegram; must not be used in the in-store apps.",
    "fields": [
      {
        "desc": "Transaction purpose.",
        "name": "purpose",
        "type": "TelegramPaymentPurpose"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_invoice_telegram.html"
  },
  "InputMessageContent": {
    "type": "object",
    "desc": "This class is an abstract base class. The content of a message to send.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_message_content.html"
  },
  "inputMessageAnimation": {
    "type": "object",
    "desc": "An animation message (GIF-style).",
    "fields": [
      {
        "desc": "Animation file to be sent.",
        "name": "animation",
        "type": "InputFile"
      },
      {
        "desc": "Animation thumbnail; pass null to skip thumbnail uploading.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "File identifiers of the stickers added to the animation, if applicable.",
        "name": "added_sticker_file_ids",
        "type": "number"
      },
      {
        "desc": "Duration of the animation, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Width of the animation; may be replaced by the server.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Height of the animation; may be replaced by the server.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Animation caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "True, if the animation preview must be covered by a spoiler animation; not supported in secret chats.",
        "name": "has_spoiler",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_animation.html"
  },
  "inputMessageAudio": {
    "type": "object",
    "desc": "An audio message.",
    "fields": [
      {
        "desc": "Audio file to be sent.",
        "name": "audio",
        "type": "InputFile"
      },
      {
        "desc": "Thumbnail of the cover for the album; pass null to skip thumbnail uploading.",
        "name": "album_cover_thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "Duration of the audio, in seconds; may be replaced by the server.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Title of the audio; 0-64 characters; may be replaced by the server.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Performer of the audio; 0-64 characters, may be replaced by the server.",
        "name": "performer",
        "type": "string"
      },
      {
        "desc": "Audio caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_audio.html"
  },
  "inputMessageContact": {
    "type": "object",
    "desc": "A message containing a user contact.",
    "fields": [
      {
        "desc": "Contact to send.",
        "name": "contact",
        "type": "contact"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_contact.html"
  },
  "inputMessageDice": {
    "type": "object",
    "desc": "A dice message.",
    "fields": [
      {
        "desc": "Emoji on which the dice throw animation is based.",
        "name": "emoji",
        "type": "string"
      },
      {
        "desc": "True, if the chat message draft must be deleted.",
        "name": "clear_draft",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_dice.html"
  },
  "inputMessageDocument": {
    "type": "object",
    "desc": "A document message (general file).",
    "fields": [
      {
        "desc": "Document to be sent.",
        "name": "document",
        "type": "InputFile"
      },
      {
        "desc": "Document thumbnail; pass null to skip thumbnail uploading.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "Pass true to disable automatic file type detection and send the document as a file. Always true for files sent to secret chats.",
        "name": "disable_content_type_detection",
        "type": "bool"
      },
      {
        "desc": "Document caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_document.html"
  },
  "inputMessageForwarded": {
    "type": "object",
    "desc": "A forwarded message.",
    "fields": [
      {
        "desc": "Identifier for the chat this forwarded message came from.",
        "name": "from_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message to forward. A message can be forwarded only if message.can_be_forwarded.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "True, if a game message is being shared from a launched game; applies only to game messages.",
        "name": "in_game_share",
        "type": "bool"
      },
      {
        "desc": "Options to be used to copy content of the message without reference to the original sender; pass null to forward the message as usual.",
        "name": "copy_options",
        "type": "messageCopyOptions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_forwarded.html"
  },
  "inputMessageGame": {
    "type": "object",
    "desc": "A message with a game; not supported for channels or secret chats.",
    "fields": [
      {
        "desc": "User identifier of the bot that owns the game.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Short name of the game.",
        "name": "game_short_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_game.html"
  },
  "inputMessageInvoice": {
    "type": "object",
    "desc": "A message with an invoice; can be used only by bots.",
    "fields": [
      {
        "desc": "Invoice.",
        "name": "invoice",
        "type": "invoice"
      },
      {
        "desc": "Product title; 1-32 characters.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Product description; 0-255 characters.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Product photo URL; optional.",
        "name": "photo_url",
        "type": "string"
      },
      {
        "desc": "Product photo size.",
        "name": "photo_size",
        "type": "number"
      },
      {
        "desc": "Product photo width.",
        "name": "photo_width",
        "type": "number"
      },
      {
        "desc": "Product photo height.",
        "name": "photo_height",
        "type": "number"
      },
      {
        "desc": "The invoice payload.",
        "name": "payload",
        "type": "bytes"
      },
      {
        "desc": "Payment provider token.",
        "name": "provider_token",
        "type": "string"
      },
      {
        "desc": "JSON-encoded data about the invoice, which will be shared with the payment provider.",
        "name": "provider_data",
        "type": "string"
      },
      {
        "desc": "Unique invoice bot deep link parameter for the generation of this invoice. If empty, it would be possible to pay directly from forwards of the invoice message.",
        "name": "start_parameter",
        "type": "string"
      },
      {
        "desc": "The content of extended media attached to the invoice. The content of the message to be sent. Must be one of the following types: inputMessagePhoto, inputMessageVideo.",
        "name": "extended_media_content",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_invoice.html"
  },
  "inputMessageLocation": {
    "type": "object",
    "desc": "A message with a location.",
    "fields": [
      {
        "desc": "Location to be sent.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Period for which the location can be updated, in seconds; must be between 60 and 86400 for a live location and 0 otherwise.",
        "name": "live_period",
        "type": "number"
      },
      {
        "desc": "For live locations, a direction in which the location moves, in degrees; 1-360. Pass 0 if unknown.",
        "name": "heading",
        "type": "number"
      },
      {
        "desc": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled. Can't be enabled in channels and Saved Messages.",
        "name": "proximity_alert_radius",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_location.html"
  },
  "inputMessagePhoto": {
    "type": "object",
    "desc": "A photo message.",
    "fields": [
      {
        "desc": "Photo to send. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20.",
        "name": "photo",
        "type": "InputFile"
      },
      {
        "desc": "Photo thumbnail to be sent; pass null to skip thumbnail uploading. The thumbnail is sent to the other party only in secret chats.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "File identifiers of the stickers added to the photo, if applicable.",
        "name": "added_sticker_file_ids",
        "type": "number"
      },
      {
        "desc": "Photo width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Photo height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Photo caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "Photo self-destruct type; pass null if none; private chats only.",
        "name": "self_destruct_type",
        "type": "MessageSelfDestructType"
      },
      {
        "desc": "True, if the photo preview must be covered by a spoiler animation; not supported in secret chats.",
        "name": "has_spoiler",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_photo.html"
  },
  "inputMessagePoll": {
    "type": "object",
    "desc": "A message with a poll. Polls can't be sent to secret chats. Polls can be sent only to a private chat with a bot.",
    "fields": [
      {
        "desc": "Poll question; 1-255 characters (up to 300 characters for bots).",
        "name": "question",
        "type": "string"
      },
      {
        "desc": "List of poll answer options, 2-10 strings 1-100 characters each.",
        "name": "options",
        "type": "string"
      },
      {
        "desc": "True, if the poll voters are anonymous. Non-anonymous polls can't be sent or forwarded to channels.",
        "name": "is_anonymous",
        "type": "bool"
      },
      {
        "desc": "Type of the poll.",
        "name": "type",
        "type": "PollType"
      },
      {
        "desc": "Amount of time the poll will be active after creation, in seconds; for bots only.",
        "name": "open_period",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the poll will automatically be closed; for bots only.",
        "name": "close_date",
        "type": "number"
      },
      {
        "desc": "True, if the poll needs to be sent already closed; for bots only.",
        "name": "is_closed",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_poll.html"
  },
  "inputMessageSticker": {
    "type": "object",
    "desc": "A sticker message.",
    "fields": [
      {
        "desc": "Sticker to be sent.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "Sticker thumbnail; pass null to skip thumbnail uploading.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "Sticker width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Sticker height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Emoji used to choose the sticker.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_sticker.html"
  },
  "inputMessageStory": {
    "type": "object",
    "desc": "A message with a forwarded story. Stories can't be sent to secret chats. A story can be forwarded only if story.can_be_forwarded.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_story.html"
  },
  "inputMessageText": {
    "type": "object",
    "desc": "A text message.",
    "fields": [
      {
        "desc": "Formatted text to be sent; 0-getOption(\"message_text_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities are allowed to be specified manually.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Options to be used for generation of a link preview; pass null to use default link preview options.",
        "name": "link_preview_options",
        "type": "linkPreviewOptions"
      },
      {
        "desc": "True, if a chat message draft must be deleted.",
        "name": "clear_draft",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_text.html"
  },
  "inputMessageVenue": {
    "type": "object",
    "desc": "A message with information about a venue.",
    "fields": [
      {
        "desc": "Venue to send.",
        "name": "venue",
        "type": "venue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_venue.html"
  },
  "inputMessageVideo": {
    "type": "object",
    "desc": "A video message.",
    "fields": [
      {
        "desc": "Video to be sent.",
        "name": "video",
        "type": "InputFile"
      },
      {
        "desc": "Video thumbnail; pass null to skip thumbnail uploading.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "File identifiers of the stickers added to the video, if applicable.",
        "name": "added_sticker_file_ids",
        "type": "number"
      },
      {
        "desc": "Duration of the video, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Video width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Video height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "True, if the video is supposed to be streamed.",
        "name": "supports_streaming",
        "type": "bool"
      },
      {
        "desc": "Video caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "Video self-destruct type; pass null if none; private chats only.",
        "name": "self_destruct_type",
        "type": "MessageSelfDestructType"
      },
      {
        "desc": "True, if the video preview must be covered by a spoiler animation; not supported in secret chats.",
        "name": "has_spoiler",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_video.html"
  },
  "inputMessageVideoNote": {
    "type": "object",
    "desc": "A video note message.",
    "fields": [
      {
        "desc": "Video note to be sent.",
        "name": "video_note",
        "type": "InputFile"
      },
      {
        "desc": "Video thumbnail; pass null to skip thumbnail uploading.",
        "name": "thumbnail",
        "type": "inputThumbnail"
      },
      {
        "desc": "Duration of the video, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Video width and height; must be positive and not greater than 640.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_video_note.html"
  },
  "inputMessageVoiceNote": {
    "type": "object",
    "desc": "A voice note message.",
    "fields": [
      {
        "desc": "Voice note to be sent.",
        "name": "voice_note",
        "type": "InputFile"
      },
      {
        "desc": "Duration of the voice note, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Waveform representation of the voice note in 5-bit format.",
        "name": "waveform",
        "type": "bytes"
      },
      {
        "desc": "Voice note caption; pass null to use an empty caption; 0-getOption(\"message_caption_length_max\") characters.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_voice_note.html"
  },
  "InputMessageReplyTo": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the message or the story to be replied.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_message_reply_to.html"
  },
  "inputMessageReplyToMessage": {
    "type": "object",
    "desc": "Describes a message to be replied.",
    "fields": [
      {
        "desc": "The identifier of the chat to which the message to be replied belongs; pass 0 if the message to be replied is in the same chat. Must always be 0 for replies in secret chats. A message can be replied in another chat or topic only if message.can_be_replied_in_another_chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the message to be replied in the same or the specified chat.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Quote from the message to be replied; pass null if none. Must always be null for replies in secret chats.",
        "name": "quote",
        "type": "inputTextQuote"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_reply_to_message.html"
  },
  "inputMessageReplyToStory": {
    "type": "object",
    "desc": "Describes a story to be replied.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story. Currently, stories can be replied only in the sender's chat.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_message_reply_to_story.html"
  },
  "InputPassportElement": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about a Telegram Passport element to be saved.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_passport_element.html"
  },
  "inputPassportElementAddress": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's address.",
    "fields": [
      {
        "desc": "The address to be saved.",
        "name": "address",
        "type": "address"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_address.html"
  },
  "inputPassportElementBankStatement": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's bank statement.",
    "fields": [
      {
        "desc": "The bank statement to be saved.",
        "name": "bank_statement",
        "type": "inputPersonalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_bank_statement.html"
  },
  "inputPassportElementDriverLicense": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's driver license.",
    "fields": [
      {
        "desc": "The driver license to be saved.",
        "name": "driver_license",
        "type": "inputIdentityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_driver_license.html"
  },
  "inputPassportElementEmailAddress": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's email address.",
    "fields": [
      {
        "desc": "The email address to be saved.",
        "name": "email_address",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_email_address.html"
  },
  "inputPassportElementIdentityCard": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's identity card.",
    "fields": [
      {
        "desc": "The identity card to be saved.",
        "name": "identity_card",
        "type": "inputIdentityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_identity_card.html"
  },
  "inputPassportElementInternalPassport": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's internal passport.",
    "fields": [
      {
        "desc": "The internal passport to be saved.",
        "name": "internal_passport",
        "type": "inputIdentityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_internal_passport.html"
  },
  "inputPassportElementPassport": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's passport.",
    "fields": [
      {
        "desc": "The passport to be saved.",
        "name": "passport",
        "type": "inputIdentityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_passport.html"
  },
  "inputPassportElementPassportRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's passport registration.",
    "fields": [
      {
        "desc": "The passport registration page to be saved.",
        "name": "passport_registration",
        "type": "inputPersonalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_passport_registration.html"
  },
  "inputPassportElementPersonalDetails": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's personal details.",
    "fields": [
      {
        "desc": "Personal details of the user.",
        "name": "personal_details",
        "type": "personalDetails"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_personal_details.html"
  },
  "inputPassportElementPhoneNumber": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's phone number.",
    "fields": [
      {
        "desc": "The phone number to be saved.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_phone_number.html"
  },
  "inputPassportElementRentalAgreement": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's rental agreement.",
    "fields": [
      {
        "desc": "The rental agreement to be saved.",
        "name": "rental_agreement",
        "type": "inputPersonalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_rental_agreement.html"
  },
  "inputPassportElementTemporaryRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's temporary registration.",
    "fields": [
      {
        "desc": "The temporary registration document to be saved.",
        "name": "temporary_registration",
        "type": "inputPersonalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_temporary_registration.html"
  },
  "inputPassportElementUtilityBill": {
    "type": "object",
    "desc": "A Telegram Passport element to be saved containing the user's utility bill.",
    "fields": [
      {
        "desc": "The utility bill to be saved.",
        "name": "utility_bill",
        "type": "inputPersonalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_utility_bill.html"
  },
  "InputPassportElementErrorSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains the description of an error in a Telegram Passport element; for bots only.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_passport_element_error_source.html"
  },
  "inputPassportElementErrorSourceDataField": {
    "type": "object",
    "desc": "A data field contains an error. The error is considered resolved when the field's value changes.",
    "fields": [
      {
        "desc": "Field name.",
        "name": "field_name",
        "type": "string"
      },
      {
        "desc": "Current data hash.",
        "name": "data_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_data_field.html"
  },
  "inputPassportElementErrorSourceFile": {
    "type": "object",
    "desc": "The file contains an error. The error is considered resolved when the file changes.",
    "fields": [
      {
        "desc": "Current hash of the file which has the error.",
        "name": "file_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_file.html"
  },
  "inputPassportElementErrorSourceFiles": {
    "type": "object",
    "desc": "The list of attached files contains an error. The error is considered resolved when the file list changes.",
    "fields": [
      {
        "desc": "Current hashes of all attached files.",
        "name": "file_hashes",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_files.html"
  },
  "inputPassportElementErrorSourceFrontSide": {
    "type": "object",
    "desc": "The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes.",
    "fields": [
      {
        "desc": "Current hash of the file containing the front side.",
        "name": "file_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_front_side.html"
  },
  "inputPassportElementErrorSourceReverseSide": {
    "type": "object",
    "desc": "The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes.",
    "fields": [
      {
        "desc": "Current hash of the file containing the reverse side.",
        "name": "file_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_reverse_side.html"
  },
  "inputPassportElementErrorSourceSelfie": {
    "type": "object",
    "desc": "The selfie contains an error. The error is considered resolved when the file with the selfie changes.",
    "fields": [
      {
        "desc": "Current hash of the file containing the selfie.",
        "name": "file_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_selfie.html"
  },
  "inputPassportElementErrorSourceTranslationFile": {
    "type": "object",
    "desc": "One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes.",
    "fields": [
      {
        "desc": "Current hash of the file containing the translation.",
        "name": "file_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_translation_file.html"
  },
  "inputPassportElementErrorSourceTranslationFiles": {
    "type": "object",
    "desc": "The translation of the document contains an error. The error is considered resolved when the list of files changes.",
    "fields": [
      {
        "desc": "Current hashes of all files with the translation.",
        "name": "file_hashes",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_translation_files.html"
  },
  "inputPassportElementErrorSourceUnspecified": {
    "type": "object",
    "desc": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added.",
    "fields": [
      {
        "desc": "Current hash of the entire element.",
        "name": "element_hash",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error_source_unspecified.html"
  },
  "InputStoryAreaType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a clickable rectangle area on a story media to be added.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_story_area_type.html"
  },
  "inputStoryAreaTypeFoundVenue": {
    "type": "object",
    "desc": "An area pointing to a venue found by the bot getOption(\"venue_search_bot_username\").",
    "fields": [
      {
        "desc": "Identifier of the inline query, used to found the venue.",
        "name": "query_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the inline query result.",
        "name": "result_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_area_type_found_venue.html"
  },
  "inputStoryAreaTypeLocation": {
    "type": "object",
    "desc": "An area pointing to a location.",
    "fields": [
      {
        "desc": "The location.",
        "name": "location",
        "type": "location"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_area_type_location.html"
  },
  "inputStoryAreaTypePreviousVenue": {
    "type": "object",
    "desc": "An area pointing to a venue already added to the story.",
    "fields": [
      {
        "desc": "Provider of the venue.",
        "name": "venue_provider",
        "type": "string"
      },
      {
        "desc": "Identifier of the venue in the provider database.",
        "name": "venue_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_area_type_previous_venue.html"
  },
  "inputStoryAreaTypeSuggestedReaction": {
    "type": "object",
    "desc": "An area pointing to a suggested reaction.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "True, if reaction has a dark background.",
        "name": "is_dark",
        "type": "bool"
      },
      {
        "desc": "True, if reaction corner is flipped.",
        "name": "is_flipped",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_area_type_suggested_reaction.html"
  },
  "InputStoryContent": {
    "type": "object",
    "desc": "This class is an abstract base class. The content of a story to send.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_input_story_content.html"
  },
  "inputStoryContentPhoto": {
    "type": "object",
    "desc": "A photo story.",
    "fields": [
      {
        "desc": "Photo to send. The photo must be at most 10 MB in size. The photo size must be 1080x1920.",
        "name": "photo",
        "type": "InputFile"
      },
      {
        "desc": "File identifiers of the stickers added to the photo, if applicable.",
        "name": "added_sticker_file_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_content_photo.html"
  },
  "inputStoryContentVideo": {
    "type": "object",
    "desc": "A video story.",
    "fields": [
      {
        "desc": "Video to be sent. The video size must be 720x1280. The video must be streamable and stored in MPEG4 format, after encoding with x265 codec and key frames added each second.",
        "name": "video",
        "type": "InputFile"
      },
      {
        "desc": "File identifiers of the stickers added to the video, if applicable.",
        "name": "added_sticker_file_ids",
        "type": "number"
      },
      {
        "desc": "Precise duration of the video, in seconds; 0-60.",
        "name": "duration",
        "type": "double"
      },
      {
        "desc": "True, if the video has no sound.",
        "name": "is_animation",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_content_video.html"
  },
  "InternalLinkType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes an internal https://t.me or tg: link, which must be processed by the application in a special way.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_internal_link_type.html"
  },
  "internalLinkTypeActiveSessions": {
    "type": "object",
    "desc": "The link is a link to the active sessions section of the application. Use getActiveSessions to handle the link.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_active_sessions.html"
  },
  "internalLinkTypeAttachmentMenuBot": {
    "type": "object",
    "desc": "The link is a link to an attachment menu bot to be opened in the specified or a chosen chat. Process given target_chat to open the chat. Then, call searchPublicChat with the given bot username, check that the user is a bot and can be added to attachment menu. Then, use getAttachmentMenuBot to receive information about the bot. If the bot isn't added to attachment menu, then show a disclaimer about Mini Apps being a third-party apps, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. If the attachment menu bot can't be used in the opened chat, show an error to the user. If the bot is added to attachment menu and can be used in the chat, then use openWebApp with the given URL.",
    "fields": [
      {
        "desc": "Target chat to be opened.",
        "name": "target_chat",
        "type": "TargetChat"
      },
      {
        "desc": "Username of the bot.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "URL to be passed to openWebApp.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_attachment_menu_bot.html"
  },
  "internalLinkTypeAuthenticationCode": {
    "type": "object",
    "desc": "The link contains an authentication code. Call checkAuthenticationCode with the code if the current authorization state is authorizationStateWaitCode.",
    "fields": [
      {
        "desc": "The authentication code.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_authentication_code.html"
  },
  "internalLinkTypeBackground": {
    "type": "object",
    "desc": "The link is a link to a background. Call searchBackground with the given background name to process the link.",
    "fields": [
      {
        "desc": "Name of the background.",
        "name": "background_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_background.html"
  },
  "internalLinkTypeBotAddToChannel": {
    "type": "object",
    "desc": "The link is a link to a Telegram bot, which is supposed to be added to a channel chat as an administrator. Call searchPublicChat with the given bot username and check that the user is a bot, ask the current user to select a channel chat to add the bot to as an administrator. Then, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights and combine received rights with the requested administrator rights. Then, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed rights.",
    "fields": [
      {
        "desc": "Username of the bot.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "Expected administrator rights for the bot.",
        "name": "administrator_rights",
        "type": "chatAdministratorRights"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_bot_add_to_channel.html"
  },
  "internalLinkTypeBotStart": {
    "type": "object",
    "desc": "The link is a link to a chat with a Telegram bot. Call searchPublicChat with the given bot username, check that the user is a bot, show START button in the chat with the bot, and then call sendBotStartMessage with the given start parameter after the button is pressed.",
    "fields": [
      {
        "desc": "Username of the bot.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "The parameter to be passed to sendBotStartMessage.",
        "name": "start_parameter",
        "type": "string"
      },
      {
        "desc": "True, if sendBotStartMessage must be called automatically without showing the START button.",
        "name": "autostart",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_bot_start.html"
  },
  "internalLinkTypeBotStartInGroup": {
    "type": "object",
    "desc": "The link is a link to a Telegram bot, which is supposed to be added to a group chat. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups, ask the current user to select a basic group or a supergroup chat to add the bot to, taking into account that bots can be added to a public supergroup only by administrators of the supergroup. If administrator rights are provided by the link, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights, combine received rights with the requested administrator rights, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed administrator rights. Before call to setChatMemberStatus it may be required to upgrade the chosen basic group chat to a supergroup chat. Then, if start_parameter isn't empty, call sendBotStartMessage with the given start parameter and the chosen chat; otherwise, just send /start message with bot's username added to the chat.",
    "fields": [
      {
        "desc": "Username of the bot.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "The parameter to be passed to sendBotStartMessage.",
        "name": "start_parameter",
        "type": "string"
      },
      {
        "desc": "Expected administrator rights for the bot; may be null.",
        "name": "administrator_rights",
        "type": "chatAdministratorRights"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_bot_start_in_group.html"
  },
  "internalLinkTypeChangePhoneNumber": {
    "type": "object",
    "desc": "The link is a link to the change phone number section of the app.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_change_phone_number.html"
  },
  "internalLinkTypeChatBoost": {
    "type": "object",
    "desc": "The link is a link to boost a Telegram chat. Call getChatBoostLinkInfo with the given URL to process the link. If the chat is found, then call getChatBoostStatus and getAvailableChatBoostSlots to get the current boost status and check whether the chat can be boosted. If the user wants to boost the chat and the chat can be boosted, then call boostChat.",
    "fields": [
      {
        "desc": "URL to be passed to getChatBoostLinkInfo.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_chat_boost.html"
  },
  "internalLinkTypeChatFolderInvite": {
    "type": "object",
    "desc": "The link is an invite link to a chat folder. Call checkChatFolderInviteLink with the given invite link to process the link.",
    "fields": [
      {
        "desc": "Internal representation of the invite link.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_chat_folder_invite.html"
  },
  "internalLinkTypeChatFolderSettings": {
    "type": "object",
    "desc": "The link is a link to the folder section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_chat_folder_settings.html"
  },
  "internalLinkTypeChatInvite": {
    "type": "object",
    "desc": "The link is a chat invite link. Call checkChatInviteLink with the given invite link to process the link.",
    "fields": [
      {
        "desc": "Internal representation of the invite link.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_chat_invite.html"
  },
  "internalLinkTypeDefaultMessageAutoDeleteTimerSettings": {
    "type": "object",
    "desc": "The link is a link to the default message auto-delete timer settings section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_default_message_auto_delete_timer_settings.html"
  },
  "internalLinkTypeEditProfileSettings": {
    "type": "object",
    "desc": "The link is a link to the edit profile section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_edit_profile_settings.html"
  },
  "internalLinkTypeGame": {
    "type": "object",
    "desc": "The link is a link to a game. Call searchPublicChat with the given bot username, check that the user is a bot, ask the current user to select a chat to send the game, and then call sendMessage with inputMessageGame.",
    "fields": [
      {
        "desc": "Username of the bot that owns the game.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "Short name of the game.",
        "name": "game_short_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_game.html"
  },
  "internalLinkTypeInstantView": {
    "type": "object",
    "desc": "The link must be opened in an Instant View. Call getWebPageInstantView with the given URL to process the link.",
    "fields": [
      {
        "desc": "URL to be passed to getWebPageInstantView.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "An URL to open if getWebPageInstantView fails.",
        "name": "fallback_url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_instant_view.html"
  },
  "internalLinkTypeInvoice": {
    "type": "object",
    "desc": "The link is a link to an invoice. Call getPaymentForm with the given invoice name to process the link.",
    "fields": [
      {
        "desc": "Name of the invoice.",
        "name": "invoice_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_invoice.html"
  },
  "internalLinkTypeLanguagePack": {
    "type": "object",
    "desc": "The link is a link to a language pack. Call getLanguagePackInfo with the given language pack identifier to process the link.",
    "fields": [
      {
        "desc": "Language pack identifier.",
        "name": "language_pack_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_language_pack.html"
  },
  "internalLinkTypeLanguageSettings": {
    "type": "object",
    "desc": "The link is a link to the language section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_language_settings.html"
  },
  "internalLinkTypeMessage": {
    "type": "object",
    "desc": "The link is a link to a Telegram message or a forum topic. Call getMessageLinkInfo with the given URL to process the link.",
    "fields": [
      {
        "desc": "URL to be passed to getMessageLinkInfo.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_message.html"
  },
  "internalLinkTypeMessageDraft": {
    "type": "object",
    "desc": "The link contains a message draft text. A share screen needs to be shown to the user, then the chosen chat must be opened and the text is added to the input field.",
    "fields": [
      {
        "desc": "Message draft text.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "True, if the first line of the text contains a link. If true, the input field needs to be focused and the text after the link must be selected.",
        "name": "contains_link",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_message_draft.html"
  },
  "internalLinkTypePassportDataRequest": {
    "type": "object",
    "desc": "The link contains a request of Telegram passport data. Call getPassportAuthorizationForm with the given parameters to process the link if the link was received from outside of the application; otherwise, ignore it.",
    "fields": [
      {
        "desc": "User identifier of the service's bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "Telegram Passport element types requested by the service.",
        "name": "scope",
        "type": "string"
      },
      {
        "desc": "Service's public key.",
        "name": "public_key",
        "type": "string"
      },
      {
        "desc": "Unique request identifier provided by the service.",
        "name": "nonce",
        "type": "string"
      },
      {
        "desc": "An HTTP URL to open once the request is finished, canceled, or failed with the parameters tg_passport=success, tg_passport=cancel, or tg_passport=error&error=... respectively. If empty, then onActivityResult method must be used to return response on Android, or the link tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel must be opened otherwise.",
        "name": "callback_url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_passport_data_request.html"
  },
  "internalLinkTypePhoneNumberConfirmation": {
    "type": "object",
    "desc": "The link can be used to confirm ownership of a phone number to prevent account deletion. Call sendPhoneNumberConfirmationCode with the given hash and phone number to process the link.",
    "fields": [
      {
        "desc": "Hash value from the link.",
        "name": "hash",
        "type": "string"
      },
      {
        "desc": "Phone number value from the link.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_phone_number_confirmation.html"
  },
  "internalLinkTypePremiumFeatures": {
    "type": "object",
    "desc": "The link is a link to the Premium features screen of the application from which the user can subscribe to Telegram Premium. Call getPremiumFeatures with the given referrer to process the link.",
    "fields": [
      {
        "desc": "Referrer specified in the link.",
        "name": "referrer",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_premium_features.html"
  },
  "internalLinkTypePremiumGiftCode": {
    "type": "object",
    "desc": "The link is a link with a Telegram Premium gift code. Call checkPremiumGiftCode with the given code to process the link. If the code is valid and the user wants to apply it, then call applyPremiumGiftCode.",
    "fields": [
      {
        "desc": "The Telegram Premium gift code.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_premium_gift_code.html"
  },
  "internalLinkTypePrivacyAndSecuritySettings": {
    "type": "object",
    "desc": "The link is a link to the privacy and security section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_privacy_and_security_settings.html"
  },
  "internalLinkTypeProxy": {
    "type": "object",
    "desc": "The link is a link to a proxy. Call addProxy with the given parameters to process the link and add the proxy.",
    "fields": [
      {
        "desc": "Proxy server domain or IP address.",
        "name": "server",
        "type": "string"
      },
      {
        "desc": "Proxy server port.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Type of the proxy.",
        "name": "type",
        "type": "ProxyType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_proxy.html"
  },
  "internalLinkTypePublicChat": {
    "type": "object",
    "desc": "The link is a link to a chat by its username. Call searchPublicChat with the given chat username to process the link.",
    "fields": [
      {
        "desc": "Username of the chat.",
        "name": "chat_username",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_public_chat.html"
  },
  "internalLinkTypeQrCodeAuthentication": {
    "type": "object",
    "desc": "The link can be used to login the current user on another device, but it must be scanned from QR-code using in-app camera. An alert similar to \"This code can be used to allow someone to log in to your Telegram account. To confirm Telegram login, please go to Settings > Devices > Scan QR and scan the code\" needs to be shown.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_qr_code_authentication.html"
  },
  "internalLinkTypeRestorePurchases": {
    "type": "object",
    "desc": "The link forces restore of App Store purchases when opened. For official iOS application only.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_restore_purchases.html"
  },
  "internalLinkTypeSettings": {
    "type": "object",
    "desc": "The link is a link to application settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_settings.html"
  },
  "internalLinkTypeSideMenuBot": {
    "type": "object",
    "desc": "The link is a link to a bot, which can be installed to the side menu. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to attachment menu. Then, use getAttachmentMenuBot to receive information about the bot. If the bot isn't added to side menu, then show a disclaimer about Mini Apps being a third-party apps, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. If the bot is added to side menu, then use getWebAppUrl with the given URL.",
    "fields": [
      {
        "desc": "Username of the bot.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "URL to be passed to getWebAppUrl.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_side_menu_bot.html"
  },
  "internalLinkTypeStickerSet": {
    "type": "object",
    "desc": "The link is a link to a sticker set. Call searchStickerSet with the given sticker set name to process the link and show the sticker set.",
    "fields": [
      {
        "desc": "Name of the sticker set.",
        "name": "sticker_set_name",
        "type": "string"
      },
      {
        "desc": "True, if the sticker set is expected to contain custom emoji.",
        "name": "expect_custom_emoji",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_sticker_set.html"
  },
  "internalLinkTypeStory": {
    "type": "object",
    "desc": "The link is a link to a story. Call searchPublicChat with the given sender username, then call getStory with the received chat identifier and the given story identifier.",
    "fields": [
      {
        "desc": "Username of the sender of the story.",
        "name": "story_sender_username",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_story.html"
  },
  "internalLinkTypeTheme": {
    "type": "object",
    "desc": "The link is a link to a theme. TDLib has no theme support yet.",
    "fields": [
      {
        "desc": "Name of the theme.",
        "name": "theme_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_theme.html"
  },
  "internalLinkTypeThemeSettings": {
    "type": "object",
    "desc": "The link is a link to the theme section of the app settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_theme_settings.html"
  },
  "internalLinkTypeUnknownDeepLink": {
    "type": "object",
    "desc": "The link is an unknown tg: link. Call getDeepLinkInfo to process the link.",
    "fields": [
      {
        "desc": "Link to be passed to getDeepLinkInfo.",
        "name": "link",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_unknown_deep_link.html"
  },
  "internalLinkTypeUnsupportedProxy": {
    "type": "object",
    "desc": "The link is a link to an unsupported proxy. An alert can be shown to the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_unsupported_proxy.html"
  },
  "internalLinkTypeUserPhoneNumber": {
    "type": "object",
    "desc": "The link is a link to a user by its phone number. Call searchUserByPhoneNumber with the given phone number to process the link.",
    "fields": [
      {
        "desc": "Phone number of the user.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_user_phone_number.html"
  },
  "internalLinkTypeUserToken": {
    "type": "object",
    "desc": "The link is a link to a user by a temporary token. Call searchUserByToken with the given token to process the link.",
    "fields": [
      {
        "desc": "The token.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_user_token.html"
  },
  "internalLinkTypeVideoChat": {
    "type": "object",
    "desc": "The link is a link to a video chat. Call searchPublicChat with the given chat username, and then joinGroupCall with the given invite hash to process the link.",
    "fields": [
      {
        "desc": "Username of the chat with the video chat.",
        "name": "chat_username",
        "type": "string"
      },
      {
        "desc": "If non-empty, invite hash to be used to join the video chat without being muted by administrators.",
        "name": "invite_hash",
        "type": "string"
      },
      {
        "desc": "True, if the video chat is expected to be a live stream in a channel or a broadcast group.",
        "name": "is_live_stream",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_video_chat.html"
  },
  "internalLinkTypeWebApp": {
    "type": "object",
    "desc": "The link is a link to a Web App. Call searchPublicChat with the given bot username, check that the user is a bot, then call searchWebApp with the received bot and the given web_app_short_name. Process received foundWebApp by showing a confirmation dialog if needed. If the bot can be added to attachment or side menu, but isn't added yet, then show a disclaimer about Mini Apps being a third-party apps instead of the dialog and ask the user to accept their Terms of service. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. Then, call getWebAppLinkUrl and open the returned URL as a Web App.",
    "fields": [
      {
        "desc": "Username of the bot that owns the Web App.",
        "name": "bot_username",
        "type": "string"
      },
      {
        "desc": "Short name of the Web App.",
        "name": "web_app_short_name",
        "type": "string"
      },
      {
        "desc": "Start parameter to be passed to getWebAppLinkUrl.",
        "name": "start_parameter",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1internal_link_type_web_app.html"
  },
  "InviteLinkChatType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a chat to which points an invite link.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_invite_link_chat_type.html"
  },
  "inviteLinkChatTypeBasicGroup": {
    "type": "object",
    "desc": "The link is an invite link for a basic group.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invite_link_chat_type_basic_group.html"
  },
  "inviteLinkChatTypeChannel": {
    "type": "object",
    "desc": "The link is an invite link for a channel.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invite_link_chat_type_channel.html"
  },
  "inviteLinkChatTypeSupergroup": {
    "type": "object",
    "desc": "The link is an invite link for a supergroup.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invite_link_chat_type_supergroup.html"
  },
  "JsonValue": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a JSON value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_json_value.html"
  },
  "jsonValueArray": {
    "type": "object",
    "desc": "Represents a JSON array.",
    "fields": [
      {
        "desc": "The list of array elements.",
        "name": "values",
        "type": "JsonValue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_array.html"
  },
  "jsonValueBoolean": {
    "type": "object",
    "desc": "Represents a boolean JSON value.",
    "fields": [
      {
        "desc": "The value.",
        "name": "value",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_boolean.html"
  },
  "jsonValueNull": {
    "type": "object",
    "desc": "Represents a null JSON value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_null.html"
  },
  "jsonValueNumber": {
    "type": "object",
    "desc": "Represents a numeric JSON value.",
    "fields": [
      {
        "desc": "The value.",
        "name": "value",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_number.html"
  },
  "jsonValueObject": {
    "type": "object",
    "desc": "Represents a JSON object.",
    "fields": [
      {
        "desc": "The list of object members.",
        "name": "members",
        "type": "jsonObjectMember"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_object.html"
  },
  "jsonValueString": {
    "type": "object",
    "desc": "Represents a string JSON value.",
    "fields": [
      {
        "desc": "The value.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_value_string.html"
  },
  "KeyboardButtonType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a keyboard button type.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_keyboard_button_type.html"
  },
  "keyboardButtonTypeRequestChat": {
    "type": "object",
    "desc": "A button that requests a chat to be shared by the current user; available only in private chats. Use the method shareChatWithBot to complete the request.",
    "fields": [
      {
        "desc": "Unique button identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "True, if the chat must be a channel; otherwise, a basic group or a supergroup chat is shared.",
        "name": "chat_is_channel",
        "type": "bool"
      },
      {
        "desc": "True, if the chat must or must not be a forum supergroup.",
        "name": "restrict_chat_is_forum",
        "type": "bool"
      },
      {
        "desc": "True, if the chat must be a forum supergroup; otherwise, the chat must not be a forum supergroup. Ignored if restrict_chat_is_forum is false.",
        "name": "chat_is_forum",
        "type": "bool"
      },
      {
        "desc": "True, if the chat must or must not have a username.",
        "name": "restrict_chat_has_username",
        "type": "bool"
      },
      {
        "desc": "True, if the chat must have a username; otherwise, the chat must not have a username. Ignored if restrict_chat_has_username is false.",
        "name": "chat_has_username",
        "type": "bool"
      },
      {
        "desc": "True, if the chat must be created by the current user.",
        "name": "chat_is_created",
        "type": "bool"
      },
      {
        "desc": "Expected user administrator rights in the chat; may be null if they aren't restricted.",
        "name": "user_administrator_rights",
        "type": "chatAdministratorRights"
      },
      {
        "desc": "Expected bot administrator rights in the chat; may be null if they aren't restricted.",
        "name": "bot_administrator_rights",
        "type": "chatAdministratorRights"
      },
      {
        "desc": "True, if the bot must be a member of the chat; for basic group and supergroup chats only.",
        "name": "bot_is_member",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_chat.html"
  },
  "keyboardButtonTypeRequestLocation": {
    "type": "object",
    "desc": "A button that sends the user's location when pressed; available only in private chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_location.html"
  },
  "keyboardButtonTypeRequestPhoneNumber": {
    "type": "object",
    "desc": "A button that sends the user's phone number when pressed; available only in private chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_phone_number.html"
  },
  "keyboardButtonTypeRequestPoll": {
    "type": "object",
    "desc": "A button that allows the user to create and send a poll when pressed; available only in private chats.",
    "fields": [
      {
        "desc": "If true, only regular polls must be allowed to create.",
        "name": "force_regular",
        "type": "bool"
      },
      {
        "desc": "If true, only polls in quiz mode must be allowed to create.",
        "name": "force_quiz",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_poll.html"
  },
  "keyboardButtonTypeRequestUser": {
    "type": "object",
    "desc": "A button that requests a user to be shared by the current user; available only in private chats. Use the method shareUserWithBot to complete the request.",
    "fields": [
      {
        "desc": "Unique button identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "True, if the shared user must or must not be a bot.",
        "name": "restrict_user_is_bot",
        "type": "bool"
      },
      {
        "desc": "True, if the shared user must be a bot; otherwise, the shared user must no be a bot. Ignored if restrict_user_is_bot is false.",
        "name": "user_is_bot",
        "type": "bool"
      },
      {
        "desc": "True, if the shared user must or must not be a Telegram Premium user.",
        "name": "restrict_user_is_premium",
        "type": "bool"
      },
      {
        "desc": "True, if the shared user must be a Telegram Premium user; otherwise, the shared user must no be a Telegram Premium user. Ignored if restrict_user_is_premium is false.",
        "name": "user_is_premium",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_request_user.html"
  },
  "keyboardButtonTypeText": {
    "type": "object",
    "desc": "A simple button, with text that must be sent when the button is pressed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_text.html"
  },
  "keyboardButtonTypeWebApp": {
    "type": "object",
    "desc": "A button that opens a Web App by calling getWebAppUrl.",
    "fields": [
      {
        "desc": "An HTTP URL to pass to getWebAppUrl.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button_type_web_app.html"
  },
  "LanguagePackStringValue": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the value of a string in a language pack.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_language_pack_string_value.html"
  },
  "languagePackStringValueDeleted": {
    "type": "object",
    "desc": "A deleted language pack string, the value must be taken from the built-in English language pack.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_string_value_deleted.html"
  },
  "languagePackStringValueOrdinary": {
    "type": "object",
    "desc": "An ordinary language pack string.",
    "fields": [
      {
        "desc": "String value.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_string_value_ordinary.html"
  },
  "languagePackStringValuePluralized": {
    "type": "object",
    "desc": "A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information.",
    "fields": [
      {
        "desc": "Value for zero objects.",
        "name": "zero_value",
        "type": "string"
      },
      {
        "desc": "Value for one object.",
        "name": "one_value",
        "type": "string"
      },
      {
        "desc": "Value for two objects.",
        "name": "two_value",
        "type": "string"
      },
      {
        "desc": "Value for few objects.",
        "name": "few_value",
        "type": "string"
      },
      {
        "desc": "Value for many objects.",
        "name": "many_value",
        "type": "string"
      },
      {
        "desc": "Default value.",
        "name": "other_value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_string_value_pluralized.html"
  },
  "LogStream": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a stream to which TDLib internal log is written.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_log_stream.html"
  },
  "logStreamDefault": {
    "type": "object",
    "desc": "The log is written to stderr or an OS specific log.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_stream_default.html"
  },
  "logStreamEmpty": {
    "type": "object",
    "desc": "The log is written nowhere.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_stream_empty.html"
  },
  "logStreamFile": {
    "type": "object",
    "desc": "The log is written to a file.",
    "fields": [
      {
        "desc": "Path to the file to where the internal TDLib log will be written.",
        "name": "path",
        "type": "string"
      },
      {
        "desc": "The maximum size of the file to where the internal TDLib log is written before the file will automatically be rotated, in bytes.",
        "name": "max_file_size",
        "type": "string"
      },
      {
        "desc": "Pass true to additionally redirect stderr to the log file. Ignored on Windows.",
        "name": "redirect_stderr",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_stream_file.html"
  },
  "LoginUrlInfo": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about an inline button of type inlineKeyboardButtonTypeLoginUrl.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_login_url_info.html"
  },
  "loginUrlInfoOpen": {
    "type": "object",
    "desc": "An HTTP URL needs to be open.",
    "fields": [
      {
        "desc": "The URL to open.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "True, if there is no need to show an ordinary open URL confirmation.",
        "name": "skip_confirmation",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1login_url_info_open.html"
  },
  "loginUrlInfoRequestConfirmation": {
    "type": "object",
    "desc": "An authorization confirmation dialog needs to be shown to the user.",
    "fields": [
      {
        "desc": "An HTTP URL to be opened.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "A domain of the URL.",
        "name": "domain",
        "type": "string"
      },
      {
        "desc": "User identifier of a bot linked with the website.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "True, if the user must be asked for the permission to the bot to send them messages.",
        "name": "request_write_access",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1login_url_info_request_confirmation.html"
  },
  "MaskPoint": {
    "type": "object",
    "desc": "This class is an abstract base class. Part of the face, relative to which a mask is placed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_mask_point.html"
  },
  "maskPointChin": {
    "type": "object",
    "desc": "The mask is placed relatively to the chin.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_chin.html"
  },
  "maskPointEyes": {
    "type": "object",
    "desc": "The mask is placed relatively to the eyes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_eyes.html"
  },
  "maskPointForehead": {
    "type": "object",
    "desc": "The mask is placed relatively to the forehead.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_forehead.html"
  },
  "maskPointMouth": {
    "type": "object",
    "desc": "The mask is placed relatively to the mouth.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_point_mouth.html"
  },
  "MessageContent": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains the content of a message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_content.html"
  },
  "messageAnimatedEmoji": {
    "type": "object",
    "desc": "A message with an animated emoji.",
    "fields": [
      {
        "desc": "The animated emoji.",
        "name": "animated_emoji",
        "type": "animatedEmoji"
      },
      {
        "desc": "The corresponding emoji.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_animated_emoji.html"
  },
  "messageAnimation": {
    "type": "object",
    "desc": "An animation message (GIF-style).",
    "fields": [
      {
        "desc": "The animation description.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Animation caption.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "True, if the animation preview must be covered by a spoiler animation.",
        "name": "has_spoiler",
        "type": "bool"
      },
      {
        "desc": "True, if the animation thumbnail must be blurred and the animation must be shown only while tapped.",
        "name": "is_secret",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_animation.html"
  },
  "messageAudio": {
    "type": "object",
    "desc": "An audio message.",
    "fields": [
      {
        "desc": "The audio description.",
        "name": "audio",
        "type": "audio"
      },
      {
        "desc": "Audio caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_audio.html"
  },
  "messageBasicGroupChatCreate": {
    "type": "object",
    "desc": "A newly created basic group.",
    "fields": [
      {
        "desc": "Title of the basic group.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "User identifiers of members in the basic group.",
        "name": "member_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_basic_group_chat_create.html"
  },
  "messageBotWriteAccessAllowed": {
    "type": "object",
    "desc": "The user allowed the bot to send messages.",
    "fields": [
      {
        "desc": "The reason why the bot was allowed to write messages.",
        "name": "reason",
        "type": "BotWriteAccessAllowReason"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_bot_write_access_allowed.html"
  },
  "messageCall": {
    "type": "object",
    "desc": "A message with information about an ended call.",
    "fields": [
      {
        "desc": "True, if the call was a video call.",
        "name": "is_video",
        "type": "bool"
      },
      {
        "desc": "Reason why the call was discarded.",
        "name": "discard_reason",
        "type": "CallDiscardReason"
      },
      {
        "desc": "Call duration, in seconds.",
        "name": "duration",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_call.html"
  },
  "messageChatAddMembers": {
    "type": "object",
    "desc": "New chat members were added.",
    "fields": [
      {
        "desc": "User identifiers of the new members.",
        "name": "member_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_add_members.html"
  },
  "messageChatChangePhoto": {
    "type": "object",
    "desc": "An updated chat photo.",
    "fields": [
      {
        "desc": "New chat photo.",
        "name": "photo",
        "type": "chatPhoto"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_change_photo.html"
  },
  "messageChatChangeTitle": {
    "type": "object",
    "desc": "An updated chat title.",
    "fields": [
      {
        "desc": "New chat title.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_change_title.html"
  },
  "messageChatDeleteMember": {
    "type": "object",
    "desc": "A chat member was deleted.",
    "fields": [
      {
        "desc": "User identifier of the deleted chat member.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_delete_member.html"
  },
  "messageChatDeletePhoto": {
    "type": "object",
    "desc": "A deleted chat photo.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_delete_photo.html"
  },
  "messageChatJoinByLink": {
    "type": "object",
    "desc": "A new member joined the chat via an invite link.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_join_by_link.html"
  },
  "messageChatJoinByRequest": {
    "type": "object",
    "desc": "A new member was accepted to the chat by an administrator.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_join_by_request.html"
  },
  "messageChatSetBackground": {
    "type": "object",
    "desc": "A new background was set in the chat.",
    "fields": [
      {
        "desc": "Identifier of the message with a previously set same background; 0 if none. Can be an identifier of a deleted message.",
        "name": "old_background_message_id",
        "type": "string"
      },
      {
        "desc": "The new background.",
        "name": "background",
        "type": "chatBackground"
      },
      {
        "desc": "True, if the background was set only for self.",
        "name": "only_for_self",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_set_background.html"
  },
  "messageChatSetMessageAutoDeleteTime": {
    "type": "object",
    "desc": "The auto-delete or self-destruct timer for messages in the chat has been changed.",
    "fields": [
      {
        "desc": "New value auto-delete or self-destruct time, in seconds; 0 if disabled.",
        "name": "message_auto_delete_time",
        "type": "number"
      },
      {
        "desc": "If not 0, a user identifier, which default setting was automatically applied.",
        "name": "from_user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_set_message_auto_delete_time.html"
  },
  "messageChatSetTheme": {
    "type": "object",
    "desc": "A theme in the chat has been changed.",
    "fields": [
      {
        "desc": "If non-empty, name of a new theme, set for the chat. Otherwise, chat theme was reset to the default one.",
        "name": "theme_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_set_theme.html"
  },
  "messageChatShared": {
    "type": "object",
    "desc": "The current user shared a chat, which was requested by the bot.",
    "fields": [
      {
        "desc": "Identifier of the shared chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the keyboard button with the request.",
        "name": "button_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_shared.html"
  },
  "messageChatUpgradeFrom": {
    "type": "object",
    "desc": "A supergroup has been created from a basic group.",
    "fields": [
      {
        "desc": "Title of the newly created supergroup.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "The identifier of the original basic group.",
        "name": "basic_group_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_upgrade_from.html"
  },
  "messageChatUpgradeTo": {
    "type": "object",
    "desc": "A basic group was upgraded to a supergroup and was deactivated as the result.",
    "fields": [
      {
        "desc": "Identifier of the supergroup to which the basic group was upgraded.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_chat_upgrade_to.html"
  },
  "messageContact": {
    "type": "object",
    "desc": "A message with a user contact.",
    "fields": [
      {
        "desc": "The contact description.",
        "name": "contact",
        "type": "contact"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_contact.html"
  },
  "messageContactRegistered": {
    "type": "object",
    "desc": "A contact has registered with Telegram.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_contact_registered.html"
  },
  "messageCustomServiceAction": {
    "type": "object",
    "desc": "A non-standard action has happened in the chat.",
    "fields": [
      {
        "desc": "Message text to be shown in the chat.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_custom_service_action.html"
  },
  "messageDice": {
    "type": "object",
    "desc": "A dice message. The dice value is randomly generated by the server.",
    "fields": [
      {
        "desc": "The animated stickers with the initial dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known.",
        "name": "initial_state",
        "type": "DiceStickers"
      },
      {
        "desc": "The animated stickers with the final dice animation; may be null if unknown. updateMessageContent will be sent when the sticker became known.",
        "name": "final_state",
        "type": "DiceStickers"
      },
      {
        "desc": "Emoji on which the dice throw animation is based.",
        "name": "emoji",
        "type": "string"
      },
      {
        "desc": "The dice value. If the value is 0, the dice don't have final state yet.",
        "name": "value",
        "type": "number"
      },
      {
        "desc": "Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded.",
        "name": "success_animation_frame_number",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_dice.html"
  },
  "messageDocument": {
    "type": "object",
    "desc": "A document message (general file).",
    "fields": [
      {
        "desc": "The document description.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "Document caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_document.html"
  },
  "messageExpiredPhoto": {
    "type": "object",
    "desc": "A self-destructed photo message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_expired_photo.html"
  },
  "messageExpiredVideo": {
    "type": "object",
    "desc": "A self-destructed video message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_expired_video.html"
  },
  "messageForumTopicCreated": {
    "type": "object",
    "desc": "A forum topic has been created.",
    "fields": [
      {
        "desc": "Name of the topic.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Icon of the topic.",
        "name": "icon",
        "type": "forumTopicIcon"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forum_topic_created.html"
  },
  "messageForumTopicEdited": {
    "type": "object",
    "desc": "A forum topic has been edited.",
    "fields": [
      {
        "desc": "If non-empty, the new name of the topic.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "True, if icon's custom_emoji_id is changed.",
        "name": "edit_icon_custom_emoji_id",
        "type": "bool"
      },
      {
        "desc": "New unique identifier of the custom emoji shown on the topic icon; 0 if none. Must be ignored if edit_icon_custom_emoji_id is false.",
        "name": "icon_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forum_topic_edited.html"
  },
  "messageForumTopicIsClosedToggled": {
    "type": "object",
    "desc": "A forum topic has been closed or opened.",
    "fields": [
      {
        "desc": "True, if the topic was closed; otherwise, the topic was reopened.",
        "name": "is_closed",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forum_topic_is_closed_toggled.html"
  },
  "messageForumTopicIsHiddenToggled": {
    "type": "object",
    "desc": "A General forum topic has been hidden or unhidden.",
    "fields": [
      {
        "desc": "True, if the topic was hidden; otherwise, the topic was unhidden.",
        "name": "is_hidden",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forum_topic_is_hidden_toggled.html"
  },
  "messageGame": {
    "type": "object",
    "desc": "A message with a game.",
    "fields": [
      {
        "desc": "The game description.",
        "name": "game",
        "type": "game"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_game.html"
  },
  "messageGameScore": {
    "type": "object",
    "desc": "A new high score was achieved in a game.",
    "fields": [
      {
        "desc": "Identifier of the message with the game, can be an identifier of a deleted message.",
        "name": "game_message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the game; may be different from the games presented in the message with the game.",
        "name": "game_id",
        "type": "string"
      },
      {
        "desc": "New score.",
        "name": "score",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_game_score.html"
  },
  "messageGiftedPremium": {
    "type": "object",
    "desc": "Telegram Premium was gifted to the user.",
    "fields": [
      {
        "desc": "The identifier of a user that gifted Telegram Premium; 0 if the gift was anonymous.",
        "name": "gifter_user_id",
        "type": "string"
      },
      {
        "desc": "Currency for the paid amount.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "The paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "Cryptocurrency used to pay for the gift; may be empty if none.",
        "name": "cryptocurrency",
        "type": "string"
      },
      {
        "desc": "The paid amount, in the smallest units of the cryptocurrency.",
        "name": "cryptocurrency_amount",
        "type": "string"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "A sticker to be shown in the message; may be null if unknown.",
        "name": "sticker",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_gifted_premium.html"
  },
  "messageInviteVideoChatParticipants": {
    "type": "object",
    "desc": "A message with information about an invite to a video chat.",
    "fields": [
      {
        "desc": "Identifier of the video chat. The video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Invited user identifiers.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_invite_video_chat_participants.html"
  },
  "messageInvoice": {
    "type": "object",
    "desc": "A message with an invoice from a bot. Use getInternalLink with internalLinkTypeBotStart to share the invoice.",
    "fields": [
      {
        "desc": "Product title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Product description.",
        "name": "description",
        "type": "formattedText"
      },
      {
        "desc": "Product photo; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Currency for the product price.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Product total price in the smallest units of the currency.",
        "name": "total_amount",
        "type": "string"
      },
      {
        "desc": "Unique invoice bot start_parameter to be passed to getInternalLink.",
        "name": "start_parameter",
        "type": "string"
      },
      {
        "desc": "True, if the invoice is a test invoice.",
        "name": "is_test",
        "type": "bool"
      },
      {
        "desc": "True, if the shipping address must be specified.",
        "name": "need_shipping_address",
        "type": "bool"
      },
      {
        "desc": "The identifier of the message with the receipt, after the product has been purchased.",
        "name": "receipt_message_id",
        "type": "string"
      },
      {
        "desc": "Extended media attached to the invoice; may be null.",
        "name": "extended_media",
        "type": "MessageExtendedMedia"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_invoice.html"
  },
  "messageLocation": {
    "type": "object",
    "desc": "A message with a location.",
    "fields": [
      {
        "desc": "The location description.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Time relative to the message send date, for which the location can be updated, in seconds.",
        "name": "live_period",
        "type": "number"
      },
      {
        "desc": "Left time for which the location can be updated, in seconds. updateMessageContent is not sent when this field changes.",
        "name": "expires_in",
        "type": "number"
      },
      {
        "desc": "For live locations, a direction in which the location moves, in degrees; 1-360. If 0 the direction is unknown.",
        "name": "heading",
        "type": "number"
      },
      {
        "desc": "For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). 0 if the notification is disabled. Available only to the message sender.",
        "name": "proximity_alert_radius",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_location.html"
  },
  "messagePassportDataReceived": {
    "type": "object",
    "desc": "Telegram Passport data has been received; for bots only.",
    "fields": [
      {
        "desc": "List of received Telegram Passport elements.",
        "name": "elements",
        "type": "encryptedPassportElement"
      },
      {
        "desc": "Encrypted data credentials.",
        "name": "credentials",
        "type": "encryptedCredentials"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_passport_data_received.html"
  },
  "messagePassportDataSent": {
    "type": "object",
    "desc": "Telegram Passport data has been sent to a bot.",
    "fields": [
      {
        "desc": "List of Telegram Passport element types sent.",
        "name": "types",
        "type": "PassportElementType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_passport_data_sent.html"
  },
  "messagePaymentSuccessful": {
    "type": "object",
    "desc": "A payment has been completed.",
    "fields": [
      {
        "desc": "Identifier of the chat, containing the corresponding invoice message.",
        "name": "invoice_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message with the corresponding invoice; can be 0 or an identifier of a deleted message.",
        "name": "invoice_message_id",
        "type": "string"
      },
      {
        "desc": "Currency for the price of the product.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Total price for the product, in the smallest units of the currency.",
        "name": "total_amount",
        "type": "string"
      },
      {
        "desc": "True, if this is a recurring payment.",
        "name": "is_recurring",
        "type": "bool"
      },
      {
        "desc": "True, if this is the first recurring payment.",
        "name": "is_first_recurring",
        "type": "bool"
      },
      {
        "desc": "Name of the invoice; may be empty if unknown.",
        "name": "invoice_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_payment_successful.html"
  },
  "messagePaymentSuccessfulBot": {
    "type": "object",
    "desc": "A payment has been completed; for bots only.",
    "fields": [
      {
        "desc": "Currency for price of the product.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Total price for the product, in the smallest units of the currency.",
        "name": "total_amount",
        "type": "string"
      },
      {
        "desc": "True, if this is a recurring payment.",
        "name": "is_recurring",
        "type": "bool"
      },
      {
        "desc": "True, if this is the first recurring payment.",
        "name": "is_first_recurring",
        "type": "bool"
      },
      {
        "desc": "Invoice payload.",
        "name": "invoice_payload",
        "type": "bytes"
      },
      {
        "desc": "Identifier of the shipping option chosen by the user; may be empty if not applicable.",
        "name": "shipping_option_id",
        "type": "string"
      },
      {
        "desc": "Information about the order; may be null.",
        "name": "order_info",
        "type": "orderInfo"
      },
      {
        "desc": "Telegram payment identifier.",
        "name": "telegram_payment_charge_id",
        "type": "string"
      },
      {
        "desc": "Provider payment identifier.",
        "name": "provider_payment_charge_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_payment_successful_bot.html"
  },
  "messagePhoto": {
    "type": "object",
    "desc": "A photo message.",
    "fields": [
      {
        "desc": "The photo.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Photo caption.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "True, if the photo preview must be covered by a spoiler animation.",
        "name": "has_spoiler",
        "type": "bool"
      },
      {
        "desc": "True, if the photo must be blurred and must be shown only while tapped.",
        "name": "is_secret",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_photo.html"
  },
  "messagePinMessage": {
    "type": "object",
    "desc": "A message has been pinned.",
    "fields": [
      {
        "desc": "Identifier of the pinned message, can be an identifier of a deleted message or 0.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_pin_message.html"
  },
  "messagePoll": {
    "type": "object",
    "desc": "A message with a poll.",
    "fields": [
      {
        "desc": "The poll description.",
        "name": "poll",
        "type": "poll"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_poll.html"
  },
  "messagePremiumGiftCode": {
    "type": "object",
    "desc": "A Telegram Premium gift code was created for the user.",
    "fields": [
      {
        "desc": "Identifier of a chat or a user that created the gift code.",
        "name": "creator_id",
        "type": "MessageSender"
      },
      {
        "desc": "True, if the gift code was created for a giveaway.",
        "name": "is_from_giveaway",
        "type": "bool"
      },
      {
        "desc": "True, if the winner for the corresponding Telegram Premium subscription wasn't chosen.",
        "name": "is_unclaimed",
        "type": "bool"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "A sticker to be shown in the message; may be null if unknown.",
        "name": "sticker",
        "type": "sticker"
      },
      {
        "desc": "The gift code.",
        "name": "code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_premium_gift_code.html"
  },
  "messagePremiumGiveaway": {
    "type": "object",
    "desc": "A Telegram Premium giveaway.",
    "fields": [
      {
        "desc": "Giveaway parameters.",
        "name": "parameters",
        "type": "premiumGiveawayParameters"
      },
      {
        "desc": "Number of users which will receive Telegram Premium subscription gift codes.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "A sticker to be shown in the message; may be null if unknown.",
        "name": "sticker",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_premium_giveaway.html"
  },
  "messagePremiumGiveawayCompleted": {
    "type": "object",
    "desc": "A Telegram Premium giveaway has been completed for the chat.",
    "fields": [
      {
        "desc": "Identifier of the message with the giveaway, can be an identifier of a deleted message.",
        "name": "giveaway_message_id",
        "type": "string"
      },
      {
        "desc": "Number of winners in the giveaway.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of undistributed prizes.",
        "name": "unclaimed_prize_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_premium_giveaway_completed.html"
  },
  "messagePremiumGiveawayCreated": {
    "type": "object",
    "desc": "A Telegram Premium giveaway was created for the chat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_premium_giveaway_created.html"
  },
  "messageProximityAlertTriggered": {
    "type": "object",
    "desc": "A user in the chat came within proximity alert range.",
    "fields": [
      {
        "desc": "The identifier of a user or chat that triggered the proximity alert.",
        "name": "traveler_id",
        "type": "MessageSender"
      },
      {
        "desc": "The identifier of a user or chat that subscribed for the proximity alert.",
        "name": "watcher_id",
        "type": "MessageSender"
      },
      {
        "desc": "The distance between the users.",
        "name": "distance",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_proximity_alert_triggered.html"
  },
  "messageScreenshotTaken": {
    "type": "object",
    "desc": "A screenshot of a message in the chat has been taken.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_screenshot_taken.html"
  },
  "messageSticker": {
    "type": "object",
    "desc": "A sticker message.",
    "fields": [
      {
        "desc": "The sticker description.",
        "name": "sticker",
        "type": "sticker"
      },
      {
        "desc": "True, if premium animation of the sticker must be played.",
        "name": "is_premium",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sticker.html"
  },
  "messageStory": {
    "type": "object",
    "desc": "A message with a forwarded story.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "True, if the story was automatically forwarded because of a mention of the user.",
        "name": "via_mention",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_story.html"
  },
  "messageSuggestProfilePhoto": {
    "type": "object",
    "desc": "A profile photo was suggested to a user in a private chat.",
    "fields": [
      {
        "desc": "The suggested chat photo. Use the method setProfilePhoto with inputChatPhotoPrevious to apply the photo.",
        "name": "photo",
        "type": "chatPhoto"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_suggest_profile_photo.html"
  },
  "messageSupergroupChatCreate": {
    "type": "object",
    "desc": "A newly created supergroup or channel.",
    "fields": [
      {
        "desc": "Title of the supergroup or channel.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_supergroup_chat_create.html"
  },
  "messageText": {
    "type": "object",
    "desc": "A text message.",
    "fields": [
      {
        "desc": "Text of the message.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "A link preview attached to the message; may be null.",
        "name": "web_page",
        "type": "webPage"
      },
      {
        "desc": "Options which were used for generation of the link preview; may be null if default options were used.",
        "name": "link_preview_options",
        "type": "linkPreviewOptions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_text.html"
  },
  "messageUnsupported": {
    "type": "object",
    "desc": "A message content that is not supported in the current TDLib version.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_unsupported.html"
  },
  "messageUserShared": {
    "type": "object",
    "desc": "The current user shared a user, which was requested by the bot.",
    "fields": [
      {
        "desc": "Identifier of the shared user.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the keyboard button with the request.",
        "name": "button_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_user_shared.html"
  },
  "messageVenue": {
    "type": "object",
    "desc": "A message with information about a venue.",
    "fields": [
      {
        "desc": "The venue description.",
        "name": "venue",
        "type": "venue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_venue.html"
  },
  "messageVideo": {
    "type": "object",
    "desc": "A video message.",
    "fields": [
      {
        "desc": "The video description.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Video caption.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "True, if the video preview must be covered by a spoiler animation.",
        "name": "has_spoiler",
        "type": "bool"
      },
      {
        "desc": "True, if the video thumbnail must be blurred and the video must be shown only while tapped.",
        "name": "is_secret",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video.html"
  },
  "messageVideoChatEnded": {
    "type": "object",
    "desc": "A message with information about an ended video chat.",
    "fields": [
      {
        "desc": "Call duration, in seconds.",
        "name": "duration",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video_chat_ended.html"
  },
  "messageVideoChatScheduled": {
    "type": "object",
    "desc": "A new video chat was scheduled.",
    "fields": [
      {
        "desc": "Identifier of the video chat. The video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator.",
        "name": "start_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video_chat_scheduled.html"
  },
  "messageVideoChatStarted": {
    "type": "object",
    "desc": "A newly created video chat.",
    "fields": [
      {
        "desc": "Identifier of the video chat. The video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video_chat_started.html"
  },
  "messageVideoNote": {
    "type": "object",
    "desc": "A video note message.",
    "fields": [
      {
        "desc": "The video note description.",
        "name": "video_note",
        "type": "videoNote"
      },
      {
        "desc": "True, if at least one of the recipients has viewed the video note.",
        "name": "is_viewed",
        "type": "bool"
      },
      {
        "desc": "True, if the video note thumbnail must be blurred and the video note must be shown only while tapped.",
        "name": "is_secret",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_video_note.html"
  },
  "messageVoiceNote": {
    "type": "object",
    "desc": "A voice note message.",
    "fields": [
      {
        "desc": "The voice note description.",
        "name": "voice_note",
        "type": "voiceNote"
      },
      {
        "desc": "Voice note caption.",
        "name": "caption",
        "type": "formattedText"
      },
      {
        "desc": "True, if at least one of the recipients has listened to the voice note.",
        "name": "is_listened",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_voice_note.html"
  },
  "messageWebAppDataReceived": {
    "type": "object",
    "desc": "Data from a Web App has been received; for bots only.",
    "fields": [
      {
        "desc": "Text of the keyboardButtonTypeWebApp button, which opened the Web App.",
        "name": "button_text",
        "type": "string"
      },
      {
        "desc": "The data.",
        "name": "data",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_web_app_data_received.html"
  },
  "messageWebAppDataSent": {
    "type": "object",
    "desc": "Data from a Web App has been sent to a bot.",
    "fields": [
      {
        "desc": "Text of the keyboardButtonTypeWebApp button, which opened the Web App.",
        "name": "button_text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_web_app_data_sent.html"
  },
  "MessageExtendedMedia": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a media, which is attached to an invoice.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_extended_media.html"
  },
  "messageExtendedMediaPhoto": {
    "type": "object",
    "desc": "The media is a photo.",
    "fields": [
      {
        "desc": "The photo.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Photo caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_extended_media_photo.html"
  },
  "messageExtendedMediaPreview": {
    "type": "object",
    "desc": "The media is hidden until the invoice is paid.",
    "fields": [
      {
        "desc": "Media width; 0 if unknown.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Media height; 0 if unknown.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Media duration; 0 if unknown.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Media minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Media caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_extended_media_preview.html"
  },
  "messageExtendedMediaUnsupported": {
    "type": "object",
    "desc": "The media is unsupported.",
    "fields": [
      {
        "desc": "Media caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_extended_media_unsupported.html"
  },
  "messageExtendedMediaVideo": {
    "type": "object",
    "desc": "The media is a video.",
    "fields": [
      {
        "desc": "The video.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Photo caption.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_extended_media_video.html"
  },
  "MessageFileType": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about a file with messages exported from another app.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_file_type.html"
  },
  "messageFileTypeGroup": {
    "type": "object",
    "desc": "The messages were exported from a group chat.",
    "fields": [
      {
        "desc": "Title of the group chat; may be empty if unrecognized.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_file_type_group.html"
  },
  "messageFileTypePrivate": {
    "type": "object",
    "desc": "The messages were exported from a private chat.",
    "fields": [
      {
        "desc": "Name of the other party; may be empty if unrecognized.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_file_type_private.html"
  },
  "messageFileTypeUnknown": {
    "type": "object",
    "desc": "The messages were exported from a chat of unknown type.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_file_type_unknown.html"
  },
  "MessageOrigin": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the origin of a message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_origin.html"
  },
  "messageOriginChannel": {
    "type": "object",
    "desc": "The message was originally a post in a channel.",
    "fields": [
      {
        "desc": "Identifier of the channel chat to which the message was originally sent.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier of the original message.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Original post author signature.",
        "name": "author_signature",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_origin_channel.html"
  },
  "messageOriginChat": {
    "type": "object",
    "desc": "The message was originally sent on behalf of a chat.",
    "fields": [
      {
        "desc": "Identifier of the chat that originally sent the message.",
        "name": "sender_chat_id",
        "type": "string"
      },
      {
        "desc": "For messages originally sent by an anonymous chat administrator, original message author signature.",
        "name": "author_signature",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_origin_chat.html"
  },
  "messageOriginHiddenUser": {
    "type": "object",
    "desc": "The message was originally sent by a user, which is hidden by their privacy settings.",
    "fields": [
      {
        "desc": "Name of the sender.",
        "name": "sender_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_origin_hidden_user.html"
  },
  "messageOriginUser": {
    "type": "object",
    "desc": "The message was originally sent by a known user.",
    "fields": [
      {
        "desc": "Identifier of the user that originally sent the message.",
        "name": "sender_user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_origin_user.html"
  },
  "MessageReplyTo": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the message or the story a message is replying to.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_reply_to.html"
  },
  "messageReplyToMessage": {
    "type": "object",
    "desc": "Describes a message replied by a given message.",
    "fields": [
      {
        "desc": "The identifier of the chat to which the message belongs; may be 0 if the replied message is in unknown chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the message; may be 0 if the replied message is in unknown chat.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Chosen quote from the replied message; may be null if none.",
        "name": "quote",
        "type": "textQuote"
      },
      {
        "desc": "Information about origin of the message if the message was from another chat or topic; may be null for messages from the same chat.",
        "name": "origin",
        "type": "MessageOrigin"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was sent if the message was from another chat or topic; 0 for messages from the same chat.",
        "name": "origin_send_date",
        "type": "number"
      },
      {
        "desc": "Media content of the message if the message was from another chat or topic; may be null for messages from the same chat and messages without media. Can be only one of the following types: messageAnimation, messageAudio, messageContact, messageDice, messageDocument, messageGame, messageInvoice, messageLocation, messagePhoto, messagePoll, messagePremiumGiveaway, messageSticker, messageStory, messageText (for link preview), messageVenue, messageVideo, messageVideoNote, or messageVoiceNote.",
        "name": "content",
        "type": "MessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_reply_to_message.html"
  },
  "messageReplyToStory": {
    "type": "object",
    "desc": "Describes a story replied by a given message.",
    "fields": [
      {
        "desc": "The identifier of the sender of the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the story.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_reply_to_story.html"
  },
  "MessageSchedulingState": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the time when a scheduled message will be sent.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_scheduling_state.html"
  },
  "messageSchedulingStateSendAtDate": {
    "type": "object",
    "desc": "The message will be sent at the specified date.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the message will be sent. The date must be within 367 days in the future.",
        "name": "send_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_scheduling_state_send_at_date.html"
  },
  "messageSchedulingStateSendWhenOnline": {
    "type": "object",
    "desc": "The message will be sent when the other user is online. Applicable to private chats only and when the exact online status of the other user is known.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_scheduling_state_send_when_online.html"
  },
  "MessageSelfDestructType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes when a message will be self-destructed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_self_destruct_type.html"
  },
  "messageSelfDestructTypeImmediately": {
    "type": "object",
    "desc": "The message can be opened only once and will be self-destructed once closed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_self_destruct_type_immediately.html"
  },
  "messageSelfDestructTypeTimer": {
    "type": "object",
    "desc": "The message will be self-destructed in the specified time after its content was opened.",
    "fields": [
      {
        "desc": "The message's self-destruct time, in seconds; must be between 0 and 60 in private chats.",
        "name": "self_destruct_time",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_self_destruct_type_timer.html"
  },
  "MessageSender": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the sender of a message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_sender.html"
  },
  "messageSenderChat": {
    "type": "object",
    "desc": "The message was sent on behalf of a chat.",
    "fields": [
      {
        "desc": "Identifier of the chat that sent the message.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sender_chat.html"
  },
  "messageSenderUser": {
    "type": "object",
    "desc": "The message was sent by a known user.",
    "fields": [
      {
        "desc": "Identifier of the user that sent the message.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sender_user.html"
  },
  "MessageSendingState": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the sending state of the message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_sending_state.html"
  },
  "messageSendingStateFailed": {
    "type": "object",
    "desc": "The message failed to be sent.",
    "fields": [
      {
        "desc": "The cause of the message sending failure.",
        "name": "error",
        "type": "error"
      },
      {
        "desc": "True, if the message can be re-sent.",
        "name": "can_retry",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be re-sent only on behalf of a different sender.",
        "name": "need_another_sender",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be re-sent only if another quote is chosen in the message that is replied by the given message.",
        "name": "need_another_reply_quote",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be re-sent only if the message to be replied is removed. This will be done automatically by resendMessages.",
        "name": "need_drop_reply",
        "type": "bool"
      },
      {
        "desc": "Time left before the message can be re-sent, in seconds. No update is sent when this field changes.",
        "name": "retry_after",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sending_state_failed.html"
  },
  "messageSendingStatePending": {
    "type": "object",
    "desc": "The message is being sent now, but has not yet been delivered to the server.",
    "fields": [
      {
        "desc": "Non-persistent message sending identifier, specified by the application.",
        "name": "sending_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sending_state_pending.html"
  },
  "MessageSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes source of a message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_source.html"
  },
  "messageSourceChatEventLog": {
    "type": "object",
    "desc": "The message is from a chat event log.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_chat_event_log.html"
  },
  "messageSourceChatHistory": {
    "type": "object",
    "desc": "The message is from a chat history.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_chat_history.html"
  },
  "messageSourceChatList": {
    "type": "object",
    "desc": "The message is from a chat list or a forum topic list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_chat_list.html"
  },
  "messageSourceForumTopicHistory": {
    "type": "object",
    "desc": "The message is from a forum topic history.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_forum_topic_history.html"
  },
  "messageSourceHistoryPreview": {
    "type": "object",
    "desc": "The message is from chat, message thread or forum topic history preview.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_history_preview.html"
  },
  "messageSourceMessageThreadHistory": {
    "type": "object",
    "desc": "The message is from a message thread history.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_message_thread_history.html"
  },
  "messageSourceNotification": {
    "type": "object",
    "desc": "The message is from a notification.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_notification.html"
  },
  "messageSourceOther": {
    "type": "object",
    "desc": "The message is from some other source.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_other.html"
  },
  "messageSourceScreenshot": {
    "type": "object",
    "desc": "The message was screenshotted; the source must be used only if the message content was visible during the screenshot.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_screenshot.html"
  },
  "messageSourceSearch": {
    "type": "object",
    "desc": "The message is from search results, including file downloads, local file list, outgoing document messages, calendar.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_source_search.html"
  },
  "MessageSponsorType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a message sponsor.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_message_sponsor_type.html"
  },
  "messageSponsorTypeBot": {
    "type": "object",
    "desc": "The sponsor is a bot.",
    "fields": [
      {
        "desc": "User identifier of the bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "An internal link to be opened when the sponsored message is clicked.",
        "name": "link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor_type_bot.html"
  },
  "messageSponsorTypePrivateChannel": {
    "type": "object",
    "desc": "The sponsor is a private channel chat.",
    "fields": [
      {
        "desc": "Title of the chat.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Invite link for the channel.",
        "name": "invite_link",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor_type_private_channel.html"
  },
  "messageSponsorTypePublicChannel": {
    "type": "object",
    "desc": "The sponsor is a public channel chat.",
    "fields": [
      {
        "desc": "Sponsor chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "An internal link to be opened when the sponsored message is clicked; may be null if the sponsor chat needs to be opened instead.",
        "name": "link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor_type_public_channel.html"
  },
  "messageSponsorTypeWebApp": {
    "type": "object",
    "desc": "The sponsor is a web app.",
    "fields": [
      {
        "desc": "Web App title.",
        "name": "web_app_title",
        "type": "string"
      },
      {
        "desc": "An internal link to be opened when the sponsored message is clicked.",
        "name": "link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor_type_web_app.html"
  },
  "messageSponsorTypeWebsite": {
    "type": "object",
    "desc": "The sponsor is a website.",
    "fields": [
      {
        "desc": "URL of the website.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Name of the website.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor_type_website.html"
  },
  "NetworkStatisticsEntry": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains statistics about network usage.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_network_statistics_entry.html"
  },
  "networkStatisticsEntryCall": {
    "type": "object",
    "desc": "Contains information about the total amount of data that was used for calls.",
    "fields": [
      {
        "desc": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type.",
        "name": "network_type",
        "type": "NetworkType"
      },
      {
        "desc": "Total number of bytes sent.",
        "name": "sent_bytes",
        "type": "string"
      },
      {
        "desc": "Total number of bytes received.",
        "name": "received_bytes",
        "type": "string"
      },
      {
        "desc": "Total call duration, in seconds.",
        "name": "duration",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics_entry_call.html"
  },
  "networkStatisticsEntryFile": {
    "type": "object",
    "desc": "Contains information about the total amount of data that was used to send and receive files.",
    "fields": [
      {
        "desc": "Type of the file the data is part of; pass null if the data isn't related to files.",
        "name": "file_type",
        "type": "FileType"
      },
      {
        "desc": "Type of the network the data was sent through. Call setNetworkType to maintain the actual network type.",
        "name": "network_type",
        "type": "NetworkType"
      },
      {
        "desc": "Total number of bytes sent.",
        "name": "sent_bytes",
        "type": "string"
      },
      {
        "desc": "Total number of bytes received.",
        "name": "received_bytes",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics_entry_file.html"
  },
  "NetworkType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the type of a network.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_network_type.html"
  },
  "networkTypeMobile": {
    "type": "object",
    "desc": "A mobile network.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_mobile.html"
  },
  "networkTypeMobileRoaming": {
    "type": "object",
    "desc": "A mobile roaming network.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_mobile_roaming.html"
  },
  "networkTypeNone": {
    "type": "object",
    "desc": "The network is not available.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_none.html"
  },
  "networkTypeOther": {
    "type": "object",
    "desc": "A different network type (e.g., Ethernet network).",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_other.html"
  },
  "networkTypeWiFi": {
    "type": "object",
    "desc": "A Wi-Fi network.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_type_wi_fi.html"
  },
  "NotificationGroupType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of notifications in a notification group.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_notification_group_type.html"
  },
  "notificationGroupTypeCalls": {
    "type": "object",
    "desc": "A group containing notifications of type notificationTypeNewCall.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_group_type_calls.html"
  },
  "notificationGroupTypeMentions": {
    "type": "object",
    "desc": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_group_type_mentions.html"
  },
  "notificationGroupTypeMessages": {
    "type": "object",
    "desc": "A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_group_type_messages.html"
  },
  "notificationGroupTypeSecretChat": {
    "type": "object",
    "desc": "A group containing a notification of type notificationTypeNewSecretChat.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_group_type_secret_chat.html"
  },
  "NotificationSettingsScope": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the types of chats to which notification settings are relevant.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_notification_settings_scope.html"
  },
  "notificationSettingsScopeChannelChats": {
    "type": "object",
    "desc": "Notification settings applied to all channel chats when the corresponding chat setting has a default value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_channel_chats.html"
  },
  "notificationSettingsScopeGroupChats": {
    "type": "object",
    "desc": "Notification settings applied to all basic group and supergroup chats when the corresponding chat setting has a default value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_group_chats.html"
  },
  "notificationSettingsScopePrivateChats": {
    "type": "object",
    "desc": "Notification settings applied to all private and secret chats when the corresponding chat setting has a default value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_settings_scope_private_chats.html"
  },
  "NotificationType": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains detailed information about a notification.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_notification_type.html"
  },
  "notificationTypeNewCall": {
    "type": "object",
    "desc": "New call was received.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "call_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_type_new_call.html"
  },
  "notificationTypeNewMessage": {
    "type": "object",
    "desc": "New message was received.",
    "fields": [
      {
        "desc": "The message.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "True, if message content must be displayed in notifications.",
        "name": "show_preview",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_type_new_message.html"
  },
  "notificationTypeNewPushMessage": {
    "type": "object",
    "desc": "New message was received through a push notification.",
    "fields": [
      {
        "desc": "The message identifier. The message will not be available in the chat history, but the identifier can be used in viewMessages, or as a message to be replied in the same chat.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender of the message. Corresponding user or chat may be inaccessible.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Name of the sender.",
        "name": "sender_name",
        "type": "string"
      },
      {
        "desc": "True, if the message is outgoing.",
        "name": "is_outgoing",
        "type": "bool"
      },
      {
        "desc": "Push message content.",
        "name": "content",
        "type": "PushMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_type_new_push_message.html"
  },
  "notificationTypeNewSecretChat": {
    "type": "object",
    "desc": "New secret chat was created.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_type_new_secret_chat.html"
  },
  "OptionValue": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the value of an option.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_option_value.html"
  },
  "optionValueBoolean": {
    "type": "object",
    "desc": "Represents a boolean option.",
    "fields": [
      {
        "desc": "The value of the option.",
        "name": "value",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_boolean.html"
  },
  "optionValueEmpty": {
    "type": "object",
    "desc": "Represents an unknown option or an option which has a default value.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_empty.html"
  },
  "optionValueInteger": {
    "type": "object",
    "desc": "Represents an integer option.",
    "fields": [
      {
        "desc": "The value of the option.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_integer.html"
  },
  "optionValueString": {
    "type": "object",
    "desc": "Represents a string option.",
    "fields": [
      {
        "desc": "The value of the option.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1option_value_string.html"
  },
  "PageBlock": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a block of an instant view web page.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_page_block.html"
  },
  "pageBlockAnchor": {
    "type": "object",
    "desc": "An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor.",
    "fields": [
      {
        "desc": "Name of the anchor.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_anchor.html"
  },
  "pageBlockAnimation": {
    "type": "object",
    "desc": "An animation.",
    "fields": [
      {
        "desc": "Animation file; may be null.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Animation caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      },
      {
        "desc": "True, if the animation must be played automatically.",
        "name": "need_autoplay",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_animation.html"
  },
  "pageBlockAudio": {
    "type": "object",
    "desc": "An audio file.",
    "fields": [
      {
        "desc": "Audio file; may be null.",
        "name": "audio",
        "type": "audio"
      },
      {
        "desc": "Audio file caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_audio.html"
  },
  "pageBlockAuthorDate": {
    "type": "object",
    "desc": "The author and publishing date of a page.",
    "fields": [
      {
        "desc": "Author.",
        "name": "author",
        "type": "RichText"
      },
      {
        "desc": "Point in time (Unix timestamp) when the article was published; 0 if unknown.",
        "name": "publish_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_author_date.html"
  },
  "pageBlockBlockQuote": {
    "type": "object",
    "desc": "A block quote.",
    "fields": [
      {
        "desc": "Quote text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Quote credit.",
        "name": "credit",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_block_quote.html"
  },
  "pageBlockChatLink": {
    "type": "object",
    "desc": "A link to a chat.",
    "fields": [
      {
        "desc": "Chat title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Chat photo; may be null.",
        "name": "photo",
        "type": "chatPhotoInfo"
      },
      {
        "desc": "Identifier of the accent color for chat title and background of chat photo.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Chat username by which all other information about the chat can be resolved.",
        "name": "username",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_chat_link.html"
  },
  "pageBlockCollage": {
    "type": "object",
    "desc": "A collage.",
    "fields": [
      {
        "desc": "Collage item contents.",
        "name": "page_blocks",
        "type": "PageBlock"
      },
      {
        "desc": "Block caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_collage.html"
  },
  "pageBlockCover": {
    "type": "object",
    "desc": "A page cover.",
    "fields": [
      {
        "desc": "Cover.",
        "name": "cover",
        "type": "PageBlock"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_cover.html"
  },
  "pageBlockDetails": {
    "type": "object",
    "desc": "A collapsible block.",
    "fields": [
      {
        "desc": "Always visible heading for the block.",
        "name": "header",
        "type": "RichText"
      },
      {
        "desc": "Block contents.",
        "name": "page_blocks",
        "type": "PageBlock"
      },
      {
        "desc": "True, if the block is open by default.",
        "name": "is_open",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_details.html"
  },
  "pageBlockDivider": {
    "type": "object",
    "desc": "An empty block separating a page.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_divider.html"
  },
  "pageBlockEmbedded": {
    "type": "object",
    "desc": "An embedded web page.",
    "fields": [
      {
        "desc": "Web page URL, if available.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "HTML-markup of the embedded page.",
        "name": "html",
        "type": "string"
      },
      {
        "desc": "Poster photo, if available; may be null.",
        "name": "poster_photo",
        "type": "photo"
      },
      {
        "desc": "Block width; 0 if unknown.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Block height; 0 if unknown.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Block caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      },
      {
        "desc": "True, if the block must be full width.",
        "name": "is_full_width",
        "type": "bool"
      },
      {
        "desc": "True, if scrolling needs to be allowed.",
        "name": "allow_scrolling",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_embedded.html"
  },
  "pageBlockEmbeddedPost": {
    "type": "object",
    "desc": "An embedded post.",
    "fields": [
      {
        "desc": "Web page URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Post author.",
        "name": "author",
        "type": "string"
      },
      {
        "desc": "Post author photo; may be null.",
        "name": "author_photo",
        "type": "photo"
      },
      {
        "desc": "Point in time (Unix timestamp) when the post was created; 0 if unknown.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Post content.",
        "name": "page_blocks",
        "type": "PageBlock"
      },
      {
        "desc": "Post caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_embedded_post.html"
  },
  "pageBlockFooter": {
    "type": "object",
    "desc": "The footer of a page.",
    "fields": [
      {
        "desc": "Footer.",
        "name": "footer",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_footer.html"
  },
  "pageBlockHeader": {
    "type": "object",
    "desc": "A header.",
    "fields": [
      {
        "desc": "Header.",
        "name": "header",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_header.html"
  },
  "pageBlockKicker": {
    "type": "object",
    "desc": "A kicker.",
    "fields": [
      {
        "desc": "Kicker.",
        "name": "kicker",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_kicker.html"
  },
  "pageBlockList": {
    "type": "object",
    "desc": "A list of data blocks.",
    "fields": [
      {
        "desc": "The items of the list.",
        "name": "items",
        "type": "pageBlockListItem"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_list.html"
  },
  "pageBlockMap": {
    "type": "object",
    "desc": "A map.",
    "fields": [
      {
        "desc": "Location of the map center.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Map zoom level.",
        "name": "zoom",
        "type": "number"
      },
      {
        "desc": "Map width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Map height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Block caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_map.html"
  },
  "pageBlockParagraph": {
    "type": "object",
    "desc": "A text paragraph.",
    "fields": [
      {
        "desc": "Paragraph text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_paragraph.html"
  },
  "pageBlockPhoto": {
    "type": "object",
    "desc": "A photo.",
    "fields": [
      {
        "desc": "Photo file; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Photo caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      },
      {
        "desc": "URL that needs to be opened when the photo is clicked.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_photo.html"
  },
  "pageBlockPreformatted": {
    "type": "object",
    "desc": "A preformatted text paragraph.",
    "fields": [
      {
        "desc": "Paragraph text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Programming language for which the text needs to be formatted.",
        "name": "language",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_preformatted.html"
  },
  "pageBlockPullQuote": {
    "type": "object",
    "desc": "A pull quote.",
    "fields": [
      {
        "desc": "Quote text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Quote credit.",
        "name": "credit",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_pull_quote.html"
  },
  "pageBlockRelatedArticles": {
    "type": "object",
    "desc": "Related articles.",
    "fields": [
      {
        "desc": "Block header.",
        "name": "header",
        "type": "RichText"
      },
      {
        "desc": "List of related articles.",
        "name": "articles",
        "type": "pageBlockRelatedArticle"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_related_articles.html"
  },
  "pageBlockSlideshow": {
    "type": "object",
    "desc": "A slideshow.",
    "fields": [
      {
        "desc": "Slideshow item contents.",
        "name": "page_blocks",
        "type": "PageBlock"
      },
      {
        "desc": "Block caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_slideshow.html"
  },
  "pageBlockSubheader": {
    "type": "object",
    "desc": "A subheader.",
    "fields": [
      {
        "desc": "Subheader.",
        "name": "subheader",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_subheader.html"
  },
  "pageBlockSubtitle": {
    "type": "object",
    "desc": "The subtitle of a page.",
    "fields": [
      {
        "desc": "Subtitle.",
        "name": "subtitle",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_subtitle.html"
  },
  "pageBlockTable": {
    "type": "object",
    "desc": "A table.",
    "fields": [
      {
        "desc": "Table caption.",
        "name": "caption",
        "type": "RichText"
      },
      {
        "desc": "Table cells.",
        "name": "cells",
        "type": "pageBlockTableCell"
      },
      {
        "desc": "True, if the table is bordered.",
        "name": "is_bordered",
        "type": "bool"
      },
      {
        "desc": "True, if the table is striped.",
        "name": "is_striped",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_table.html"
  },
  "pageBlockTitle": {
    "type": "object",
    "desc": "The title of a page.",
    "fields": [
      {
        "desc": "Title.",
        "name": "title",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_title.html"
  },
  "pageBlockVideo": {
    "type": "object",
    "desc": "A video.",
    "fields": [
      {
        "desc": "Video file; may be null.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Video caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      },
      {
        "desc": "True, if the video must be played automatically.",
        "name": "need_autoplay",
        "type": "bool"
      },
      {
        "desc": "True, if the video must be looped.",
        "name": "is_looped",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_video.html"
  },
  "pageBlockVoiceNote": {
    "type": "object",
    "desc": "A voice note.",
    "fields": [
      {
        "desc": "Voice note; may be null.",
        "name": "voice_note",
        "type": "voiceNote"
      },
      {
        "desc": "Voice note caption.",
        "name": "caption",
        "type": "pageBlockCaption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_voice_note.html"
  },
  "PageBlockHorizontalAlignment": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a horizontal alignment of a table cell content.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_page_block_horizontal_alignment.html"
  },
  "pageBlockHorizontalAlignmentCenter": {
    "type": "object",
    "desc": "The content must be center-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_horizontal_alignment_center.html"
  },
  "pageBlockHorizontalAlignmentLeft": {
    "type": "object",
    "desc": "The content must be left-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_horizontal_alignment_left.html"
  },
  "pageBlockHorizontalAlignmentRight": {
    "type": "object",
    "desc": "The content must be right-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_horizontal_alignment_right.html"
  },
  "PageBlockVerticalAlignment": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a Vertical alignment of a table cell content.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_page_block_vertical_alignment.html"
  },
  "pageBlockVerticalAlignmentBottom": {
    "type": "object",
    "desc": "The content must be bottom-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_vertical_alignment_bottom.html"
  },
  "pageBlockVerticalAlignmentMiddle": {
    "type": "object",
    "desc": "The content must be middle-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_vertical_alignment_middle.html"
  },
  "pageBlockVerticalAlignmentTop": {
    "type": "object",
    "desc": "The content must be top-aligned.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_vertical_alignment_top.html"
  },
  "PassportElement": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about a Telegram Passport element.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_passport_element.html"
  },
  "passportElementAddress": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's address.",
    "fields": [
      {
        "desc": "Address.",
        "name": "address",
        "type": "address"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_address.html"
  },
  "passportElementBankStatement": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's bank statement.",
    "fields": [
      {
        "desc": "Bank statement.",
        "name": "bank_statement",
        "type": "personalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_bank_statement.html"
  },
  "passportElementDriverLicense": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's driver license.",
    "fields": [
      {
        "desc": "Driver license.",
        "name": "driver_license",
        "type": "identityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_driver_license.html"
  },
  "passportElementEmailAddress": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's email address.",
    "fields": [
      {
        "desc": "Email address.",
        "name": "email_address",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_email_address.html"
  },
  "passportElementIdentityCard": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's identity card.",
    "fields": [
      {
        "desc": "Identity card.",
        "name": "identity_card",
        "type": "identityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_identity_card.html"
  },
  "passportElementInternalPassport": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's internal passport.",
    "fields": [
      {
        "desc": "Internal passport.",
        "name": "internal_passport",
        "type": "identityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_internal_passport.html"
  },
  "passportElementPassport": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's passport.",
    "fields": [
      {
        "desc": "Passport.",
        "name": "passport",
        "type": "identityDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_passport.html"
  },
  "passportElementPassportRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's passport registration pages.",
    "fields": [
      {
        "desc": "Passport registration pages.",
        "name": "passport_registration",
        "type": "personalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_passport_registration.html"
  },
  "passportElementPersonalDetails": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's personal details.",
    "fields": [
      {
        "desc": "Personal details of the user.",
        "name": "personal_details",
        "type": "personalDetails"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_personal_details.html"
  },
  "passportElementPhoneNumber": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's phone number.",
    "fields": [
      {
        "desc": "Phone number.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_phone_number.html"
  },
  "passportElementRentalAgreement": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's rental agreement.",
    "fields": [
      {
        "desc": "Rental agreement.",
        "name": "rental_agreement",
        "type": "personalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_rental_agreement.html"
  },
  "passportElementTemporaryRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's temporary registration.",
    "fields": [
      {
        "desc": "Temporary registration.",
        "name": "temporary_registration",
        "type": "personalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_temporary_registration.html"
  },
  "passportElementUtilityBill": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's utility bill.",
    "fields": [
      {
        "desc": "Utility bill.",
        "name": "utility_bill",
        "type": "personalDocument"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_utility_bill.html"
  },
  "PassportElementErrorSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains the description of an error in a Telegram Passport element.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_passport_element_error_source.html"
  },
  "passportElementErrorSourceDataField": {
    "type": "object",
    "desc": "One of the data fields contains an error. The error will be considered resolved when the value of the field changes.",
    "fields": [
      {
        "desc": "Field name.",
        "name": "field_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_data_field.html"
  },
  "passportElementErrorSourceFile": {
    "type": "object",
    "desc": "The file contains an error. The error will be considered resolved when the file changes.",
    "fields": [
      {
        "desc": "Index of a file with the error.",
        "name": "file_index",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_file.html"
  },
  "passportElementErrorSourceFiles": {
    "type": "object",
    "desc": "The list of attached files contains an error. The error will be considered resolved when the list of files changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_files.html"
  },
  "passportElementErrorSourceFrontSide": {
    "type": "object",
    "desc": "The front side of the document contains an error. The error will be considered resolved when the file with the front side changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_front_side.html"
  },
  "passportElementErrorSourceReverseSide": {
    "type": "object",
    "desc": "The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_reverse_side.html"
  },
  "passportElementErrorSourceSelfie": {
    "type": "object",
    "desc": "The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_selfie.html"
  },
  "passportElementErrorSourceTranslationFile": {
    "type": "object",
    "desc": "One of files with the translation of the document contains an error. The error will be considered resolved when the file changes.",
    "fields": [
      {
        "desc": "Index of a file with the error.",
        "name": "file_index",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_translation_file.html"
  },
  "passportElementErrorSourceTranslationFiles": {
    "type": "object",
    "desc": "The translation of the document contains an error. The error will be considered resolved when the list of translation files changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_translation_files.html"
  },
  "passportElementErrorSourceUnspecified": {
    "type": "object",
    "desc": "The element contains an error in an unspecified place. The error will be considered resolved when new data is added.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error_source_unspecified.html"
  },
  "PassportElementType": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains the type of a Telegram Passport element.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_passport_element_type.html"
  },
  "passportElementTypeAddress": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's address.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_address.html"
  },
  "passportElementTypeBankStatement": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's bank statement.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_bank_statement.html"
  },
  "passportElementTypeDriverLicense": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's driver license.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_driver_license.html"
  },
  "passportElementTypeEmailAddress": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's email address.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_email_address.html"
  },
  "passportElementTypeIdentityCard": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's identity card.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_identity_card.html"
  },
  "passportElementTypeInternalPassport": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's internal passport.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_internal_passport.html"
  },
  "passportElementTypePassport": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's passport.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_passport.html"
  },
  "passportElementTypePassportRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element containing the registration page of the user's passport.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_passport_registration.html"
  },
  "passportElementTypePersonalDetails": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's personal details.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_personal_details.html"
  },
  "passportElementTypePhoneNumber": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's phone number.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_phone_number.html"
  },
  "passportElementTypeRentalAgreement": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's rental agreement.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_rental_agreement.html"
  },
  "passportElementTypeTemporaryRegistration": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's temporary registration.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_temporary_registration.html"
  },
  "passportElementTypeUtilityBill": {
    "type": "object",
    "desc": "A Telegram Passport element containing the user's utility bill.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_type_utility_bill.html"
  },
  "PaymentProvider": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about a payment provider.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_payment_provider.html"
  },
  "paymentProviderOther": {
    "type": "object",
    "desc": "Some other payment provider, for which a web payment form must be shown.",
    "fields": [
      {
        "desc": "Payment form URL.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_provider_other.html"
  },
  "paymentProviderSmartGlocal": {
    "type": "object",
    "desc": "Smart Glocal payment provider.",
    "fields": [
      {
        "desc": "Public payment token.",
        "name": "public_token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_provider_smart_glocal.html"
  },
  "paymentProviderStripe": {
    "type": "object",
    "desc": "Stripe payment provider.",
    "fields": [
      {
        "desc": "Stripe API publishable key.",
        "name": "publishable_key",
        "type": "string"
      },
      {
        "desc": "True, if the user country must be provided.",
        "name": "need_country",
        "type": "bool"
      },
      {
        "desc": "True, if the user ZIP/postal code must be provided.",
        "name": "need_postal_code",
        "type": "bool"
      },
      {
        "desc": "True, if the cardholder name must be provided.",
        "name": "need_cardholder_name",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_provider_stripe.html"
  },
  "PollType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a poll.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_poll_type.html"
  },
  "pollTypeQuiz": {
    "type": "object",
    "desc": "A poll in quiz mode, which has exactly one correct answer option and can be answered only once.",
    "fields": [
      {
        "desc": "0-based identifier of the correct answer option; -1 for a yet unanswered poll.",
        "name": "correct_option_id",
        "type": "number"
      },
      {
        "desc": "Text that is shown when the user chooses an incorrect answer or taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll.",
        "name": "explanation",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1poll_type_quiz.html"
  },
  "pollTypeRegular": {
    "type": "object",
    "desc": "A regular poll.",
    "fields": [
      {
        "desc": "True, if multiple answer options can be chosen simultaneously.",
        "name": "allow_multiple_answers",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1poll_type_regular.html"
  },
  "PremiumFeature": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a feature available to Premium users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_feature.html"
  },
  "premiumFeatureAccentColor": {
    "type": "object",
    "desc": "The ability to choose accent color for replies and user profile.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_accent_color.html"
  },
  "premiumFeatureAdvancedChatManagement": {
    "type": "object",
    "desc": "Ability to change position of the main chat list, archive and mute all new chats from non-contacts, and completely disable notifications about the user's contacts joined Telegram.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_advanced_chat_management.html"
  },
  "premiumFeatureAnimatedProfilePhoto": {
    "type": "object",
    "desc": "Profile photo animation on message and chat screens.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_animated_profile_photo.html"
  },
  "premiumFeatureAppIcons": {
    "type": "object",
    "desc": "Allowed to set a premium application icons.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_app_icons.html"
  },
  "premiumFeatureBackgroundForBoth": {
    "type": "object",
    "desc": "The ability to set private chat background for both users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_background_for_both.html"
  },
  "premiumFeatureChatBoost": {
    "type": "object",
    "desc": "The ability to boost chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_chat_boost.html"
  },
  "premiumFeatureCustomEmoji": {
    "type": "object",
    "desc": "Allowed to use custom emoji stickers in message texts and captions.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_custom_emoji.html"
  },
  "premiumFeatureDisabledAds": {
    "type": "object",
    "desc": "Disabled ads.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_disabled_ads.html"
  },
  "premiumFeatureEmojiStatus": {
    "type": "object",
    "desc": "An emoji status shown along with the user's name.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_emoji_status.html"
  },
  "premiumFeatureForumTopicIcon": {
    "type": "object",
    "desc": "The ability to set a custom emoji as a forum topic icon.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_forum_topic_icon.html"
  },
  "premiumFeatureImprovedDownloadSpeed": {
    "type": "object",
    "desc": "Improved download speed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_improved_download_speed.html"
  },
  "premiumFeatureIncreasedLimits": {
    "type": "object",
    "desc": "Increased limits.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_increased_limits.html"
  },
  "premiumFeatureIncreasedUploadFileSize": {
    "type": "object",
    "desc": "Increased maximum upload file size.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_increased_upload_file_size.html"
  },
  "premiumFeatureProfileBadge": {
    "type": "object",
    "desc": "A badge in the user's profile.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_profile_badge.html"
  },
  "premiumFeatureRealTimeChatTranslation": {
    "type": "object",
    "desc": "Allowed to translate chat messages real-time.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_real_time_chat_translation.html"
  },
  "premiumFeatureUniqueReactions": {
    "type": "object",
    "desc": "Allowed to use more reactions.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_unique_reactions.html"
  },
  "premiumFeatureUniqueStickers": {
    "type": "object",
    "desc": "Allowed to use premium stickers with unique effects.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_unique_stickers.html"
  },
  "premiumFeatureUpgradedStories": {
    "type": "object",
    "desc": "Allowed to use many additional features for stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_upgraded_stories.html"
  },
  "premiumFeatureVoiceRecognition": {
    "type": "object",
    "desc": "The ability to convert voice notes to text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_voice_recognition.html"
  },
  "PremiumGiveawayInfo": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about Telegram Premium giveaway.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_giveaway_info.html"
  },
  "premiumGiveawayInfoCompleted": {
    "type": "object",
    "desc": "Describes a completed giveaway.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the giveaway was created.",
        "name": "creation_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in parameters of the giveaway.",
        "name": "actual_winners_selection_date",
        "type": "number"
      },
      {
        "desc": "True, if the giveaway was canceled and was fully refunded.",
        "name": "was_refunded",
        "type": "bool"
      },
      {
        "desc": "Number of winners in the giveaway.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of winners, which activated their gift codes.",
        "name": "activation_count",
        "type": "number"
      },
      {
        "desc": "Telegram Premium gift code that was received by the current user; empty if the user isn't a winner in the giveaway.",
        "name": "gift_code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_info_completed.html"
  },
  "premiumGiveawayInfoOngoing": {
    "type": "object",
    "desc": "Describes an ongoing giveaway.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the giveaway was created.",
        "name": "creation_date",
        "type": "number"
      },
      {
        "desc": "Status of the current user in the giveaway.",
        "name": "status",
        "type": "PremiumGiveawayParticipantStatus"
      },
      {
        "desc": "True, if the giveaway has ended and results are being prepared.",
        "name": "is_ended",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_info_ongoing.html"
  },
  "PremiumGiveawayParticipantStatus": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about status of a user in a Telegram Premium giveaway.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_giveaway_participant_status.html"
  },
  "premiumGiveawayParticipantStatusAdministrator": {
    "type": "object",
    "desc": "The user can't participate in the giveaway, because they are an administrator in one of the chats that created the giveaway.",
    "fields": [
      {
        "desc": "Identifier of the chat administered by the user.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_participant_status_administrator.html"
  },
  "premiumGiveawayParticipantStatusAlreadyWasMember": {
    "type": "object",
    "desc": "The user can't participate in the giveaway, because they have already been member of the chat.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the user joined the chat.",
        "name": "joined_chat_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_participant_status_already_was_member.html"
  },
  "premiumGiveawayParticipantStatusDisallowedCountry": {
    "type": "object",
    "desc": "The user can't participate in the giveaway, because they phone number is from a disallowed country.",
    "fields": [
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code of the user's country.",
        "name": "user_country_code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_participant_status_disallowed_country.html"
  },
  "premiumGiveawayParticipantStatusEligible": {
    "type": "object",
    "desc": "The user is eligible for the giveaway.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_participant_status_eligible.html"
  },
  "premiumGiveawayParticipantStatusParticipating": {
    "type": "object",
    "desc": "The user participates in the giveaway.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_participant_status_participating.html"
  },
  "PremiumLimitType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a limit, increased for Premium users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_limit_type.html"
  },
  "premiumLimitTypeActiveStoryCount": {
    "type": "object",
    "desc": "The maximum number of active stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_active_story_count.html"
  },
  "premiumLimitTypeBioLength": {
    "type": "object",
    "desc": "The maximum length of the user's bio.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_bio_length.html"
  },
  "premiumLimitTypeCaptionLength": {
    "type": "object",
    "desc": "The maximum length of sent media caption.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_caption_length.html"
  },
  "premiumLimitTypeChatFolderChosenChatCount": {
    "type": "object",
    "desc": "The maximum number of pinned and always included, or always excluded chats in a chat folder.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_chat_folder_chosen_chat_count.html"
  },
  "premiumLimitTypeChatFolderCount": {
    "type": "object",
    "desc": "The maximum number of chat folders.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_chat_folder_count.html"
  },
  "premiumLimitTypeChatFolderInviteLinkCount": {
    "type": "object",
    "desc": "The maximum number of invite links for a chat folder.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_chat_folder_invite_link_count.html"
  },
  "premiumLimitTypeCreatedPublicChatCount": {
    "type": "object",
    "desc": "The maximum number of created public chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_created_public_chat_count.html"
  },
  "premiumLimitTypeFavoriteStickerCount": {
    "type": "object",
    "desc": "The maximum number of favorite stickers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_favorite_sticker_count.html"
  },
  "premiumLimitTypeMonthlySentStoryCount": {
    "type": "object",
    "desc": "The maximum number of stories sent per month.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_monthly_sent_story_count.html"
  },
  "premiumLimitTypePinnedArchivedChatCount": {
    "type": "object",
    "desc": "The maximum number of pinned chats in the archive chat list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_pinned_archived_chat_count.html"
  },
  "premiumLimitTypePinnedChatCount": {
    "type": "object",
    "desc": "The maximum number of pinned chats in the main chat list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_pinned_chat_count.html"
  },
  "premiumLimitTypeSavedAnimationCount": {
    "type": "object",
    "desc": "The maximum number of saved animations.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_saved_animation_count.html"
  },
  "premiumLimitTypeShareableChatFolderCount": {
    "type": "object",
    "desc": "The maximum number of added shareable chat folders.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_shareable_chat_folder_count.html"
  },
  "premiumLimitTypeSimilarChatCount": {
    "type": "object",
    "desc": "The maximum number of received similar chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_similar_chat_count.html"
  },
  "premiumLimitTypeStoryCaptionLength": {
    "type": "object",
    "desc": "The maximum length of captions of sent stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_story_caption_length.html"
  },
  "premiumLimitTypeStorySuggestedReactionAreaCount": {
    "type": "object",
    "desc": "The maximum number of suggested reaction areas on a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_story_suggested_reaction_area_count.html"
  },
  "premiumLimitTypeSupergroupCount": {
    "type": "object",
    "desc": "The maximum number of joined supergroups and channels.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_supergroup_count.html"
  },
  "premiumLimitTypeWeeklySentStoryCount": {
    "type": "object",
    "desc": "The maximum number of stories sent per week.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit_type_weekly_sent_story_count.html"
  },
  "PremiumSource": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a source from which the Premium features screen is opened.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_source.html"
  },
  "premiumSourceFeature": {
    "type": "object",
    "desc": "A user tried to use a Premium feature.",
    "fields": [
      {
        "desc": "The used feature.",
        "name": "feature",
        "type": "PremiumFeature"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_source_feature.html"
  },
  "premiumSourceLimitExceeded": {
    "type": "object",
    "desc": "A limit was exceeded.",
    "fields": [
      {
        "desc": "Type of the exceeded limit.",
        "name": "limit_type",
        "type": "PremiumLimitType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_source_limit_exceeded.html"
  },
  "premiumSourceLink": {
    "type": "object",
    "desc": "A user opened an internal link of the type internalLinkTypePremiumFeatures.",
    "fields": [
      {
        "desc": "The referrer from the link.",
        "name": "referrer",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_source_link.html"
  },
  "premiumSourceSettings": {
    "type": "object",
    "desc": "A user opened the Premium features screen from settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_source_settings.html"
  },
  "premiumSourceStoryFeature": {
    "type": "object",
    "desc": "A user tried to use a Premium story feature.",
    "fields": [
      {
        "desc": "The used feature.",
        "name": "feature",
        "type": "PremiumStoryFeature"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_source_story_feature.html"
  },
  "PremiumStoryFeature": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a story feature available to Premium users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_premium_story_feature.html"
  },
  "premiumStoryFeatureCustomExpirationDuration": {
    "type": "object",
    "desc": "The ability to set custom expiration duration for stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_custom_expiration_duration.html"
  },
  "premiumStoryFeatureLinksAndFormatting": {
    "type": "object",
    "desc": "The ability to use links and formatting in story caption.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_links_and_formatting.html"
  },
  "premiumStoryFeaturePermanentViewsHistory": {
    "type": "object",
    "desc": "The ability to check who opened the current user's stories after they expire.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_permanent_views_history.html"
  },
  "premiumStoryFeaturePriorityOrder": {
    "type": "object",
    "desc": "User stories are displayed before stories of non-premium contacts and channels.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_priority_order.html"
  },
  "premiumStoryFeatureSaveStories": {
    "type": "object",
    "desc": "The ability to save other's unprotected stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_save_stories.html"
  },
  "premiumStoryFeatureStealthMode": {
    "type": "object",
    "desc": "The ability to hide the fact that the user viewed other's stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_story_feature_stealth_mode.html"
  },
  "ProxyType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a proxy server.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_proxy_type.html"
  },
  "proxyTypeHttp": {
    "type": "object",
    "desc": "A HTTP transparent proxy server.",
    "fields": [
      {
        "desc": "Username for logging in; may be empty.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Password for logging in; may be empty.",
        "name": "password",
        "type": "string"
      },
      {
        "desc": "Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method.",
        "name": "http_only",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy_type_http.html"
  },
  "proxyTypeMtproto": {
    "type": "object",
    "desc": "An MTProto proxy server.",
    "fields": [
      {
        "desc": "The proxy's secret in hexadecimal encoding.",
        "name": "secret",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy_type_mtproto.html"
  },
  "proxyTypeSocks5": {
    "type": "object",
    "desc": "A SOCKS5 proxy server.",
    "fields": [
      {
        "desc": "Username for logging in; may be empty.",
        "name": "username",
        "type": "string"
      },
      {
        "desc": "Password for logging in; may be empty.",
        "name": "password",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy_type_socks5.html"
  },
  "PublicChatType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a type of public chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_public_chat_type.html"
  },
  "publicChatTypeHasUsername": {
    "type": "object",
    "desc": "The chat is public, because it has an active username.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1public_chat_type_has_username.html"
  },
  "publicChatTypeIsLocationBased": {
    "type": "object",
    "desc": "The chat is public, because it is a location-based supergroup.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1public_chat_type_is_location_based.html"
  },
  "PushMessageContent": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains content of a push message notification.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_push_message_content.html"
  },
  "pushMessageContentAnimation": {
    "type": "object",
    "desc": "An animation message (GIF-style).",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Animation caption.",
        "name": "caption",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_animation.html"
  },
  "pushMessageContentAudio": {
    "type": "object",
    "desc": "An audio message.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "audio",
        "type": "audio"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_audio.html"
  },
  "pushMessageContentBasicGroupChatCreate": {
    "type": "object",
    "desc": "A newly created basic group.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_basic_group_chat_create.html"
  },
  "pushMessageContentChatAddMembers": {
    "type": "object",
    "desc": "New chat members were invited to a group.",
    "fields": [
      {
        "desc": "Name of the added member.",
        "name": "member_name",
        "type": "string"
      },
      {
        "desc": "True, if the current user was added to the group.",
        "name": "is_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the user has returned to the group themselves.",
        "name": "is_returned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_add_members.html"
  },
  "pushMessageContentChatChangePhoto": {
    "type": "object",
    "desc": "A chat photo was edited.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_change_photo.html"
  },
  "pushMessageContentChatChangeTitle": {
    "type": "object",
    "desc": "A chat title was edited.",
    "fields": [
      {
        "desc": "New chat title.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_change_title.html"
  },
  "pushMessageContentChatDeleteMember": {
    "type": "object",
    "desc": "A chat member was deleted.",
    "fields": [
      {
        "desc": "Name of the deleted member.",
        "name": "member_name",
        "type": "string"
      },
      {
        "desc": "True, if the current user was deleted from the group.",
        "name": "is_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the user has left the group themselves.",
        "name": "is_left",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_delete_member.html"
  },
  "pushMessageContentChatJoinByLink": {
    "type": "object",
    "desc": "A new member joined the chat via an invite link.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_join_by_link.html"
  },
  "pushMessageContentChatJoinByRequest": {
    "type": "object",
    "desc": "A new member was accepted to the chat by an administrator.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_join_by_request.html"
  },
  "pushMessageContentChatSetBackground": {
    "type": "object",
    "desc": "A chat background was edited.",
    "fields": [
      {
        "desc": "True, if the set background is the same as the background of the current user.",
        "name": "is_same",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_set_background.html"
  },
  "pushMessageContentChatSetTheme": {
    "type": "object",
    "desc": "A chat theme was edited.",
    "fields": [
      {
        "desc": "If non-empty, name of a new theme, set for the chat. Otherwise, the chat theme was reset to the default one.",
        "name": "theme_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_chat_set_theme.html"
  },
  "pushMessageContentContact": {
    "type": "object",
    "desc": "A message with a user contact.",
    "fields": [
      {
        "desc": "Contact's name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_contact.html"
  },
  "pushMessageContentContactRegistered": {
    "type": "object",
    "desc": "A contact has registered with Telegram.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_contact_registered.html"
  },
  "pushMessageContentDocument": {
    "type": "object",
    "desc": "A document message (a general file).",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_document.html"
  },
  "pushMessageContentGame": {
    "type": "object",
    "desc": "A message with a game.",
    "fields": [
      {
        "desc": "Game title, empty for pinned game message.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_game.html"
  },
  "pushMessageContentGameScore": {
    "type": "object",
    "desc": "A new high score was achieved in a game.",
    "fields": [
      {
        "desc": "Game title, empty for pinned message.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "New score, 0 for pinned message.",
        "name": "score",
        "type": "number"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_game_score.html"
  },
  "pushMessageContentHidden": {
    "type": "object",
    "desc": "A general message with hidden content.",
    "fields": [
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_hidden.html"
  },
  "pushMessageContentInvoice": {
    "type": "object",
    "desc": "A message with an invoice from a bot.",
    "fields": [
      {
        "desc": "Product price.",
        "name": "price",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_invoice.html"
  },
  "pushMessageContentLocation": {
    "type": "object",
    "desc": "A message with a location.",
    "fields": [
      {
        "desc": "True, if the location is live.",
        "name": "is_live",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_location.html"
  },
  "pushMessageContentMediaAlbum": {
    "type": "object",
    "desc": "A media album.",
    "fields": [
      {
        "desc": "Number of messages in the album.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "True, if the album has at least one photo.",
        "name": "has_photos",
        "type": "bool"
      },
      {
        "desc": "True, if the album has at least one video file.",
        "name": "has_videos",
        "type": "bool"
      },
      {
        "desc": "True, if the album has at least one audio file.",
        "name": "has_audios",
        "type": "bool"
      },
      {
        "desc": "True, if the album has at least one document.",
        "name": "has_documents",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_media_album.html"
  },
  "pushMessageContentMessageForwards": {
    "type": "object",
    "desc": "A forwarded messages.",
    "fields": [
      {
        "desc": "Number of forwarded messages.",
        "name": "total_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_message_forwards.html"
  },
  "pushMessageContentPhoto": {
    "type": "object",
    "desc": "A photo message.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Photo caption.",
        "name": "caption",
        "type": "string"
      },
      {
        "desc": "True, if the photo is secret.",
        "name": "is_secret",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_photo.html"
  },
  "pushMessageContentPoll": {
    "type": "object",
    "desc": "A message with a poll.",
    "fields": [
      {
        "desc": "Poll question.",
        "name": "question",
        "type": "string"
      },
      {
        "desc": "True, if the poll is regular and not in quiz mode.",
        "name": "is_regular",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_poll.html"
  },
  "pushMessageContentPremiumGiftCode": {
    "type": "object",
    "desc": "A message with a Telegram Premium gift code created for the user.",
    "fields": [
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation.",
        "name": "month_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_premium_gift_code.html"
  },
  "pushMessageContentPremiumGiveaway": {
    "type": "object",
    "desc": "A message with a Telegram Premium giveaway.",
    "fields": [
      {
        "desc": "Number of users which will receive Telegram Premium subscription gift codes; 0 for pinned message.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation; 0 for pinned message.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_premium_giveaway.html"
  },
  "pushMessageContentRecurringPayment": {
    "type": "object",
    "desc": "A new recurring payment was made by the current user.",
    "fields": [
      {
        "desc": "The paid amount.",
        "name": "amount",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_recurring_payment.html"
  },
  "pushMessageContentScreenshotTaken": {
    "type": "object",
    "desc": "A screenshot of a message in the chat has been taken.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_screenshot_taken.html"
  },
  "pushMessageContentSticker": {
    "type": "object",
    "desc": "A message with a sticker.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "sticker",
        "type": "sticker"
      },
      {
        "desc": "Emoji corresponding to the sticker; may be empty.",
        "name": "emoji",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_sticker.html"
  },
  "pushMessageContentStory": {
    "type": "object",
    "desc": "A message with a story.",
    "fields": [
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_story.html"
  },
  "pushMessageContentSuggestProfilePhoto": {
    "type": "object",
    "desc": "A profile photo was suggested to the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_suggest_profile_photo.html"
  },
  "pushMessageContentText": {
    "type": "object",
    "desc": "A text message.",
    "fields": [
      {
        "desc": "Message text.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_text.html"
  },
  "pushMessageContentVideo": {
    "type": "object",
    "desc": "A video message.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Video caption.",
        "name": "caption",
        "type": "string"
      },
      {
        "desc": "True, if the video is secret.",
        "name": "is_secret",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_video.html"
  },
  "pushMessageContentVideoNote": {
    "type": "object",
    "desc": "A video note message.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "video_note",
        "type": "videoNote"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_video_note.html"
  },
  "pushMessageContentVoiceNote": {
    "type": "object",
    "desc": "A voice note message.",
    "fields": [
      {
        "desc": "Message content; may be null.",
        "name": "voice_note",
        "type": "voiceNote"
      },
      {
        "desc": "True, if the message is a pinned message with the specified content.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_message_content_voice_note.html"
  },
  "ReactionType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of message reaction.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_reaction_type.html"
  },
  "reactionTypeCustomEmoji": {
    "type": "object",
    "desc": "A reaction with a custom emoji.",
    "fields": [
      {
        "desc": "Unique identifier of the custom emoji.",
        "name": "custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reaction_type_custom_emoji.html"
  },
  "reactionTypeEmoji": {
    "type": "object",
    "desc": "A reaction with an emoji.",
    "fields": [
      {
        "desc": "Text representation of the reaction.",
        "name": "emoji",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reaction_type_emoji.html"
  },
  "ReplyMarkup": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains a description of a custom keyboard and actions that can be done\n        with it to quickly reply to bots.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_reply_markup.html"
  },
  "replyMarkupForceReply": {
    "type": "object",
    "desc": "Instructs application to force a reply to this message.",
    "fields": [
      {
        "desc": "True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply.",
        "name": "is_personal",
        "type": "bool"
      },
      {
        "desc": "If non-empty, the placeholder to be shown in the input field when the reply is active; 0-64 characters.",
        "name": "input_field_placeholder",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_force_reply.html"
  },
  "replyMarkupInlineKeyboard": {
    "type": "object",
    "desc": "Contains an inline keyboard layout.",
    "fields": [
      {
        "desc": "A list of rows of inline keyboard buttons.",
        "name": "rows",
        "type": "inlineKeyboardButton"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_inline_keyboard.html"
  },
  "replyMarkupRemoveKeyboard": {
    "type": "object",
    "desc": "Instructs application to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, updateChatReplyMarkup with message_id == 0 will be sent.",
    "fields": [
      {
        "desc": "True, if the keyboard is removed only for the mentioned users or the target user of a reply.",
        "name": "is_personal",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_remove_keyboard.html"
  },
  "replyMarkupShowKeyboard": {
    "type": "object",
    "desc": "Contains a custom keyboard layout to quickly reply to bots.",
    "fields": [
      {
        "desc": "A list of rows of bot keyboard buttons.",
        "name": "rows",
        "type": "keyboardButton"
      },
      {
        "desc": "True, if the keyboard is supposed to always be shown when the ordinary keyboard is hidden.",
        "name": "is_persistent",
        "type": "bool"
      },
      {
        "desc": "True, if the application needs to resize the keyboard vertically.",
        "name": "resize_keyboard",
        "type": "bool"
      },
      {
        "desc": "True, if the application needs to hide the keyboard after use.",
        "name": "one_time",
        "type": "bool"
      },
      {
        "desc": "True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply.",
        "name": "is_personal",
        "type": "bool"
      },
      {
        "desc": "If non-empty, the placeholder to be shown in the input field when the keyboard is active; 0-64 characters.",
        "name": "input_field_placeholder",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reply_markup_show_keyboard.html"
  },
  "ReportReason": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the reason why a chat is reported.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_report_reason.html"
  },
  "reportReasonChildAbuse": {
    "type": "object",
    "desc": "The chat has child abuse related content.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_child_abuse.html"
  },
  "reportReasonCopyright": {
    "type": "object",
    "desc": "The chat contains copyrighted content.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_copyright.html"
  },
  "reportReasonCustom": {
    "type": "object",
    "desc": "A custom reason provided by the user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_custom.html"
  },
  "reportReasonFake": {
    "type": "object",
    "desc": "The chat represents a fake account.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_fake.html"
  },
  "reportReasonIllegalDrugs": {
    "type": "object",
    "desc": "The chat has illegal drugs related content.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_illegal_drugs.html"
  },
  "reportReasonPersonalDetails": {
    "type": "object",
    "desc": "The chat contains messages with personal details.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_personal_details.html"
  },
  "reportReasonPornography": {
    "type": "object",
    "desc": "The chat contains pornographic messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_pornography.html"
  },
  "reportReasonSpam": {
    "type": "object",
    "desc": "The chat contains spam messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_spam.html"
  },
  "reportReasonUnrelatedLocation": {
    "type": "object",
    "desc": "The location-based chat is unrelated to its stated location.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_unrelated_location.html"
  },
  "reportReasonViolence": {
    "type": "object",
    "desc": "The chat promotes violence.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1report_reason_violence.html"
  },
  "ResetPasswordResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents result of 2-step verification password reset.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_reset_password_result.html"
  },
  "resetPasswordResultDeclined": {
    "type": "object",
    "desc": "The password reset request was declined.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the password reset can be retried.",
        "name": "retry_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_password_result_declined.html"
  },
  "resetPasswordResultOk": {
    "type": "object",
    "desc": "The password was reset.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_password_result_ok.html"
  },
  "resetPasswordResultPending": {
    "type": "object",
    "desc": "The password reset request is pending.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) after which the password can be reset immediately using resetPassword.",
        "name": "pending_reset_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1reset_password_result_pending.html"
  },
  "RichText": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a text object inside an instant-view web page.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_rich_text.html"
  },
  "richTextAnchor": {
    "type": "object",
    "desc": "An anchor.",
    "fields": [
      {
        "desc": "Anchor name.",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_anchor.html"
  },
  "richTextAnchorLink": {
    "type": "object",
    "desc": "A link to an anchor on the same web page.",
    "fields": [
      {
        "desc": "The link text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "The anchor name. If the name is empty, the link must bring back to top.",
        "name": "anchor_name",
        "type": "string"
      },
      {
        "desc": "An HTTP URL, opening the anchor.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_anchor_link.html"
  },
  "richTextBold": {
    "type": "object",
    "desc": "A bold rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_bold.html"
  },
  "richTextEmailAddress": {
    "type": "object",
    "desc": "A rich text email link.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Email address.",
        "name": "email_address",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_email_address.html"
  },
  "richTextFixed": {
    "type": "object",
    "desc": "A fixed-width rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_fixed.html"
  },
  "richTextIcon": {
    "type": "object",
    "desc": "A small image inside the text.",
    "fields": [
      {
        "desc": "The image represented as a document. The image can be in GIF, JPEG or PNG format.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "Width of a bounding box in which the image must be shown; 0 if unknown.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Height of a bounding box in which the image must be shown; 0 if unknown.",
        "name": "height",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_icon.html"
  },
  "richTextItalic": {
    "type": "object",
    "desc": "An italicized rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_italic.html"
  },
  "richTextMarked": {
    "type": "object",
    "desc": "A marked rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_marked.html"
  },
  "richTextPhoneNumber": {
    "type": "object",
    "desc": "A rich text phone number.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Phone number.",
        "name": "phone_number",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_phone_number.html"
  },
  "richTextPlain": {
    "type": "object",
    "desc": "A plain text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_plain.html"
  },
  "richTextReference": {
    "type": "object",
    "desc": "A reference to a richTexts object on the same web page.",
    "fields": [
      {
        "desc": "The text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "The name of a richTextAnchor object, which is the first element of the target richTexts object.",
        "name": "anchor_name",
        "type": "string"
      },
      {
        "desc": "An HTTP URL, opening the reference.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_reference.html"
  },
  "richTextStrikethrough": {
    "type": "object",
    "desc": "A strikethrough rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_strikethrough.html"
  },
  "richTextSubscript": {
    "type": "object",
    "desc": "A subscript rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_subscript.html"
  },
  "richTextSuperscript": {
    "type": "object",
    "desc": "A superscript rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_superscript.html"
  },
  "richTextUnderline": {
    "type": "object",
    "desc": "An underlined rich text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_underline.html"
  },
  "richTextUrl": {
    "type": "object",
    "desc": "A rich text URL link.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "True, if the URL has cached instant view server-side.",
        "name": "is_cached",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_text_url.html"
  },
  "richTexts": {
    "type": "object",
    "desc": "A concatenation of rich texts.",
    "fields": [
      {
        "desc": "Texts.",
        "name": "texts",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rich_texts.html"
  },
  "SearchMessagesFilter": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a filter for message search results.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_search_messages_filter.html"
  },
  "searchMessagesFilterAnimation": {
    "type": "object",
    "desc": "Returns only animation messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_animation.html"
  },
  "searchMessagesFilterAudio": {
    "type": "object",
    "desc": "Returns only audio messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_audio.html"
  },
  "searchMessagesFilterChatPhoto": {
    "type": "object",
    "desc": "Returns only messages containing chat photos.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_chat_photo.html"
  },
  "searchMessagesFilterDocument": {
    "type": "object",
    "desc": "Returns only document messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_document.html"
  },
  "searchMessagesFilterEmpty": {
    "type": "object",
    "desc": "Returns all found messages, no filter is applied.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_empty.html"
  },
  "searchMessagesFilterFailedToSend": {
    "type": "object",
    "desc": "Returns only failed to send messages. This filter can be used only if the message database is used.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_failed_to_send.html"
  },
  "searchMessagesFilterMention": {
    "type": "object",
    "desc": "Returns only messages with mentions of the current user, or messages that are replies to their messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_mention.html"
  },
  "searchMessagesFilterPhoto": {
    "type": "object",
    "desc": "Returns only photo messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_photo.html"
  },
  "searchMessagesFilterPhotoAndVideo": {
    "type": "object",
    "desc": "Returns only photo and video messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_photo_and_video.html"
  },
  "searchMessagesFilterPinned": {
    "type": "object",
    "desc": "Returns only pinned messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_pinned.html"
  },
  "searchMessagesFilterUnreadMention": {
    "type": "object",
    "desc": "Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_unread_mention.html"
  },
  "searchMessagesFilterUnreadReaction": {
    "type": "object",
    "desc": "Returns only messages with unread reactions for the current user. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_unread_reaction.html"
  },
  "searchMessagesFilterUrl": {
    "type": "object",
    "desc": "Returns only messages containing URLs.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_url.html"
  },
  "searchMessagesFilterVideo": {
    "type": "object",
    "desc": "Returns only video messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_video.html"
  },
  "searchMessagesFilterVideoNote": {
    "type": "object",
    "desc": "Returns only video note messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_video_note.html"
  },
  "searchMessagesFilterVoiceAndVideoNote": {
    "type": "object",
    "desc": "Returns only voice and video note messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_voice_and_video_note.html"
  },
  "searchMessagesFilterVoiceNote": {
    "type": "object",
    "desc": "Returns only voice note messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1search_messages_filter_voice_note.html"
  },
  "SecretChatState": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the current secret chat state.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_secret_chat_state.html"
  },
  "secretChatStateClosed": {
    "type": "object",
    "desc": "The secret chat is closed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_closed.html"
  },
  "secretChatStatePending": {
    "type": "object",
    "desc": "The secret chat is not yet created; waiting for the other user to get online.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_pending.html"
  },
  "secretChatStateReady": {
    "type": "object",
    "desc": "The secret chat is ready to use.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat_state_ready.html"
  },
  "SessionType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the type of a session.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_session_type.html"
  },
  "sessionTypeAndroid": {
    "type": "object",
    "desc": "The session is running on an Android device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_android.html"
  },
  "sessionTypeApple": {
    "type": "object",
    "desc": "The session is running on a generic Apple device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_apple.html"
  },
  "sessionTypeBrave": {
    "type": "object",
    "desc": "The session is running on the Brave browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_brave.html"
  },
  "sessionTypeChrome": {
    "type": "object",
    "desc": "The session is running on the Chrome browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_chrome.html"
  },
  "sessionTypeEdge": {
    "type": "object",
    "desc": "The session is running on the Edge browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_edge.html"
  },
  "sessionTypeFirefox": {
    "type": "object",
    "desc": "The session is running on the Firefox browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_firefox.html"
  },
  "sessionTypeIpad": {
    "type": "object",
    "desc": "The session is running on an iPad device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_ipad.html"
  },
  "sessionTypeIphone": {
    "type": "object",
    "desc": "The session is running on an iPhone device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_iphone.html"
  },
  "sessionTypeLinux": {
    "type": "object",
    "desc": "The session is running on a Linux device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_linux.html"
  },
  "sessionTypeMac": {
    "type": "object",
    "desc": "The session is running on a Mac device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_mac.html"
  },
  "sessionTypeOpera": {
    "type": "object",
    "desc": "The session is running on the Opera browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_opera.html"
  },
  "sessionTypeSafari": {
    "type": "object",
    "desc": "The session is running on the Safari browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_safari.html"
  },
  "sessionTypeUbuntu": {
    "type": "object",
    "desc": "The session is running on an Ubuntu device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_ubuntu.html"
  },
  "sessionTypeUnknown": {
    "type": "object",
    "desc": "The session is running on an unknown type of device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_unknown.html"
  },
  "sessionTypeVivaldi": {
    "type": "object",
    "desc": "The session is running on the Vivaldi browser.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_vivaldi.html"
  },
  "sessionTypeWindows": {
    "type": "object",
    "desc": "The session is running on a Windows device.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_windows.html"
  },
  "sessionTypeXbox": {
    "type": "object",
    "desc": "The session is running on an Xbox console.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session_type_xbox.html"
  },
  "SpeechRecognitionResult": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes result of speech recognition in a voice note.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_speech_recognition_result.html"
  },
  "speechRecognitionResultError": {
    "type": "object",
    "desc": "The speech recognition failed.",
    "fields": [
      {
        "desc": "Recognition error. An error with a message \"MSG_VOICE_TOO_LONG\" is returned when media duration is too big to be recognized.",
        "name": "error",
        "type": "error"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1speech_recognition_result_error.html"
  },
  "speechRecognitionResultPending": {
    "type": "object",
    "desc": "The speech recognition is ongoing.",
    "fields": [
      {
        "desc": "Partially recognized text.",
        "name": "partial_text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1speech_recognition_result_pending.html"
  },
  "speechRecognitionResultText": {
    "type": "object",
    "desc": "The speech recognition successfully finished.",
    "fields": [
      {
        "desc": "Recognized text.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1speech_recognition_result_text.html"
  },
  "StatisticalGraph": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a statistical graph.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_statistical_graph.html"
  },
  "statisticalGraphAsync": {
    "type": "object",
    "desc": "The graph data to be asynchronously loaded through getStatisticalGraph.",
    "fields": [
      {
        "desc": "The token to use for data loading.",
        "name": "token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1statistical_graph_async.html"
  },
  "statisticalGraphData": {
    "type": "object",
    "desc": "A graph data.",
    "fields": [
      {
        "desc": "Graph data in JSON format.",
        "name": "json_data",
        "type": "string"
      },
      {
        "desc": "If non-empty, a token which can be used to receive a zoomed in graph.",
        "name": "zoom_token",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1statistical_graph_data.html"
  },
  "statisticalGraphError": {
    "type": "object",
    "desc": "An error message to be shown to the user instead of the graph.",
    "fields": [
      {
        "desc": "The error message.",
        "name": "error_message",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1statistical_graph_error.html"
  },
  "StickerFormat": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes format of a sticker.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_sticker_format.html"
  },
  "stickerFormatTgs": {
    "type": "object",
    "desc": "The sticker is an animation in TGS format.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_format_tgs.html"
  },
  "stickerFormatWebm": {
    "type": "object",
    "desc": "The sticker is a video in WEBM format.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_format_webm.html"
  },
  "stickerFormatWebp": {
    "type": "object",
    "desc": "The sticker is an image in WEBP format.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_format_webp.html"
  },
  "StickerFullType": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains full information about sticker type.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_sticker_full_type.html"
  },
  "stickerFullTypeCustomEmoji": {
    "type": "object",
    "desc": "The sticker is a custom emoji to be used inside message text and caption. Currently, only Telegram Premium users can use custom emoji.",
    "fields": [
      {
        "desc": "Identifier of the custom emoji.",
        "name": "custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places.",
        "name": "needs_repainting",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_full_type_custom_emoji.html"
  },
  "stickerFullTypeMask": {
    "type": "object",
    "desc": "The sticker is a mask in WEBP format to be placed on photos or videos.",
    "fields": [
      {
        "desc": "Position where the mask is placed; may be null.",
        "name": "mask_position",
        "type": "maskPosition"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_full_type_mask.html"
  },
  "stickerFullTypeRegular": {
    "type": "object",
    "desc": "The sticker is a regular sticker.",
    "fields": [
      {
        "desc": "Premium animation of the sticker; may be null. If present, only Telegram Premium users can use the sticker.",
        "name": "premium_animation",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_full_type_regular.html"
  },
  "StickerType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a sticker.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_sticker_type.html"
  },
  "stickerTypeCustomEmoji": {
    "type": "object",
    "desc": "The sticker is a custom emoji to be used inside message text and caption.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_type_custom_emoji.html"
  },
  "stickerTypeMask": {
    "type": "object",
    "desc": "The sticker is a mask in WEBP format to be placed on photos or videos.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_type_mask.html"
  },
  "stickerTypeRegular": {
    "type": "object",
    "desc": "The sticker is a regular sticker.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_type_regular.html"
  },
  "StorePaymentPurpose": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a purpose of an in-store payment.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_store_payment_purpose.html"
  },
  "storePaymentPurposeGiftedPremium": {
    "type": "object",
    "desc": "The user gifting Telegram Premium to another user.",
    "fields": [
      {
        "desc": "Identifier of the user to which Premium was gifted.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "ISO 4217 currency code of the payment currency.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1store_payment_purpose_gifted_premium.html"
  },
  "storePaymentPurposePremiumGiftCodes": {
    "type": "object",
    "desc": "The user creating Telegram Premium gift codes for other users.",
    "fields": [
      {
        "desc": "Identifier of the channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user; 0 if none.",
        "name": "boosted_chat_id",
        "type": "string"
      },
      {
        "desc": "ISO 4217 currency code of the payment currency.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "Identifiers of the users which can activate the gift codes.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1store_payment_purpose_premium_gift_codes.html"
  },
  "storePaymentPurposePremiumGiveaway": {
    "type": "object",
    "desc": "The user creating a Telegram Premium giveaway for subscribers of channel chats; requires can_post_messages rights in the channels.",
    "fields": [
      {
        "desc": "Giveaway parameters.",
        "name": "parameters",
        "type": "premiumGiveawayParameters"
      },
      {
        "desc": "ISO 4217 currency code of the payment currency.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1store_payment_purpose_premium_giveaway.html"
  },
  "storePaymentPurposePremiumSubscription": {
    "type": "object",
    "desc": "The user subscribing to Telegram Premium.",
    "fields": [
      {
        "desc": "Pass true if this is a restore of a Telegram Premium purchase; only for App Store.",
        "name": "is_restore",
        "type": "bool"
      },
      {
        "desc": "Pass true if this is an upgrade from a monthly subscription to early subscription; only for App Store.",
        "name": "is_upgrade",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1store_payment_purpose_premium_subscription.html"
  },
  "StoryAreaType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes type of a clickable rectangle area on a story media.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_area_type.html"
  },
  "storyAreaTypeLocation": {
    "type": "object",
    "desc": "An area pointing to a location.",
    "fields": [
      {
        "desc": "The location.",
        "name": "location",
        "type": "location"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_area_type_location.html"
  },
  "storyAreaTypeSuggestedReaction": {
    "type": "object",
    "desc": "An area pointing to a suggested reaction. App needs to show a clickable reaction on the area and call setStoryReaction when the are is clicked.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "Number of times the reaction was added.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "True, if reaction has a dark background.",
        "name": "is_dark",
        "type": "bool"
      },
      {
        "desc": "True, if reaction corner is flipped.",
        "name": "is_flipped",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_area_type_suggested_reaction.html"
  },
  "storyAreaTypeVenue": {
    "type": "object",
    "desc": "An area pointing to a venue.",
    "fields": [
      {
        "desc": "Information about the venue.",
        "name": "venue",
        "type": "venue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_area_type_venue.html"
  },
  "StoryContent": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains the content of a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_content.html"
  },
  "storyContentPhoto": {
    "type": "object",
    "desc": "A photo story.",
    "fields": [
      {
        "desc": "The photo.",
        "name": "photo",
        "type": "photo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_content_photo.html"
  },
  "storyContentUnsupported": {
    "type": "object",
    "desc": "A story content that is not supported in the current TDLib version.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_content_unsupported.html"
  },
  "storyContentVideo": {
    "type": "object",
    "desc": "A video story.",
    "fields": [
      {
        "desc": "The video in MPEG4 format.",
        "name": "video",
        "type": "storyVideo"
      },
      {
        "desc": "Alternative version of the video in MPEG4 format, encoded by x264 codec; may be null.",
        "name": "alternative_video",
        "type": "storyVideo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_content_video.html"
  },
  "StoryList": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a list of stories.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_list.html"
  },
  "storyListArchive": {
    "type": "object",
    "desc": "The list of stories, shown in the Arvhive chat list.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_list_archive.html"
  },
  "storyListMain": {
    "type": "object",
    "desc": "The list of stories, shown in the main chat list and folder chat lists.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_list_main.html"
  },
  "StoryOrigin": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains information about the origin of a story that was reposted.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_origin.html"
  },
  "storyOriginHiddenUser": {
    "type": "object",
    "desc": "The original story was sent by an unknown user.",
    "fields": [
      {
        "desc": "Name of the story sender.",
        "name": "sender_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_origin_hidden_user.html"
  },
  "storyOriginPublicStory": {
    "type": "object",
    "desc": "The original story was a public story with known sender.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted original story.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier of the original story.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_origin_public_story.html"
  },
  "StoryPrivacySettings": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes privacy settings of a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_privacy_settings.html"
  },
  "storyPrivacySettingsCloseFriends": {
    "type": "object",
    "desc": "The story can be viewed by all close friends.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_privacy_settings_close_friends.html"
  },
  "storyPrivacySettingsContacts": {
    "type": "object",
    "desc": "The story can be viewed by all contacts except chosen users.",
    "fields": [
      {
        "desc": "User identifiers of the contacts that can't see the story; always unknown and empty for non-owned stories.",
        "name": "except_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_privacy_settings_contacts.html"
  },
  "storyPrivacySettingsEveryone": {
    "type": "object",
    "desc": "The story can be viewed by everyone.",
    "fields": [
      {
        "desc": "Identifiers of the users that can't see the story; always unknown and empty for non-owned stories.",
        "name": "except_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_privacy_settings_everyone.html"
  },
  "storyPrivacySettingsSelectedUsers": {
    "type": "object",
    "desc": "The story can be viewed by certain specified users.",
    "fields": [
      {
        "desc": "Identifiers of the users; always unknown and empty for non-owned stories.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_privacy_settings_selected_users.html"
  },
  "StoryPublicForward": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a public forward or repost of a story.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_story_public_forward.html"
  },
  "storyPublicForwardMessage": {
    "type": "object",
    "desc": "Contains a public forward of a story as a message.",
    "fields": [
      {
        "desc": "Information about the message with the story.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_public_forward_message.html"
  },
  "storyPublicForwardStory": {
    "type": "object",
    "desc": "Contains a public repost of a story as a story.",
    "fields": [
      {
        "desc": "Information about the reposted story.",
        "name": "story",
        "type": "story"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_public_forward_story.html"
  },
  "SuggestedAction": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes an action suggested to the current user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_suggested_action.html"
  },
  "suggestedActionCheckPassword": {
    "type": "object",
    "desc": "Suggests the user to check whether they still remember their 2-step verification password.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_check_password.html"
  },
  "suggestedActionCheckPhoneNumber": {
    "type": "object",
    "desc": "Suggests the user to check whether authorization phone number is correct and change the phone number if it is inaccessible.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_check_phone_number.html"
  },
  "suggestedActionConvertToBroadcastGroup": {
    "type": "object",
    "desc": "Suggests the user to convert specified supergroup to a broadcast group.",
    "fields": [
      {
        "desc": "Supergroup identifier.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_convert_to_broadcast_group.html"
  },
  "suggestedActionEnableArchiveAndMuteNewChats": {
    "type": "object",
    "desc": "Suggests the user to enable archive_and_mute_new_chats_from_unknown_users setting in archiveChatListSettings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_enable_archive_and_mute_new_chats.html"
  },
  "suggestedActionRestorePremium": {
    "type": "object",
    "desc": "Suggests the user to restore a recently expired Premium subscription.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_restore_premium.html"
  },
  "suggestedActionSetPassword": {
    "type": "object",
    "desc": "Suggests the user to set a 2-step verification password to be able to log in again.",
    "fields": [
      {
        "desc": "The number of days to pass between consecutive authorizations if the user declines to set password; if 0, then the user is advised to set the password for security reasons.",
        "name": "authorization_delay",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_set_password.html"
  },
  "suggestedActionSubscribeToAnnualPremium": {
    "type": "object",
    "desc": "Suggests the user to subscribe to the Premium subscription with annual payments.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_subscribe_to_annual_premium.html"
  },
  "suggestedActionUpgradePremium": {
    "type": "object",
    "desc": "Suggests the user to upgrade the Premium subscription from monthly payments to annual payments.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_upgrade_premium.html"
  },
  "suggestedActionViewChecksHint": {
    "type": "object",
    "desc": "Suggests the user to view a hint about the meaning of one and two check marks on sent messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1suggested_action_view_checks_hint.html"
  },
  "SupergroupMembersFilter": {
    "type": "object",
    "desc": "This class is an abstract base class. Specifies the kind of chat members to return in getSupergroupMembers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_supergroup_members_filter.html"
  },
  "supergroupMembersFilterAdministrators": {
    "type": "object",
    "desc": "Returns the owner and administrators.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_administrators.html"
  },
  "supergroupMembersFilterBanned": {
    "type": "object",
    "desc": "Returns users banned from the supergroup or channel; can be used only by administrators.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_banned.html"
  },
  "supergroupMembersFilterBots": {
    "type": "object",
    "desc": "Returns bot members of the supergroup or channel.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_bots.html"
  },
  "supergroupMembersFilterContacts": {
    "type": "object",
    "desc": "Returns contacts of the user, which are members of the supergroup or channel.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_contacts.html"
  },
  "supergroupMembersFilterMention": {
    "type": "object",
    "desc": "Returns users which can be mentioned in the supergroup.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "If non-zero, the identifier of the current message thread.",
        "name": "message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_mention.html"
  },
  "supergroupMembersFilterRecent": {
    "type": "object",
    "desc": "Returns recently active users in reverse chronological order.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_recent.html"
  },
  "supergroupMembersFilterRestricted": {
    "type": "object",
    "desc": "Returns restricted supergroup members; can be used only by administrators.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_restricted.html"
  },
  "supergroupMembersFilterSearch": {
    "type": "object",
    "desc": "Used to search for supergroup or channel members via a (string) query.",
    "fields": [
      {
        "desc": "Query to search for.",
        "name": "query",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_members_filter_search.html"
  },
  "TMeUrlType": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the type of a URL linking to an internal Telegram entity.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_t_me_url_type.html"
  },
  "tMeUrlTypeChatInvite": {
    "type": "object",
    "desc": "A chat invite link.",
    "fields": [
      {
        "desc": "Information about the chat invite link.",
        "name": "info",
        "type": "chatInviteLinkInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_chat_invite.html"
  },
  "tMeUrlTypeStickerSet": {
    "type": "object",
    "desc": "A URL linking to a sticker set.",
    "fields": [
      {
        "desc": "Identifier of the sticker set.",
        "name": "sticker_set_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_sticker_set.html"
  },
  "tMeUrlTypeSupergroup": {
    "type": "object",
    "desc": "A URL linking to a public supergroup or channel.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_supergroup.html"
  },
  "tMeUrlTypeUser": {
    "type": "object",
    "desc": "A URL linking to a user.",
    "fields": [
      {
        "desc": "Identifier of the user.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url_type_user.html"
  },
  "TargetChat": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the target chat to be opened.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_target_chat.html"
  },
  "targetChatChosen": {
    "type": "object",
    "desc": "The chat needs to be chosen by the user among chats of the specified types.",
    "fields": [
      {
        "desc": "True, if private chats with ordinary users are allowed.",
        "name": "allow_user_chats",
        "type": "bool"
      },
      {
        "desc": "True, if private chats with other bots are allowed.",
        "name": "allow_bot_chats",
        "type": "bool"
      },
      {
        "desc": "True, if basic group and supergroup chats are allowed.",
        "name": "allow_group_chats",
        "type": "bool"
      },
      {
        "desc": "True, if channel chats are allowed.",
        "name": "allow_channel_chats",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1target_chat_chosen.html"
  },
  "targetChatCurrent": {
    "type": "object",
    "desc": "The currently opened chat needs to be kept.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1target_chat_current.html"
  },
  "targetChatInternalLink": {
    "type": "object",
    "desc": "The chat needs to be open with the provided internal link.",
    "fields": [
      {
        "desc": "An internal link pointing to the chat.",
        "name": "link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1target_chat_internal_link.html"
  },
  "TelegramPaymentPurpose": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes a purpose of a payment toward Telegram.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_telegram_payment_purpose.html"
  },
  "telegramPaymentPurposePremiumGiftCodes": {
    "type": "object",
    "desc": "The user creating Telegram Premium gift codes for other users.",
    "fields": [
      {
        "desc": "Identifier of the channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user; 0 if none.",
        "name": "boosted_chat_id",
        "type": "string"
      },
      {
        "desc": "ISO 4217 currency code of the payment currency.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "Identifiers of the users which can activate the gift codes.",
        "name": "user_ids",
        "type": "string"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active for the users.",
        "name": "month_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1telegram_payment_purpose_premium_gift_codes.html"
  },
  "telegramPaymentPurposePremiumGiveaway": {
    "type": "object",
    "desc": "The user creating a Telegram Premium giveaway for subscribers of channel chats; requires can_post_messages rights in the channels.",
    "fields": [
      {
        "desc": "Giveaway parameters.",
        "name": "parameters",
        "type": "premiumGiveawayParameters"
      },
      {
        "desc": "ISO 4217 currency code of the payment currency.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Paid amount, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "Number of users which will be able to activate the gift codes.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active for the users.",
        "name": "month_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1telegram_payment_purpose_premium_giveaway.html"
  },
  "TextEntityType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a part of the text which must be formatted differently.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_text_entity_type.html"
  },
  "textEntityTypeBankCardNumber": {
    "type": "object",
    "desc": "A bank card number. The getBankCardInfo method can be used to get information about the bank card.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_bank_card_number.html"
  },
  "textEntityTypeBlockQuote": {
    "type": "object",
    "desc": "Text that must be formatted as if inside a blockquote HTML tag.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_block_quote.html"
  },
  "textEntityTypeBold": {
    "type": "object",
    "desc": "A bold text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_bold.html"
  },
  "textEntityTypeBotCommand": {
    "type": "object",
    "desc": "A bot command, beginning with \"/\".",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_bot_command.html"
  },
  "textEntityTypeCashtag": {
    "type": "object",
    "desc": "A cashtag text, beginning with \"$\" and consisting of capital English letters (e.g., \"$USD\").",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_cashtag.html"
  },
  "textEntityTypeCode": {
    "type": "object",
    "desc": "Text that must be formatted as if inside a code HTML tag.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_code.html"
  },
  "textEntityTypeCustomEmoji": {
    "type": "object",
    "desc": "A custom emoji. The text behind a custom emoji must be an emoji. Only premium users can use premium custom emoji.",
    "fields": [
      {
        "desc": "Unique identifier of the custom emoji.",
        "name": "custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_custom_emoji.html"
  },
  "textEntityTypeEmailAddress": {
    "type": "object",
    "desc": "An email address.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_email_address.html"
  },
  "textEntityTypeHashtag": {
    "type": "object",
    "desc": "A hashtag text, beginning with \"#\".",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_hashtag.html"
  },
  "textEntityTypeItalic": {
    "type": "object",
    "desc": "An italic text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_italic.html"
  },
  "textEntityTypeMediaTimestamp": {
    "type": "object",
    "desc": "A media timestamp.",
    "fields": [
      {
        "desc": "Timestamp from which a video/audio/video note/voice note/story playing must start, in seconds. The media can be in the content or the web page preview of the current message, or in the same places in the replied message.",
        "name": "media_timestamp",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_media_timestamp.html"
  },
  "textEntityTypeMention": {
    "type": "object",
    "desc": "A mention of a user, a supergroup, or a channel by their username.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_mention.html"
  },
  "textEntityTypeMentionName": {
    "type": "object",
    "desc": "A text shows instead of a raw mention of the user (e.g., when the user has no username).",
    "fields": [
      {
        "desc": "Identifier of the mentioned user.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_mention_name.html"
  },
  "textEntityTypePhoneNumber": {
    "type": "object",
    "desc": "A phone number.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_phone_number.html"
  },
  "textEntityTypePre": {
    "type": "object",
    "desc": "Text that must be formatted as if inside a pre HTML tag.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_pre.html"
  },
  "textEntityTypePreCode": {
    "type": "object",
    "desc": "Text that must be formatted as if inside pre, and code HTML tags.",
    "fields": [
      {
        "desc": "Programming language of the code; as defined by the sender.",
        "name": "language",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_pre_code.html"
  },
  "textEntityTypeSpoiler": {
    "type": "object",
    "desc": "A spoiler text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_spoiler.html"
  },
  "textEntityTypeStrikethrough": {
    "type": "object",
    "desc": "A strikethrough text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_strikethrough.html"
  },
  "textEntityTypeTextUrl": {
    "type": "object",
    "desc": "A text description shown instead of a raw URL.",
    "fields": [
      {
        "desc": "HTTP or tg:// URL to be opened when the link is clicked.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_text_url.html"
  },
  "textEntityTypeUnderline": {
    "type": "object",
    "desc": "An underlined text.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_underline.html"
  },
  "textEntityTypeUrl": {
    "type": "object",
    "desc": "An HTTP URL.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity_type_url.html"
  },
  "TextParseMode": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the way the text needs to be parsed for text entities.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_text_parse_mode.html"
  },
  "textParseModeHTML": {
    "type": "object",
    "desc": "The text uses HTML-style formatting. The same as Telegram Bot API \"HTML\" parse mode.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_parse_mode_h_t_m_l.html"
  },
  "textParseModeMarkdown": {
    "type": "object",
    "desc": "The text uses Markdown-style formatting.",
    "fields": [
      {
        "desc": "Version of the parser: 0 or 1 - Telegram Bot API \"Markdown\" parse mode, 2 - Telegram Bot API \"MarkdownV2\" parse mode.",
        "name": "version",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_parse_mode_markdown.html"
  },
  "ThumbnailFormat": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes format of a thumbnail.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_thumbnail_format.html"
  },
  "thumbnailFormatGif": {
    "type": "object",
    "desc": "The thumbnail is in static GIF format. It will be used only for some bot inline query results.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_gif.html"
  },
  "thumbnailFormatJpeg": {
    "type": "object",
    "desc": "The thumbnail is in JPEG format.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_jpeg.html"
  },
  "thumbnailFormatMpeg4": {
    "type": "object",
    "desc": "The thumbnail is in MPEG4 format. It will be used only for some animations and videos.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_mpeg4.html"
  },
  "thumbnailFormatPng": {
    "type": "object",
    "desc": "The thumbnail is in PNG format. It will be used only for background patterns.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_png.html"
  },
  "thumbnailFormatTgs": {
    "type": "object",
    "desc": "The thumbnail is in TGS format. It will be used only for TGS sticker sets.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_tgs.html"
  },
  "thumbnailFormatWebm": {
    "type": "object",
    "desc": "The thumbnail is in WEBM format. It will be used only for WEBM sticker sets.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_webm.html"
  },
  "thumbnailFormatWebp": {
    "type": "object",
    "desc": "The thumbnail is in WEBP format. It will be used only for some stickers.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail_format_webp.html"
  },
  "TopChatCategory": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the categories of chats for which a list of frequently used chats can be retrieved.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_top_chat_category.html"
  },
  "topChatCategoryBots": {
    "type": "object",
    "desc": "A category containing frequently used private chats with bot users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_bots.html"
  },
  "topChatCategoryCalls": {
    "type": "object",
    "desc": "A category containing frequently used chats used for calls.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_calls.html"
  },
  "topChatCategoryChannels": {
    "type": "object",
    "desc": "A category containing frequently used channels.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_channels.html"
  },
  "topChatCategoryForwardChats": {
    "type": "object",
    "desc": "A category containing frequently used chats used to forward messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_forward_chats.html"
  },
  "topChatCategoryGroups": {
    "type": "object",
    "desc": "A category containing frequently used basic groups and supergroups.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_groups.html"
  },
  "topChatCategoryInlineBots": {
    "type": "object",
    "desc": "A category containing frequently used chats with inline bots sorted by their usage in inline mode.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_inline_bots.html"
  },
  "topChatCategoryUsers": {
    "type": "object",
    "desc": "A category containing frequently used private chats with non-bot users.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1top_chat_category_users.html"
  },
  "Update": {
    "type": "object",
    "desc": "This class is an abstract base class. Contains notifications about data changes.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_update.html"
  },
  "updateAccentColors": {
    "type": "object",
    "desc": "The list of supported accent colors has changed.",
    "fields": [
      {
        "desc": "Information about supported colors; colors with identifiers 0 (red), 1 (orange), 2 (purple/violet), 3 (green), 4 (cyan), 5 (blue), 6 (pink) must always be supported and aren't included in the list. The exact colors for the accent colors with identifiers 0-6 must be taken from the app theme.",
        "name": "colors",
        "type": "accentColor"
      },
      {
        "desc": "The list of accent color identifiers, which can be set through setAccentColor and setChatAccentColor. The colors must be shown in the specififed order.",
        "name": "available_accent_color_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_accent_colors.html"
  },
  "updateActiveEmojiReactions": {
    "type": "object",
    "desc": "The list of active emoji reactions has changed.",
    "fields": [
      {
        "desc": "The new list of active emoji reactions.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_active_emoji_reactions.html"
  },
  "updateActiveNotifications": {
    "type": "object",
    "desc": "Contains active notifications that were shown on previous application launches. This update is sent only if the message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update.",
    "fields": [
      {
        "desc": "Lists of active notification groups.",
        "name": "groups",
        "type": "notificationGroup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_active_notifications.html"
  },
  "updateAddChatMembersPrivacyForbidden": {
    "type": "object",
    "desc": "Adding users to a chat has failed because of their privacy settings. An invite link can be shared with the users if appropriate.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of users, which weren't added because of their privacy settings.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_add_chat_members_privacy_forbidden.html"
  },
  "updateAnimatedEmojiMessageClicked": {
    "type": "object",
    "desc": "Some animated emoji message was clicked and a big animated sticker must be played if the message is visible on the screen. chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The animated sticker to be played.",
        "name": "sticker",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_animated_emoji_message_clicked.html"
  },
  "updateAnimationSearchParameters": {
    "type": "object",
    "desc": "The parameters of animation search through getOption(\"animation_search_bot_username\") bot has changed.",
    "fields": [
      {
        "desc": "Name of the animation search provider.",
        "name": "provider",
        "type": "string"
      },
      {
        "desc": "The new list of emojis suggested for searching.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_animation_search_parameters.html"
  },
  "updateAttachmentMenuBots": {
    "type": "object",
    "desc": "The list of bots added to attachment or side menu has changed.",
    "fields": [
      {
        "desc": "The new list of bots. The bots must not be shown on scheduled messages screen.",
        "name": "bots",
        "type": "attachmentMenuBot"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_attachment_menu_bots.html"
  },
  "updateAuthorizationState": {
    "type": "object",
    "desc": "The user authorization state has changed.",
    "fields": [
      {
        "desc": "New authorization state.",
        "name": "authorization_state",
        "type": "AuthorizationState"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_authorization_state.html"
  },
  "updateAutosaveSettings": {
    "type": "object",
    "desc": "Autosave settings for some type of chats were updated.",
    "fields": [
      {
        "desc": "Type of chats for which autosave settings were updated.",
        "name": "scope",
        "type": "AutosaveSettingsScope"
      },
      {
        "desc": "The new autosave settings; may be null if the settings are reset to default.",
        "name": "settings",
        "type": "scopeAutosaveSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_autosave_settings.html"
  },
  "updateBasicGroup": {
    "type": "object",
    "desc": "Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the application.",
    "fields": [
      {
        "desc": "New data about the group.",
        "name": "basic_group",
        "type": "basicGroup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_basic_group.html"
  },
  "updateBasicGroupFullInfo": {
    "type": "object",
    "desc": "Some data in basicGroupFullInfo has been changed.",
    "fields": [
      {
        "desc": "Identifier of a basic group.",
        "name": "basic_group_id",
        "type": "string"
      },
      {
        "desc": "New full information about the group.",
        "name": "basic_group_full_info",
        "type": "basicGroupFullInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_basic_group_full_info.html"
  },
  "updateCall": {
    "type": "object",
    "desc": "New call was created or information about a call was updated.",
    "fields": [
      {
        "desc": "New data about a call.",
        "name": "call",
        "type": "call"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_call.html"
  },
  "updateChatAccentColor": {
    "type": "object",
    "desc": "A chat accent color has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new chat accent color identifier.",
        "name": "accent_color_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_accent_color.html"
  },
  "updateChatAction": {
    "type": "object",
    "desc": "A message sender activity in the chat has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If not 0, a message thread identifier in which the action was performed.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Identifier of a message sender performing the action.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "The action.",
        "name": "action",
        "type": "ChatAction"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_action.html"
  },
  "updateChatActionBar": {
    "type": "object",
    "desc": "The chat action bar was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new value of the action bar; may be null.",
        "name": "action_bar",
        "type": "ChatActionBar"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_action_bar.html"
  },
  "updateChatActiveStories": {
    "type": "object",
    "desc": "The list of active stories posted by a specific chat has changed.",
    "fields": [
      {
        "desc": "The new list of active stories.",
        "name": "active_stories",
        "type": "chatActiveStories"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_active_stories.html"
  },
  "updateChatAvailableReactions": {
    "type": "object",
    "desc": "The chat available reactions were changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new reactions, available in the chat.",
        "name": "available_reactions",
        "type": "ChatAvailableReactions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_available_reactions.html"
  },
  "updateChatBackground": {
    "type": "object",
    "desc": "The chat background was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new chat background; may be null if background was reset to default.",
        "name": "background",
        "type": "chatBackground"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_background.html"
  },
  "updateChatBackgroundCustomEmoji": {
    "type": "object",
    "desc": "A chat's custom emoji for reply background has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new identifier of a custom emoji to be shown on the reply header background; 0 if none.",
        "name": "background_custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_background_custom_emoji.html"
  },
  "updateChatBlockList": {
    "type": "object",
    "desc": "A chat was blocked or unblocked.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Block list to which the chat is added; may be null if none.",
        "name": "block_list",
        "type": "BlockList"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_block_list.html"
  },
  "updateChatBoost": {
    "type": "object",
    "desc": "A chat boost has changed; for bots only.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New information about the boost.",
        "name": "boost",
        "type": "chatBoost"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_boost.html"
  },
  "updateChatDefaultDisableNotification": {
    "type": "object",
    "desc": "The value of the default disable_notification parameter, used when a message is sent to the chat, was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new default_disable_notification value.",
        "name": "default_disable_notification",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_default_disable_notification.html"
  },
  "updateChatDraftMessage": {
    "type": "object",
    "desc": "A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update mustn't be applied.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new draft message; may be null.",
        "name": "draft_message",
        "type": "draftMessage"
      },
      {
        "desc": "The new chat positions in the chat lists.",
        "name": "positions",
        "type": "chatPosition"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_draft_message.html"
  },
  "updateChatFolders": {
    "type": "object",
    "desc": "The list of chat folders or a chat folder has changed.",
    "fields": [
      {
        "desc": "The new list of chat folders.",
        "name": "chat_folders",
        "type": "chatFolderInfo"
      },
      {
        "desc": "Position of the main chat list among chat folders, 0-based.",
        "name": "main_chat_list_position",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_folders.html"
  },
  "updateChatHasProtectedContent": {
    "type": "object",
    "desc": "A chat content was allowed or restricted for saving.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of has_protected_content.",
        "name": "has_protected_content",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_has_protected_content.html"
  },
  "updateChatHasScheduledMessages": {
    "type": "object",
    "desc": "A chat's has_scheduled_messages field has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of has_scheduled_messages.",
        "name": "has_scheduled_messages",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_has_scheduled_messages.html"
  },
  "updateChatIsMarkedAsUnread": {
    "type": "object",
    "desc": "A chat was marked as unread or was read.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of is_marked_as_unread.",
        "name": "is_marked_as_unread",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_is_marked_as_unread.html"
  },
  "updateChatIsTranslatable": {
    "type": "object",
    "desc": "Translation of chat messages was enabled or disabled.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of is_translatable.",
        "name": "is_translatable",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_is_translatable.html"
  },
  "updateChatLastMessage": {
    "type": "object",
    "desc": "The last message of a chat was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new last message in the chat; may be null if the last message became unknown. While the last message is unknown, new messages can be added to the chat without corresponding updateNewMessage update.",
        "name": "last_message",
        "type": "message"
      },
      {
        "desc": "The new chat positions in the chat lists.",
        "name": "positions",
        "type": "chatPosition"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_last_message.html"
  },
  "updateChatMember": {
    "type": "object",
    "desc": "User rights changed in a chat; for bots only.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user, changing the rights.",
        "name": "actor_user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user rights were changed.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "If user has joined the chat using an invite link, the invite link; may be null.",
        "name": "invite_link",
        "type": "chatInviteLink"
      },
      {
        "desc": "True, if the user has joined the chat using an invite link for a chat folder.",
        "name": "via_chat_folder_invite_link",
        "type": "bool"
      },
      {
        "desc": "Previous chat member.",
        "name": "old_chat_member",
        "type": "chatMember"
      },
      {
        "desc": "New chat member.",
        "name": "new_chat_member",
        "type": "chatMember"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_member.html"
  },
  "updateChatMessageAutoDeleteTime": {
    "type": "object",
    "desc": "The message auto-delete or self-destruct timer setting for a chat was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of message_auto_delete_time.",
        "name": "message_auto_delete_time",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_message_auto_delete_time.html"
  },
  "updateChatMessageSender": {
    "type": "object",
    "desc": "The message sender that is selected to send messages in a chat has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of message_sender_id; may be null if the user can't change message sender.",
        "name": "message_sender_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_message_sender.html"
  },
  "updateChatNotificationSettings": {
    "type": "object",
    "desc": "Notification settings for a chat were changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new notification settings.",
        "name": "notification_settings",
        "type": "chatNotificationSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_notification_settings.html"
  },
  "updateChatOnlineMemberCount": {
    "type": "object",
    "desc": "The number of online group members has changed. This update with non-zero number of online group members is sent only for currently opened chats. There is no guarantee that it is sent just after the number of online users has changed.",
    "fields": [
      {
        "desc": "Identifier of the chat.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New number of online members in the chat, or 0 if unknown.",
        "name": "online_member_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_online_member_count.html"
  },
  "updateChatPendingJoinRequests": {
    "type": "object",
    "desc": "The chat pending join requests were changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new data about pending join requests; may be null.",
        "name": "pending_join_requests",
        "type": "chatJoinRequestsInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_pending_join_requests.html"
  },
  "updateChatPermissions": {
    "type": "object",
    "desc": "Chat permissions were changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new chat permissions.",
        "name": "permissions",
        "type": "chatPermissions"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_permissions.html"
  },
  "updateChatPhoto": {
    "type": "object",
    "desc": "A chat photo was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new chat photo; may be null.",
        "name": "photo",
        "type": "chatPhotoInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_photo.html"
  },
  "updateChatPosition": {
    "type": "object",
    "desc": "The position of a chat in a chat list has changed. An updateChatLastMessage or updateChatDraftMessage update might be sent instead of the update.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New chat position. If new order is 0, then the chat needs to be removed from the list.",
        "name": "position",
        "type": "chatPosition"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_position.html"
  },
  "updateChatReadInbox": {
    "type": "object",
    "desc": "Incoming messages were read or the number of unread messages has been changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last read incoming message.",
        "name": "last_read_inbox_message_id",
        "type": "string"
      },
      {
        "desc": "The number of unread messages left in the chat.",
        "name": "unread_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_read_inbox.html"
  },
  "updateChatReadOutbox": {
    "type": "object",
    "desc": "Outgoing messages were read.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of last read outgoing message.",
        "name": "last_read_outbox_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_read_outbox.html"
  },
  "updateChatReplyMarkup": {
    "type": "object",
    "desc": "The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat.",
        "name": "reply_markup_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_reply_markup.html"
  },
  "updateChatTheme": {
    "type": "object",
    "desc": "The chat theme was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new name of the chat theme; may be empty if theme was reset to default.",
        "name": "theme_name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_theme.html"
  },
  "updateChatThemes": {
    "type": "object",
    "desc": "The list of available chat themes has changed.",
    "fields": [
      {
        "desc": "The new list of chat themes.",
        "name": "chat_themes",
        "type": "chatTheme"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_themes.html"
  },
  "updateChatTitle": {
    "type": "object",
    "desc": "The title of a chat was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The new chat title.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_title.html"
  },
  "updateChatUnreadMentionCount": {
    "type": "object",
    "desc": "The chat unread_mention_count has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The number of unread mention messages left in the chat.",
        "name": "unread_mention_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_unread_mention_count.html"
  },
  "updateChatUnreadReactionCount": {
    "type": "object",
    "desc": "The chat unread_reaction_count has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The number of messages with unread reactions left in the chat.",
        "name": "unread_reaction_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_unread_reaction_count.html"
  },
  "updateChatVideoChat": {
    "type": "object",
    "desc": "A chat video chat state has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of video_chat.",
        "name": "video_chat",
        "type": "videoChat"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_video_chat.html"
  },
  "updateChatViewAsTopics": {
    "type": "object",
    "desc": "A chat default appearance has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New value of view_as_topics.",
        "name": "view_as_topics",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_chat_view_as_topics.html"
  },
  "updateConnectionState": {
    "type": "object",
    "desc": "The connection state has changed. This update must be used only to show a human-readable description of the connection state.",
    "fields": [
      {
        "desc": "The new connection state.",
        "name": "state",
        "type": "ConnectionState"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_connection_state.html"
  },
  "updateDefaultReactionType": {
    "type": "object",
    "desc": "The type of default reaction has changed.",
    "fields": [
      {
        "desc": "The new type of the default reaction.",
        "name": "reaction_type",
        "type": "ReactionType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_default_reaction_type.html"
  },
  "updateDeleteMessages": {
    "type": "object",
    "desc": "Some messages were deleted.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of the deleted messages.",
        "name": "message_ids",
        "type": "string"
      },
      {
        "desc": "True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible).",
        "name": "is_permanent",
        "type": "bool"
      },
      {
        "desc": "True, if the messages are deleted only from the cache and can possibly be retrieved again in the future.",
        "name": "from_cache",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_delete_messages.html"
  },
  "updateDiceEmojis": {
    "type": "object",
    "desc": "The list of supported dice emojis has changed.",
    "fields": [
      {
        "desc": "The new list of supported dice emojis.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_dice_emojis.html"
  },
  "updateFavoriteStickers": {
    "type": "object",
    "desc": "The list of favorite stickers was updated.",
    "fields": [
      {
        "desc": "The new list of file identifiers of favorite stickers.",
        "name": "sticker_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_favorite_stickers.html"
  },
  "updateFile": {
    "type": "object",
    "desc": "Information about a file was updated.",
    "fields": [
      {
        "desc": "New data about the file.",
        "name": "file",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file.html"
  },
  "updateFileAddedToDownloads": {
    "type": "object",
    "desc": "A file was added to the file download list. This update is sent only after file download list is loaded for the first time.",
    "fields": [
      {
        "desc": "The added file download.",
        "name": "file_download",
        "type": "fileDownload"
      },
      {
        "desc": "New number of being downloaded and recently downloaded files found.",
        "name": "counts",
        "type": "downloadedFileCounts"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_added_to_downloads.html"
  },
  "updateFileDownload": {
    "type": "object",
    "desc": "A file download was changed. This update is sent only after file download list is loaded for the first time.",
    "fields": [
      {
        "desc": "File identifier.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed.",
        "name": "complete_date",
        "type": "number"
      },
      {
        "desc": "True, if downloading of the file is paused.",
        "name": "is_paused",
        "type": "bool"
      },
      {
        "desc": "New number of being downloaded and recently downloaded files found.",
        "name": "counts",
        "type": "downloadedFileCounts"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_download.html"
  },
  "updateFileDownloads": {
    "type": "object",
    "desc": "The state of the file download list has changed.",
    "fields": [
      {
        "desc": "Total size of files in the file download list, in bytes.",
        "name": "total_size",
        "type": "string"
      },
      {
        "desc": "Total number of files in the file download list.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "Total downloaded size of files in the file download list, in bytes.",
        "name": "downloaded_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_downloads.html"
  },
  "updateFileGenerationStart": {
    "type": "object",
    "desc": "The file generation process needs to be started by the application.",
    "fields": [
      {
        "desc": "Unique identifier for the generation process.",
        "name": "generation_id",
        "type": "string"
      },
      {
        "desc": "The path to a file from which a new file is generated; may be empty.",
        "name": "original_path",
        "type": "string"
      },
      {
        "desc": "The path to a file that must be created and where the new file is generated.",
        "name": "destination_path",
        "type": "string"
      },
      {
        "desc": "String specifying the conversion applied to the original file. If conversion is \"#url#\" than original_path contains an HTTP/HTTPS URL of a file, which must be downloaded by the application.",
        "name": "conversion",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_generation_start.html"
  },
  "updateFileGenerationStop": {
    "type": "object",
    "desc": "File generation is no longer needed.",
    "fields": [
      {
        "desc": "Unique identifier for the generation process.",
        "name": "generation_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_generation_stop.html"
  },
  "updateFileRemovedFromDownloads": {
    "type": "object",
    "desc": "A file was removed from the file download list. This update is sent only after file download list is loaded for the first time.",
    "fields": [
      {
        "desc": "File identifier.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "New number of being downloaded and recently downloaded files found.",
        "name": "counts",
        "type": "downloadedFileCounts"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_file_removed_from_downloads.html"
  },
  "updateForumTopicInfo": {
    "type": "object",
    "desc": "Basic information about a topic in a forum chat was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "New information about the topic.",
        "name": "info",
        "type": "forumTopicInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_forum_topic_info.html"
  },
  "updateGroupCall": {
    "type": "object",
    "desc": "Information about a group call was updated.",
    "fields": [
      {
        "desc": "New data about a group call.",
        "name": "group_call",
        "type": "groupCall"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_group_call.html"
  },
  "updateGroupCallParticipant": {
    "type": "object",
    "desc": "Information about a group call participant was changed. The updates are sent only after the group call is received through getGroupCall and only if the call is joined or being joined.",
    "fields": [
      {
        "desc": "Identifier of group call.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "New data about a participant.",
        "name": "participant",
        "type": "groupCallParticipant"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_group_call_participant.html"
  },
  "updateHavePendingNotifications": {
    "type": "object",
    "desc": "Describes whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications.",
    "fields": [
      {
        "desc": "True, if there are some delayed notification updates, which will be sent soon.",
        "name": "have_delayed_notifications",
        "type": "bool"
      },
      {
        "desc": "True, if there can be some yet unreceived notifications, which are being fetched from the server.",
        "name": "have_unreceived_notifications",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_have_pending_notifications.html"
  },
  "updateInstalledStickerSets": {
    "type": "object",
    "desc": "The list of installed sticker sets was updated.",
    "fields": [
      {
        "desc": "Type of the affected stickers.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "The new list of installed ordinary sticker sets.",
        "name": "sticker_set_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_installed_sticker_sets.html"
  },
  "updateLanguagePackStrings": {
    "type": "object",
    "desc": "Some language pack strings have been updated.",
    "fields": [
      {
        "desc": "Localization target to which the language pack belongs.",
        "name": "localization_target",
        "type": "string"
      },
      {
        "desc": "Identifier of the updated language pack.",
        "name": "language_pack_id",
        "type": "string"
      },
      {
        "desc": "List of changed language pack strings; empty if all strings have changed.",
        "name": "strings",
        "type": "languagePackString"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_language_pack_strings.html"
  },
  "updateMessageContent": {
    "type": "object",
    "desc": "The message content has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "New message content.",
        "name": "new_content",
        "type": "MessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_content.html"
  },
  "updateMessageContentOpened": {
    "type": "object",
    "desc": "The message content was opened. Updates voice note messages to \"listened\", video note messages to \"viewed\" and starts the self-destruct timer.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_content_opened.html"
  },
  "updateMessageEdited": {
    "type": "object",
    "desc": "A message was edited. Changes in the message content will come in a separate updateMessageContent.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was edited.",
        "name": "edit_date",
        "type": "number"
      },
      {
        "desc": "New message reply markup; may be null.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_edited.html"
  },
  "updateMessageInteractionInfo": {
    "type": "object",
    "desc": "The information about interactions with a message has changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "New information about interactions with the message; may be null.",
        "name": "interaction_info",
        "type": "messageInteractionInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_interaction_info.html"
  },
  "updateMessageIsPinned": {
    "type": "object",
    "desc": "The message pinned state was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "True, if the message is pinned.",
        "name": "is_pinned",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_is_pinned.html"
  },
  "updateMessageLiveLocationViewed": {
    "type": "object",
    "desc": "A message with a live location was viewed. When the update is received, the application is supposed to update the live location.",
    "fields": [
      {
        "desc": "Identifier of the chat with the live location message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message with live location.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_live_location_viewed.html"
  },
  "updateMessageMentionRead": {
    "type": "object",
    "desc": "A message with an unread mention was read.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new number of unread mention messages left in the chat.",
        "name": "unread_mention_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_mention_read.html"
  },
  "updateMessageSendAcknowledged": {
    "type": "object",
    "desc": "A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully. This update is sent only if the option \"use_quick_ack\" is set to true. This update may be sent multiple times for the same message.",
    "fields": [
      {
        "desc": "The chat identifier of the sent message.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "A temporary message identifier.",
        "name": "message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_acknowledged.html"
  },
  "updateMessageSendFailed": {
    "type": "object",
    "desc": "A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update.",
    "fields": [
      {
        "desc": "The failed to send message.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "The previous temporary message identifier.",
        "name": "old_message_id",
        "type": "string"
      },
      {
        "desc": "The cause of the message sending failure.",
        "name": "error",
        "type": "error"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_failed.html"
  },
  "updateMessageSendSucceeded": {
    "type": "object",
    "desc": "A message has been successfully sent.",
    "fields": [
      {
        "desc": "The sent message. Usually only the message identifier, date, and content are changed, but almost all other fields can also change.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "The previous temporary message identifier.",
        "name": "old_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_send_succeeded.html"
  },
  "updateMessageUnreadReactions": {
    "type": "object",
    "desc": "The list of unread reactions added to a message was changed.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "The new list of unread reactions.",
        "name": "unread_reactions",
        "type": "unreadReaction"
      },
      {
        "desc": "The new number of messages with unread reactions left in the chat.",
        "name": "unread_reaction_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_message_unread_reactions.html"
  },
  "updateNewCallSignalingData": {
    "type": "object",
    "desc": "New call signaling data arrived.",
    "fields": [
      {
        "desc": "The call identifier.",
        "name": "call_id",
        "type": "number"
      },
      {
        "desc": "The data.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_call_signaling_data.html"
  },
  "updateNewCallbackQuery": {
    "type": "object",
    "desc": "A new incoming callback query; for bots only.",
    "fields": [
      {
        "desc": "Unique query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the chat where the query was sent.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message from which the query originated.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Identifier that uniquely corresponds to the chat to which the message was sent.",
        "name": "chat_instance",
        "type": "string"
      },
      {
        "desc": "Query payload.",
        "name": "payload",
        "type": "CallbackQueryPayload"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_callback_query.html"
  },
  "updateNewChat": {
    "type": "object",
    "desc": "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the application. The chat field changes will be reported through separate updates.",
    "fields": [
      {
        "desc": "The chat.",
        "name": "chat",
        "type": "chat"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_chat.html"
  },
  "updateNewChatJoinRequest": {
    "type": "object",
    "desc": "A user sent a join request to a chat; for bots only.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Join request.",
        "name": "request",
        "type": "chatJoinRequest"
      },
      {
        "desc": "Chat identifier of the private chat with the user.",
        "name": "user_chat_id",
        "type": "string"
      },
      {
        "desc": "The invite link, which was used to send join request; may be null.",
        "name": "invite_link",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_chat_join_request.html"
  },
  "updateNewChosenInlineResult": {
    "type": "object",
    "desc": "The user has chosen a result of an inline query; for bots only.",
    "fields": [
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "User location; may be null.",
        "name": "user_location",
        "type": "location"
      },
      {
        "desc": "Text of the query.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Identifier of the chosen result.",
        "name": "result_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sent inline message, if known.",
        "name": "inline_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_chosen_inline_result.html"
  },
  "updateNewCustomEvent": {
    "type": "object",
    "desc": "A new incoming event; for bots only.",
    "fields": [
      {
        "desc": "A JSON-serialized event.",
        "name": "event",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_custom_event.html"
  },
  "updateNewCustomQuery": {
    "type": "object",
    "desc": "A new incoming query; for bots only.",
    "fields": [
      {
        "desc": "The query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "JSON-serialized query data.",
        "name": "data",
        "type": "string"
      },
      {
        "desc": "Query timeout.",
        "name": "timeout",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_custom_query.html"
  },
  "updateNewInlineCallbackQuery": {
    "type": "object",
    "desc": "A new incoming callback query from a message sent via a bot; for bots only.",
    "fields": [
      {
        "desc": "Unique query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the inline message from which the query originated.",
        "name": "inline_message_id",
        "type": "string"
      },
      {
        "desc": "An identifier uniquely corresponding to the chat a message was sent to.",
        "name": "chat_instance",
        "type": "string"
      },
      {
        "desc": "Query payload.",
        "name": "payload",
        "type": "CallbackQueryPayload"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_inline_callback_query.html"
  },
  "updateNewInlineQuery": {
    "type": "object",
    "desc": "A new incoming inline query; for bots only.",
    "fields": [
      {
        "desc": "Unique query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "User location; may be null.",
        "name": "user_location",
        "type": "location"
      },
      {
        "desc": "The type of the chat from which the query originated; may be null if unknown.",
        "name": "chat_type",
        "type": "ChatType"
      },
      {
        "desc": "Text of the query.",
        "name": "query",
        "type": "string"
      },
      {
        "desc": "Offset of the first entry to return.",
        "name": "offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_inline_query.html"
  },
  "updateNewMessage": {
    "type": "object",
    "desc": "A new message was received; can also be an outgoing message.",
    "fields": [
      {
        "desc": "The new message.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_message.html"
  },
  "updateNewPreCheckoutQuery": {
    "type": "object",
    "desc": "A new incoming pre-checkout query; for bots only. Contains full information about a checkout.",
    "fields": [
      {
        "desc": "Unique query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "Currency for the product price.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "Total price for the product, in the smallest units of the currency.",
        "name": "total_amount",
        "type": "string"
      },
      {
        "desc": "Invoice payload.",
        "name": "invoice_payload",
        "type": "bytes"
      },
      {
        "desc": "Identifier of a shipping option chosen by the user; may be empty if not applicable.",
        "name": "shipping_option_id",
        "type": "string"
      },
      {
        "desc": "Information about the order; may be null.",
        "name": "order_info",
        "type": "orderInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_pre_checkout_query.html"
  },
  "updateNewShippingQuery": {
    "type": "object",
    "desc": "A new incoming shipping query; for bots only. Only for invoices with flexible price.",
    "fields": [
      {
        "desc": "Unique query identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the user who sent the query.",
        "name": "sender_user_id",
        "type": "string"
      },
      {
        "desc": "Invoice payload.",
        "name": "invoice_payload",
        "type": "string"
      },
      {
        "desc": "User shipping address.",
        "name": "shipping_address",
        "type": "address"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_new_shipping_query.html"
  },
  "updateNotification": {
    "type": "object",
    "desc": "A notification was changed.",
    "fields": [
      {
        "desc": "Unique notification group identifier.",
        "name": "notification_group_id",
        "type": "number"
      },
      {
        "desc": "Changed notification.",
        "name": "notification",
        "type": "notification"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_notification.html"
  },
  "updateNotificationGroup": {
    "type": "object",
    "desc": "A list of active notifications in a notification group has changed.",
    "fields": [
      {
        "desc": "Unique notification group identifier.",
        "name": "notification_group_id",
        "type": "number"
      },
      {
        "desc": "New type of the notification group.",
        "name": "type",
        "type": "NotificationGroupType"
      },
      {
        "desc": "Identifier of a chat to which all notifications in the group belong.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Chat identifier, which notification settings must be applied to the added notifications.",
        "name": "notification_settings_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the notification sound to be played; 0 if sound is disabled.",
        "name": "notification_sound_id",
        "type": "string"
      },
      {
        "desc": "Total number of unread notifications in the group, can be bigger than number of active notifications.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of added group notifications, sorted by notification identifier.",
        "name": "added_notifications",
        "type": "notification"
      },
      {
        "desc": "Identifiers of removed group notifications, sorted by notification identifier.",
        "name": "removed_notification_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_notification_group.html"
  },
  "updateOption": {
    "type": "object",
    "desc": "An option changed its value.",
    "fields": [
      {
        "desc": "The option name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "The new option value.",
        "name": "value",
        "type": "OptionValue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_option.html"
  },
  "updatePoll": {
    "type": "object",
    "desc": "A poll was updated; for bots only.",
    "fields": [
      {
        "desc": "New data about the poll.",
        "name": "poll",
        "type": "poll"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_poll.html"
  },
  "updatePollAnswer": {
    "type": "object",
    "desc": "A user changed the answer to a poll; for bots only.",
    "fields": [
      {
        "desc": "Unique poll identifier.",
        "name": "poll_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the message sender that changed the answer to the poll.",
        "name": "voter_id",
        "type": "MessageSender"
      },
      {
        "desc": "0-based identifiers of answer options, chosen by the user.",
        "name": "option_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_poll_answer.html"
  },
  "updateProfileAccentColors": {
    "type": "object",
    "desc": "The list of supported accent colors for user profiles has changed.",
    "fields": [
      {
        "desc": "Information about supported colors.",
        "name": "colors",
        "type": "profileAccentColor"
      },
      {
        "desc": "The list of accent color identifiers, which can be set through setProfileAccentColor. The colors must be shown in the specififed order.",
        "name": "available_accent_color_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_profile_accent_colors.html"
  },
  "updateRecentStickers": {
    "type": "object",
    "desc": "The list of recently used stickers was updated.",
    "fields": [
      {
        "desc": "True, if the list of stickers attached to photo or video files was updated; otherwise, the list of sent stickers is updated.",
        "name": "is_attached",
        "type": "bool"
      },
      {
        "desc": "The new list of file identifiers of recently used stickers.",
        "name": "sticker_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_recent_stickers.html"
  },
  "updateSavedAnimations": {
    "type": "object",
    "desc": "The list of saved animations was updated.",
    "fields": [
      {
        "desc": "The new list of file identifiers of saved animations.",
        "name": "animation_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_saved_animations.html"
  },
  "updateSavedNotificationSounds": {
    "type": "object",
    "desc": "The list of saved notification sounds was updated. This update may not be sent until information about a notification sound was requested for the first time.",
    "fields": [
      {
        "desc": "The new list of identifiers of saved notification sounds.",
        "name": "notification_sound_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_saved_notification_sounds.html"
  },
  "updateScopeNotificationSettings": {
    "type": "object",
    "desc": "Notification settings for some type of chats were updated.",
    "fields": [
      {
        "desc": "Types of chats for which notification settings were updated.",
        "name": "scope",
        "type": "NotificationSettingsScope"
      },
      {
        "desc": "The new notification settings.",
        "name": "notification_settings",
        "type": "scopeNotificationSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_scope_notification_settings.html"
  },
  "updateSecretChat": {
    "type": "object",
    "desc": "Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the application.",
    "fields": [
      {
        "desc": "New data about the secret chat.",
        "name": "secret_chat",
        "type": "secretChat"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_secret_chat.html"
  },
  "updateSelectedBackground": {
    "type": "object",
    "desc": "The selected background has changed.",
    "fields": [
      {
        "desc": "True, if background for dark theme has changed.",
        "name": "for_dark_theme",
        "type": "bool"
      },
      {
        "desc": "The new selected background; may be null.",
        "name": "background",
        "type": "background"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_selected_background.html"
  },
  "updateServiceNotification": {
    "type": "object",
    "desc": "A service notification from the server was received. Upon receiving this the application must show a popup with the content of the notification.",
    "fields": [
      {
        "desc": "Notification type. If type begins with \"AUTH_KEY_DROP_\", then two buttons \"Cancel\" and \"Log out\" must be shown under notification; if user presses the second, all local data must be destroyed using Destroy method.",
        "name": "type",
        "type": "string"
      },
      {
        "desc": "Notification content.",
        "name": "content",
        "type": "MessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_service_notification.html"
  },
  "updateSpeechRecognitionTrial": {
    "type": "object",
    "desc": "The parameters of speech recognition without Telegram Premium subscription has changed.",
    "fields": [
      {
        "desc": "The maximum allowed duration of media for speech recognition without Telegram Premium subscription.",
        "name": "max_media_duration",
        "type": "number"
      },
      {
        "desc": "The total number of allowed speech recognitions per week; 0 if none.",
        "name": "weekly_count",
        "type": "number"
      },
      {
        "desc": "Number of left speech recognition attempts this week.",
        "name": "left_count",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the weekly number of tries will reset; 0 if unknown.",
        "name": "next_reset_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_speech_recognition_trial.html"
  },
  "updateStickerSet": {
    "type": "object",
    "desc": "A sticker set has changed.",
    "fields": [
      {
        "desc": "The sticker set.",
        "name": "sticker_set",
        "type": "stickerSet"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_sticker_set.html"
  },
  "updateStory": {
    "type": "object",
    "desc": "A story was changed.",
    "fields": [
      {
        "desc": "The new information about the story.",
        "name": "story",
        "type": "story"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story.html"
  },
  "updateStoryDeleted": {
    "type": "object",
    "desc": "A story became inaccessible.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Story identifier.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story_deleted.html"
  },
  "updateStoryListChatCount": {
    "type": "object",
    "desc": "Number of chats in a story list has changed.",
    "fields": [
      {
        "desc": "The story list.",
        "name": "story_list",
        "type": "StoryList"
      },
      {
        "desc": "Approximate total number of chats with active stories in the list.",
        "name": "chat_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story_list_chat_count.html"
  },
  "updateStorySendFailed": {
    "type": "object",
    "desc": "A story failed to send. If the story sending is canceled, then updateStoryDeleted will be received instead of this update.",
    "fields": [
      {
        "desc": "The failed to send story.",
        "name": "story",
        "type": "story"
      },
      {
        "desc": "The cause of the story sending failure.",
        "name": "error",
        "type": "error"
      },
      {
        "desc": "Type of the error; may be null if unknown.",
        "name": "error_type",
        "type": "CanSendStoryResult"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story_send_failed.html"
  },
  "updateStorySendSucceeded": {
    "type": "object",
    "desc": "A story has been successfully sent.",
    "fields": [
      {
        "desc": "The sent story.",
        "name": "story",
        "type": "story"
      },
      {
        "desc": "The previous temporary story identifier.",
        "name": "old_story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story_send_succeeded.html"
  },
  "updateStoryStealthMode": {
    "type": "object",
    "desc": "Story stealth mode settings have changed.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) until stealth mode is active; 0 if it is disabled.",
        "name": "active_until_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when stealth mode can be enabled again; 0 if there is no active cooldown.",
        "name": "cooldown_until_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_story_stealth_mode.html"
  },
  "updateSuggestedActions": {
    "type": "object",
    "desc": "The list of suggested to the user actions has changed.",
    "fields": [
      {
        "desc": "Added suggested actions.",
        "name": "added_actions",
        "type": "SuggestedAction"
      },
      {
        "desc": "Removed suggested actions.",
        "name": "removed_actions",
        "type": "SuggestedAction"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_suggested_actions.html"
  },
  "updateSupergroup": {
    "type": "object",
    "desc": "Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the application.",
    "fields": [
      {
        "desc": "New data about the supergroup.",
        "name": "supergroup",
        "type": "supergroup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_supergroup.html"
  },
  "updateSupergroupFullInfo": {
    "type": "object",
    "desc": "Some data in supergroupFullInfo has been changed.",
    "fields": [
      {
        "desc": "Identifier of the supergroup or channel.",
        "name": "supergroup_id",
        "type": "string"
      },
      {
        "desc": "New full information about the supergroup.",
        "name": "supergroup_full_info",
        "type": "supergroupFullInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_supergroup_full_info.html"
  },
  "updateTermsOfService": {
    "type": "object",
    "desc": "New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method must be called with the reason \"Decline ToS update\".",
    "fields": [
      {
        "desc": "Identifier of the terms of service.",
        "name": "terms_of_service_id",
        "type": "string"
      },
      {
        "desc": "The new terms of service.",
        "name": "terms_of_service",
        "type": "termsOfService"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_terms_of_service.html"
  },
  "updateTrendingStickerSets": {
    "type": "object",
    "desc": "The list of trending sticker sets was updated or some of them were viewed.",
    "fields": [
      {
        "desc": "Type of the affected stickers.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "The prefix of the list of trending sticker sets with the newest trending sticker sets.",
        "name": "sticker_sets",
        "type": "trendingStickerSets"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_trending_sticker_sets.html"
  },
  "updateUnconfirmedSession": {
    "type": "object",
    "desc": "The first unconfirmed session has changed.",
    "fields": [
      {
        "desc": "The unconfirmed session; may be null if none.",
        "name": "session",
        "type": "unconfirmedSession"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_unconfirmed_session.html"
  },
  "updateUnreadChatCount": {
    "type": "object",
    "desc": "Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if the message database is used.",
    "fields": [
      {
        "desc": "The chat list with changed number of unread messages.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "Approximate total number of chats in the chat list.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "Total number of unread chats.",
        "name": "unread_count",
        "type": "number"
      },
      {
        "desc": "Total number of unread unmuted chats.",
        "name": "unread_unmuted_count",
        "type": "number"
      },
      {
        "desc": "Total number of chats marked as unread.",
        "name": "marked_as_unread_count",
        "type": "number"
      },
      {
        "desc": "Total number of unmuted chats marked as unread.",
        "name": "marked_as_unread_unmuted_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_unread_chat_count.html"
  },
  "updateUnreadMessageCount": {
    "type": "object",
    "desc": "Number of unread messages in a chat list has changed. This update is sent only if the message database is used.",
    "fields": [
      {
        "desc": "The chat list with changed number of unread messages.",
        "name": "chat_list",
        "type": "ChatList"
      },
      {
        "desc": "Total number of unread messages.",
        "name": "unread_count",
        "type": "number"
      },
      {
        "desc": "Total number of unread messages in unmuted chats.",
        "name": "unread_unmuted_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_unread_message_count.html"
  },
  "updateUser": {
    "type": "object",
    "desc": "Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the application.",
    "fields": [
      {
        "desc": "New data about the user.",
        "name": "user",
        "type": "user"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user.html"
  },
  "updateUserFullInfo": {
    "type": "object",
    "desc": "Some data in userFullInfo has been changed.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "New full information about the user.",
        "name": "user_full_info",
        "type": "userFullInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_full_info.html"
  },
  "updateUserPrivacySettingRules": {
    "type": "object",
    "desc": "Some privacy setting rules have been changed.",
    "fields": [
      {
        "desc": "The privacy setting.",
        "name": "setting",
        "type": "UserPrivacySetting"
      },
      {
        "desc": "New privacy rules.",
        "name": "rules",
        "type": "userPrivacySettingRules"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_privacy_setting_rules.html"
  },
  "updateUserStatus": {
    "type": "object",
    "desc": "The user went online or offline.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "New status of the user.",
        "name": "status",
        "type": "UserStatus"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_user_status.html"
  },
  "updateUsersNearby": {
    "type": "object",
    "desc": "The list of users nearby has changed. The update is guaranteed to be sent only 60 seconds after a successful searchChatsNearby request.",
    "fields": [
      {
        "desc": "The new list of users nearby.",
        "name": "users_nearby",
        "type": "chatNearby"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_users_nearby.html"
  },
  "updateWebAppMessageSent": {
    "type": "object",
    "desc": "A message was sent by an opened Web App, so the Web App needs to be closed.",
    "fields": [
      {
        "desc": "Identifier of Web App launch.",
        "name": "web_app_launch_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1update_web_app_message_sent.html"
  },
  "UserPrivacySetting": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes available user privacy settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_privacy_setting.html"
  },
  "userPrivacySettingAllowCalls": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user can be called.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_calls.html"
  },
  "userPrivacySettingAllowChatInvites": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user can be invited to chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_chat_invites.html"
  },
  "userPrivacySettingAllowFindingByPhoneNumber": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user can be found by their phone number. Checked only if the phone number is not known to the other user. Can be set only to \"Allow contacts\" or \"Allow all\".",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_finding_by_phone_number.html"
  },
  "userPrivacySettingAllowPeerToPeerCalls": {
    "type": "object",
    "desc": "A privacy setting for managing whether peer-to-peer connections can be used for calls.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_peer_to_peer_calls.html"
  },
  "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user can receive voice and video messages in private chats.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_allow_private_voice_and_video_note_messages.html"
  },
  "userPrivacySettingShowBio": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user's bio is visible.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_bio.html"
  },
  "userPrivacySettingShowLinkInForwardedMessages": {
    "type": "object",
    "desc": "A privacy setting for managing whether a link to the user's account is included in forwarded messages.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_link_in_forwarded_messages.html"
  },
  "userPrivacySettingShowPhoneNumber": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user's phone number is visible.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_phone_number.html"
  },
  "userPrivacySettingShowProfilePhoto": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user's profile photo is visible.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_profile_photo.html"
  },
  "userPrivacySettingShowStatus": {
    "type": "object",
    "desc": "A privacy setting for managing whether the user's online status is visible.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_show_status.html"
  },
  "UserPrivacySettingRule": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a single rule for managing user privacy settings.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_privacy_setting_rule.html"
  },
  "userPrivacySettingRuleAllowAll": {
    "type": "object",
    "desc": "A rule to allow all users to do something.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_all.html"
  },
  "userPrivacySettingRuleAllowChatMembers": {
    "type": "object",
    "desc": "A rule to allow all members of certain specified basic groups and supergroups to doing something.",
    "fields": [
      {
        "desc": "The chat identifiers, total number of chats in all rules must not exceed 20.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_chat_members.html"
  },
  "userPrivacySettingRuleAllowContacts": {
    "type": "object",
    "desc": "A rule to allow all contacts of the user to do something.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_contacts.html"
  },
  "userPrivacySettingRuleAllowUsers": {
    "type": "object",
    "desc": "A rule to allow certain specified users to do something.",
    "fields": [
      {
        "desc": "The user identifiers, total number of users in all rules must not exceed 1000.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_allow_users.html"
  },
  "userPrivacySettingRuleRestrictAll": {
    "type": "object",
    "desc": "A rule to restrict all users from doing something.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_all.html"
  },
  "userPrivacySettingRuleRestrictChatMembers": {
    "type": "object",
    "desc": "A rule to restrict all members of specified basic groups and supergroups from doing something.",
    "fields": [
      {
        "desc": "The chat identifiers, total number of chats in all rules must not exceed 20.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_chat_members.html"
  },
  "userPrivacySettingRuleRestrictContacts": {
    "type": "object",
    "desc": "A rule to restrict all contacts of the user from doing something.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_contacts.html"
  },
  "userPrivacySettingRuleRestrictUsers": {
    "type": "object",
    "desc": "A rule to restrict all specified users from doing something.",
    "fields": [
      {
        "desc": "The user identifiers, total number of users in all rules must not exceed 1000.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rule_restrict_users.html"
  },
  "UserStatus": {
    "type": "object",
    "desc": "This class is an abstract base class. Describes the last time the user was online.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_status.html"
  },
  "userStatusEmpty": {
    "type": "object",
    "desc": "The user status was never changed.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_empty.html"
  },
  "userStatusLastMonth": {
    "type": "object",
    "desc": "The user is offline, but was online last month.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_last_month.html"
  },
  "userStatusLastWeek": {
    "type": "object",
    "desc": "The user is offline, but was online last week.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_last_week.html"
  },
  "userStatusOffline": {
    "type": "object",
    "desc": "The user is offline.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the user was last online.",
        "name": "was_online",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_offline.html"
  },
  "userStatusOnline": {
    "type": "object",
    "desc": "The user is online.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) when the user's online status will expire.",
        "name": "expires",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_online.html"
  },
  "userStatusRecently": {
    "type": "object",
    "desc": "The user was online recently.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_status_recently.html"
  },
  "UserType": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents the type of a user. The following types are possible: regular users, deleted users and bots.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_user_type.html"
  },
  "userTypeBot": {
    "type": "object",
    "desc": "A bot (see https://core.telegram.org/bots).",
    "fields": [
      {
        "desc": "True, if the bot is owned by the current user and can be edited using the methods toggleBotUsernameIsActive, reorderBotActiveUsernames, setBotProfilePhoto, setBotName, setBotInfoDescription, and setBotInfoShortDescription.",
        "name": "can_be_edited",
        "type": "bool"
      },
      {
        "desc": "True, if the bot can be invited to basic group and supergroup chats.",
        "name": "can_join_groups",
        "type": "bool"
      },
      {
        "desc": "True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages.",
        "name": "can_read_all_group_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the bot supports inline queries.",
        "name": "is_inline",
        "type": "bool"
      },
      {
        "desc": "Placeholder for inline queries (displayed on the application input field).",
        "name": "inline_query_placeholder",
        "type": "string"
      },
      {
        "desc": "True, if the location of the user is expected to be sent with every inline query to this bot.",
        "name": "need_location",
        "type": "bool"
      },
      {
        "desc": "True, if the bot can be added to attachment or side menu.",
        "name": "can_be_added_to_attachment_menu",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_bot.html"
  },
  "userTypeDeleted": {
    "type": "object",
    "desc": "A deleted user or deleted bot. No information on the user besides the user identifier is available. It is not possible to perform any active actions on this type of user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_deleted.html"
  },
  "userTypeRegular": {
    "type": "object",
    "desc": "A regular user.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_regular.html"
  },
  "userTypeUnknown": {
    "type": "object",
    "desc": "No information on the user besides the user identifier is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_type_unknown.html"
  },
  "VectorPathCommand": {
    "type": "object",
    "desc": "This class is an abstract base class. Represents a vector path command.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1_vector_path_command.html"
  },
  "vectorPathCommandCubicBezierCurve": {
    "type": "object",
    "desc": "A cubic Bézier curve to a given point.",
    "fields": [
      {
        "desc": "The start control point of the curve.",
        "name": "start_control_point",
        "type": "point"
      },
      {
        "desc": "The end control point of the curve.",
        "name": "end_control_point",
        "type": "point"
      },
      {
        "desc": "The end point of the curve.",
        "name": "end_point",
        "type": "point"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1vector_path_command_cubic_bezier_curve.html"
  },
  "vectorPathCommandLine": {
    "type": "object",
    "desc": "A straight line to a given point.",
    "fields": [
      {
        "desc": "The end point of the straight line.",
        "name": "end_point",
        "type": "point"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1vector_path_command_line.html"
  },
  "accentColor": {
    "type": "object",
    "desc": "Contains information about supported accent color for user/chat name, background of empty chat photo, replies to messages and link previews.",
    "fields": [
      {
        "desc": "Accent color identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Identifier of a built-in color to use in places, where only one color is needed; 0-6.",
        "name": "built_in_accent_color_id",
        "type": "number"
      },
      {
        "desc": "The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in light themes.",
        "name": "light_theme_colors",
        "type": "number"
      },
      {
        "desc": "The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in dark themes.",
        "name": "dark_theme_colors",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1accent_color.html"
  },
  "accountTtl": {
    "type": "object",
    "desc": "Contains information about the period of inactivity after which the current user's account will automatically be deleted.",
    "fields": [
      {
        "desc": "Number of days of inactivity before the account will be flagged for deletion; 30-366 days.",
        "name": "days",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1account_ttl.html"
  },
  "addedReaction": {
    "type": "object",
    "desc": "Represents a reaction applied to a message.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "type",
        "type": "ReactionType"
      },
      {
        "desc": "Identifier of the chat member, applied the reaction.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "True, if the reaction was added by the current user.",
        "name": "is_outgoing",
        "type": "bool"
      },
      {
        "desc": "Point in time (Unix timestamp) when the reaction was added.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1added_reaction.html"
  },
  "addedReactions": {
    "type": "object",
    "desc": "Represents a list of reactions added to a message.",
    "fields": [
      {
        "desc": "The total number of found reactions.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "The list of added reactions.",
        "name": "reactions",
        "type": "addedReaction"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1added_reactions.html"
  },
  "address": {
    "type": "object",
    "desc": "Describes an address.",
    "fields": [
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code.",
        "name": "country_code",
        "type": "string"
      },
      {
        "desc": "State, if applicable.",
        "name": "state",
        "type": "string"
      },
      {
        "desc": "City.",
        "name": "city",
        "type": "string"
      },
      {
        "desc": "First line of the address.",
        "name": "street_line1",
        "type": "string"
      },
      {
        "desc": "Second line of the address.",
        "name": "street_line2",
        "type": "string"
      },
      {
        "desc": "Address postal code.",
        "name": "postal_code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1address.html"
  },
  "animatedChatPhoto": {
    "type": "object",
    "desc": "Animated variant of a chat photo in MPEG4 format.",
    "fields": [
      {
        "desc": "Animation width and height.",
        "name": "length",
        "type": "number"
      },
      {
        "desc": "Information about the animation file.",
        "name": "file",
        "type": "file"
      },
      {
        "desc": "Timestamp of the frame, used as a static chat photo.",
        "name": "main_frame_timestamp",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animated_chat_photo.html"
  },
  "animatedEmoji": {
    "type": "object",
    "desc": "Describes an animated or custom representation of an emoji.",
    "fields": [
      {
        "desc": "Sticker for the emoji; may be null if yet unknown for a custom emoji. If the sticker is a custom emoji, it can have arbitrary format different from stickerFormatTgs.",
        "name": "sticker",
        "type": "sticker"
      },
      {
        "desc": "Expected width of the sticker, which can be used if the sticker is null.",
        "name": "sticker_width",
        "type": "number"
      },
      {
        "desc": "Expected height of the sticker, which can be used if the sticker is null.",
        "name": "sticker_height",
        "type": "number"
      },
      {
        "desc": "Emoji modifier fitzpatrick type; 0-6; 0 if none.",
        "name": "fitzpatrick_type",
        "type": "number"
      },
      {
        "desc": "File containing the sound to be played when the sticker is clicked; may be null. The sound is encoded with the Opus codec, and stored inside an OGG container.",
        "name": "sound",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animated_emoji.html"
  },
  "animation": {
    "type": "object",
    "desc": "Describes an animation file. The animation must be encoded in GIF or MPEG4 format.",
    "fields": [
      {
        "desc": "Duration of the animation, in seconds; as defined by the sender.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Width of the animation.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Height of the animation.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Original name of the file; as defined by the sender.",
        "name": "file_name",
        "type": "string"
      },
      {
        "desc": "MIME type of the file, usually \"image/gif\" or \"video/mp4\".",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "True, if stickers were added to the animation. The list of corresponding sticker set can be received using getAttachedStickerSets.",
        "name": "has_stickers",
        "type": "bool"
      },
      {
        "desc": "Animation minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Animation thumbnail in JPEG or MPEG4 format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "File containing the animation.",
        "name": "animation",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animation.html"
  },
  "animations": {
    "type": "object",
    "desc": "Represents a list of animations.",
    "fields": [
      {
        "desc": "List of animations.",
        "name": "animations",
        "type": "animation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1animations.html"
  },
  "archiveChatListSettings": {
    "type": "object",
    "desc": "Contains settings for automatic moving of chats to and from the Archive chat lists.",
    "fields": [
      {
        "desc": "True, if new chats from non-contacts will be automatically archived and muted. Can be set to true only if the option \"can_archive_and_mute_new_chats_from_unknown_users\" is true.",
        "name": "archive_and_mute_new_chats_from_unknown_users",
        "type": "bool"
      },
      {
        "desc": "True, if unmuted chats will be kept in the Archive chat list when they get a new message.",
        "name": "keep_unmuted_chats_archived",
        "type": "bool"
      },
      {
        "desc": "True, if unmuted chats, that are always included or pinned in a folder, will be kept in the Archive chat list when they get a new message. Ignored if keep_unmuted_chats_archived == true.",
        "name": "keep_chats_from_folders_archived",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1archive_chat_list_settings.html"
  },
  "attachmentMenuBot": {
    "type": "object",
    "desc": "Represents a bot, which can be added to attachment or side menu.",
    "fields": [
      {
        "desc": "User identifier of the bot.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "True, if the bot supports opening from attachment menu in the chat with the bot.",
        "name": "supports_self_chat",
        "type": "bool"
      },
      {
        "desc": "True, if the bot supports opening from attachment menu in private chats with ordinary users.",
        "name": "supports_user_chats",
        "type": "bool"
      },
      {
        "desc": "True, if the bot supports opening from attachment menu in private chats with other bots.",
        "name": "supports_bot_chats",
        "type": "bool"
      },
      {
        "desc": "True, if the bot supports opening from attachment menu in basic group and supergroup chats.",
        "name": "supports_group_chats",
        "type": "bool"
      },
      {
        "desc": "True, if the bot supports opening from attachment menu in channel chats.",
        "name": "supports_channel_chats",
        "type": "bool"
      },
      {
        "desc": "True, if the user must be asked for the permission to send messages to the bot.",
        "name": "request_write_access",
        "type": "bool"
      },
      {
        "desc": "True, if the bot was explicitly added by the user. If the bot isn't added, then on the first bot launch toggleBotIsAddedToAttachmentMenu must be called and the bot must be added or removed.",
        "name": "is_added",
        "type": "bool"
      },
      {
        "desc": "True, if the bot must be shown in the attachment menu.",
        "name": "show_in_attachment_menu",
        "type": "bool"
      },
      {
        "desc": "True, if the bot must be shown in the side menu.",
        "name": "show_in_side_menu",
        "type": "bool"
      },
      {
        "desc": "True, if a disclaimer, why the bot is shown in the side menu, is needed.",
        "name": "show_disclaimer_in_side_menu",
        "type": "bool"
      },
      {
        "desc": "Name for the bot in attachment menu.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Color to highlight selected name of the bot if appropriate; may be null.",
        "name": "name_color",
        "type": "attachmentMenuBotColor"
      },
      {
        "desc": "Default icon for the bot in SVG format; may be null.",
        "name": "default_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in SVG format for the official iOS app; may be null.",
        "name": "ios_static_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in TGS format for the official iOS app; may be null.",
        "name": "ios_animated_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in PNG format for the official iOS app side menu; may be null.",
        "name": "ios_side_menu_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in TGS format for the official Android app; may be null.",
        "name": "android_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in SVG format for the official Android app side menu; may be null.",
        "name": "android_side_menu_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in TGS format for the official native macOS app; may be null.",
        "name": "macos_icon",
        "type": "file"
      },
      {
        "desc": "Icon for the bot in PNG format for the official macOS app side menu; may be null.",
        "name": "macos_side_menu_icon",
        "type": "file"
      },
      {
        "desc": "Color to highlight selected icon of the bot if appropriate; may be null.",
        "name": "icon_color",
        "type": "attachmentMenuBotColor"
      },
      {
        "desc": "Default placeholder for opened Web Apps in SVG format; may be null.",
        "name": "web_app_placeholder",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1attachment_menu_bot.html"
  },
  "attachmentMenuBotColor": {
    "type": "object",
    "desc": "Describes a color to highlight a bot added to attachment menu.",
    "fields": [
      {
        "desc": "Color in the RGB24 format for light themes.",
        "name": "light_color",
        "type": "number"
      },
      {
        "desc": "Color in the RGB24 format for dark themes.",
        "name": "dark_color",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1attachment_menu_bot_color.html"
  },
  "audio": {
    "type": "object",
    "desc": "Describes an audio file. Audio is usually in MP3 or M4A format.",
    "fields": [
      {
        "desc": "Duration of the audio, in seconds; as defined by the sender.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Title of the audio; as defined by the sender.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Performer of the audio; as defined by the sender.",
        "name": "performer",
        "type": "string"
      },
      {
        "desc": "Original name of the file; as defined by the sender.",
        "name": "file_name",
        "type": "string"
      },
      {
        "desc": "The MIME type of the file; as defined by the sender.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "The minithumbnail of the album cover; may be null.",
        "name": "album_cover_minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "The thumbnail of the album cover in JPEG format; as defined by the sender. The full size thumbnail is supposed to be extracted from the downloaded audio file; may be null.",
        "name": "album_cover_thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "Album cover variants to use if the downloaded audio file contains no album cover. Provided thumbnail dimensions are approximate.",
        "name": "external_album_covers",
        "type": "thumbnail"
      },
      {
        "desc": "File containing the audio.",
        "name": "audio",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1audio.html"
  },
  "authenticationCodeInfo": {
    "type": "object",
    "desc": "Information about the authentication code that was sent.",
    "fields": [
      {
        "desc": "A phone number that is being authenticated.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "The way the code was sent to the user.",
        "name": "type",
        "type": "AuthenticationCodeType"
      },
      {
        "desc": "The way the next code will be sent to the user; may be null.",
        "name": "next_type",
        "type": "AuthenticationCodeType"
      },
      {
        "desc": "Timeout before the code can be re-sent, in seconds.",
        "name": "timeout",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1authentication_code_info.html"
  },
  "autoDownloadSettings": {
    "type": "object",
    "desc": "Contains auto-download settings.",
    "fields": [
      {
        "desc": "True, if the auto-download is enabled.",
        "name": "is_auto_download_enabled",
        "type": "bool"
      },
      {
        "desc": "The maximum size of a photo file to be auto-downloaded, in bytes.",
        "name": "max_photo_file_size",
        "type": "number"
      },
      {
        "desc": "The maximum size of a video file to be auto-downloaded, in bytes.",
        "name": "max_video_file_size",
        "type": "string"
      },
      {
        "desc": "The maximum size of other file types to be auto-downloaded, in bytes.",
        "name": "max_other_file_size",
        "type": "string"
      },
      {
        "desc": "The maximum suggested bitrate for uploaded videos, in kbit/s.",
        "name": "video_upload_bitrate",
        "type": "number"
      },
      {
        "desc": "True, if the beginning of video files needs to be preloaded for instant playback.",
        "name": "preload_large_videos",
        "type": "bool"
      },
      {
        "desc": "True, if the next audio track needs to be preloaded while the user is listening to an audio file.",
        "name": "preload_next_audio",
        "type": "bool"
      },
      {
        "desc": "True, if stories needs to be preloaded.",
        "name": "preload_stories",
        "type": "bool"
      },
      {
        "desc": "True, if \"use less data for calls\" option needs to be enabled.",
        "name": "use_less_data_for_calls",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1auto_download_settings.html"
  },
  "autoDownloadSettingsPresets": {
    "type": "object",
    "desc": "Contains auto-download settings presets for the current user.",
    "fields": [
      {
        "desc": "Preset with lowest settings; supposed to be used by default when roaming.",
        "name": "low",
        "type": "autoDownloadSettings"
      },
      {
        "desc": "Preset with medium settings; supposed to be used by default when using mobile data.",
        "name": "medium",
        "type": "autoDownloadSettings"
      },
      {
        "desc": "Preset with highest settings; supposed to be used by default when connected on Wi-Fi.",
        "name": "high",
        "type": "autoDownloadSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1auto_download_settings_presets.html"
  },
  "autosaveSettings": {
    "type": "object",
    "desc": "Describes autosave settings.",
    "fields": [
      {
        "desc": "Default autosave settings for private chats.",
        "name": "private_chat_settings",
        "type": "scopeAutosaveSettings"
      },
      {
        "desc": "Default autosave settings for basic group and supergroup chats.",
        "name": "group_settings",
        "type": "scopeAutosaveSettings"
      },
      {
        "desc": "Default autosave settings for channel chats.",
        "name": "channel_settings",
        "type": "scopeAutosaveSettings"
      },
      {
        "desc": "Autosave settings for specific chats.",
        "name": "exceptions",
        "type": "autosaveSettingsException"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings.html"
  },
  "autosaveSettingsException": {
    "type": "object",
    "desc": "Contains autosave settings for a chat, which overrides default settings for the corresponding scope.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Autosave settings for the chat.",
        "name": "settings",
        "type": "scopeAutosaveSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1autosave_settings_exception.html"
  },
  "availableReaction": {
    "type": "object",
    "desc": "Represents an available reaction.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "type",
        "type": "ReactionType"
      },
      {
        "desc": "True, if Telegram Premium is needed to send the reaction.",
        "name": "needs_premium",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1available_reaction.html"
  },
  "availableReactions": {
    "type": "object",
    "desc": "Represents a list of reactions that can be added to a message.",
    "fields": [
      {
        "desc": "List of reactions to be shown at the top.",
        "name": "top_reactions",
        "type": "availableReaction"
      },
      {
        "desc": "List of recently used reactions.",
        "name": "recent_reactions",
        "type": "availableReaction"
      },
      {
        "desc": "List of popular reactions.",
        "name": "popular_reactions",
        "type": "availableReaction"
      },
      {
        "desc": "True, if any custom emoji reaction can be added by Telegram Premium subscribers.",
        "name": "allow_custom_emoji",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1available_reactions.html"
  },
  "background": {
    "type": "object",
    "desc": "Describes a chat background.",
    "fields": [
      {
        "desc": "Unique background identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "True, if this is one of default backgrounds.",
        "name": "is_default",
        "type": "bool"
      },
      {
        "desc": "True, if the background is dark and is recommended to be used with dark theme.",
        "name": "is_dark",
        "type": "bool"
      },
      {
        "desc": "Unique background name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Document with the background; may be null. Null only for filled backgrounds.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "Type of the background.",
        "name": "type",
        "type": "BackgroundType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1background.html"
  },
  "backgrounds": {
    "type": "object",
    "desc": "Contains a list of backgrounds.",
    "fields": [
      {
        "desc": "A list of backgrounds.",
        "name": "backgrounds",
        "type": "background"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1backgrounds.html"
  },
  "bankCardActionOpenUrl": {
    "type": "object",
    "desc": "Describes an action associated with a bank card number.",
    "fields": [
      {
        "desc": "Action text.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "The URL to be opened.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bank_card_action_open_url.html"
  },
  "bankCardInfo": {
    "type": "object",
    "desc": "Information about a bank card.",
    "fields": [
      {
        "desc": "Title of the bank card description.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Actions that can be done with the bank card number.",
        "name": "actions",
        "type": "bankCardActionOpenUrl"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bank_card_info.html"
  },
  "basicGroup": {
    "type": "object",
    "desc": "Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users).",
    "fields": [
      {
        "desc": "Group identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Number of members in the group.",
        "name": "member_count",
        "type": "number"
      },
      {
        "desc": "Status of the current user in the group.",
        "name": "status",
        "type": "ChatMemberStatus"
      },
      {
        "desc": "True, if the group is active.",
        "name": "is_active",
        "type": "bool"
      },
      {
        "desc": "Identifier of the supergroup to which this group was upgraded; 0 if none.",
        "name": "upgraded_to_supergroup_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1basic_group.html"
  },
  "basicGroupFullInfo": {
    "type": "object",
    "desc": "Contains full information about a basic group.",
    "fields": [
      {
        "desc": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo.",
        "name": "photo",
        "type": "chatPhoto"
      },
      {
        "desc": "Group description. Updated only after the basic group is opened.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "User identifier of the creator of the group; 0 if unknown.",
        "name": "creator_user_id",
        "type": "string"
      },
      {
        "desc": "Group members.",
        "name": "members",
        "type": "chatMember"
      },
      {
        "desc": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators after upgrading the basic group to a supergroup.",
        "name": "can_hide_members",
        "type": "bool"
      },
      {
        "desc": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup after upgrading the basic group to a supergroup.",
        "name": "can_toggle_aggressive_anti_spam",
        "type": "bool"
      },
      {
        "desc": "Primary invite link for this group; may be null. For chat administrators with can_invite_users right only. Updated only after the basic group is opened.",
        "name": "invite_link",
        "type": "chatInviteLink"
      },
      {
        "desc": "List of commands of bots in the group.",
        "name": "bot_commands",
        "type": "botCommands"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1basic_group_full_info.html"
  },
  "botCommand": {
    "type": "object",
    "desc": "Represents a command supported by a bot.",
    "fields": [
      {
        "desc": "Text of the bot command.",
        "name": "command",
        "type": "string"
      },
      {
        "desc": "Description of the bot command.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_command.html"
  },
  "botCommands": {
    "type": "object",
    "desc": "Contains a list of bot commands.",
    "fields": [
      {
        "desc": "Bot's user identifier.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "List of bot commands.",
        "name": "commands",
        "type": "botCommand"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_commands.html"
  },
  "botInfo": {
    "type": "object",
    "desc": "Contains information about a bot.",
    "fields": [
      {
        "desc": "The text that is shown on the bot's profile page and is sent together with the link when users share the bot.",
        "name": "short_description",
        "type": "string"
      },
      {
        "desc": "The text shown in the chat with the bot if the chat is empty.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Photo shown in the chat with the bot if the chat is empty; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Animation shown in the chat with the bot if the chat is empty; may be null.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown.",
        "name": "menu_button",
        "type": "botMenuButton"
      },
      {
        "desc": "List of the bot commands.",
        "name": "commands",
        "type": "botCommand"
      },
      {
        "desc": "Default administrator rights for adding the bot to basic group and supergroup chats; may be null.",
        "name": "default_group_administrator_rights",
        "type": "chatAdministratorRights"
      },
      {
        "desc": "Default administrator rights for adding the bot to channels; may be null.",
        "name": "default_channel_administrator_rights",
        "type": "chatAdministratorRights"
      },
      {
        "desc": "The internal link, which can be used to edit bot commands; may be null.",
        "name": "edit_commands_link",
        "type": "InternalLinkType"
      },
      {
        "desc": "The internal link, which can be used to edit bot description; may be null.",
        "name": "edit_description_link",
        "type": "InternalLinkType"
      },
      {
        "desc": "The internal link, which can be used to edit the photo or animation shown in the chat with the bot if the chat is empty; may be null.",
        "name": "edit_description_media_link",
        "type": "InternalLinkType"
      },
      {
        "desc": "The internal link, which can be used to edit bot settings; may be null.",
        "name": "edit_settings_link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_info.html"
  },
  "botMenuButton": {
    "type": "object",
    "desc": "Describes a button to be shown instead of bot commands menu button.",
    "fields": [
      {
        "desc": "Text of the button.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "URL to be passed to openWebApp.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1bot_menu_button.html"
  },
  "call": {
    "type": "object",
    "desc": "Describes a call.",
    "fields": [
      {
        "desc": "Call identifier, not persistent.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "User identifier of the other call participant.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "True, if the call is outgoing.",
        "name": "is_outgoing",
        "type": "bool"
      },
      {
        "desc": "True, if the call is a video call.",
        "name": "is_video",
        "type": "bool"
      },
      {
        "desc": "Call state.",
        "name": "state",
        "type": "CallState"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call.html"
  },
  "callId": {
    "type": "object",
    "desc": "Contains the call identifier.",
    "fields": [
      {
        "desc": "Call identifier.",
        "name": "id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_id.html"
  },
  "callProtocol": {
    "type": "object",
    "desc": "Specifies the supported call protocols.",
    "fields": [
      {
        "desc": "True, if UDP peer-to-peer connections are supported.",
        "name": "udp_p2p",
        "type": "bool"
      },
      {
        "desc": "True, if connection through UDP reflectors is supported.",
        "name": "udp_reflector",
        "type": "bool"
      },
      {
        "desc": "The minimum supported API layer; use 65.",
        "name": "min_layer",
        "type": "number"
      },
      {
        "desc": "The maximum supported API layer; use 92.",
        "name": "max_layer",
        "type": "number"
      },
      {
        "desc": "List of supported tgcalls versions.",
        "name": "library_versions",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_protocol.html"
  },
  "callServer": {
    "type": "object",
    "desc": "Describes a server for relaying call data.",
    "fields": [
      {
        "desc": "Server identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Server IPv4 address.",
        "name": "ip_address",
        "type": "string"
      },
      {
        "desc": "Server IPv6 address.",
        "name": "ipv6_address",
        "type": "string"
      },
      {
        "desc": "Server port number.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Server type.",
        "name": "type",
        "type": "CallServerType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1call_server.html"
  },
  "callbackQueryAnswer": {
    "type": "object",
    "desc": "Contains a bot's answer to a callback query.",
    "fields": [
      {
        "desc": "Text of the answer.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "True, if an alert must be shown to the user instead of a toast notification.",
        "name": "show_alert",
        "type": "bool"
      },
      {
        "desc": "URL to be opened.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1callback_query_answer.html"
  },
  "chat": {
    "type": "object",
    "desc": "A chat. (Can be a private chat, basic group, supergroup, or secret chat.)",
    "fields": [
      {
        "desc": "Chat unique identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Type of the chat.",
        "name": "type",
        "type": "ChatType"
      },
      {
        "desc": "Chat title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Chat photo; may be null.",
        "name": "photo",
        "type": "chatPhotoInfo"
      },
      {
        "desc": "Identifier of the accent color for message sender name, and backgrounds of chat photo, reply header, and link preview.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown on the reply header background in replies to messages sent by the chat; 0 if none.",
        "name": "background_custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "Actions that non-administrator chat members are allowed to take in the chat.",
        "name": "permissions",
        "type": "chatPermissions"
      },
      {
        "desc": "Last message in the chat; may be null if none or unknown.",
        "name": "last_message",
        "type": "message"
      },
      {
        "desc": "Positions of the chat in chat lists.",
        "name": "positions",
        "type": "chatPosition"
      },
      {
        "desc": "Identifier of a user or chat that is selected to send messages in the chat; may be null if the user can't change message sender.",
        "name": "message_sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Block list to which the chat is added; may be null if none.",
        "name": "block_list",
        "type": "BlockList"
      },
      {
        "desc": "True, if chat content can't be saved locally, forwarded, or copied.",
        "name": "has_protected_content",
        "type": "bool"
      },
      {
        "desc": "True, if translation of all messages in the chat must be suggested to the user.",
        "name": "is_translatable",
        "type": "bool"
      },
      {
        "desc": "True, if the chat is marked as unread.",
        "name": "is_marked_as_unread",
        "type": "bool"
      },
      {
        "desc": "True, if the chat is a forum supergroup that must be shown in the \"View as topics\" mode.",
        "name": "view_as_topics",
        "type": "bool"
      },
      {
        "desc": "True, if the chat has scheduled messages.",
        "name": "has_scheduled_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the chat messages can be deleted only for the current user while other users will continue to see the messages.",
        "name": "can_be_deleted_only_for_self",
        "type": "bool"
      },
      {
        "desc": "True, if the chat messages can be deleted for all users.",
        "name": "can_be_deleted_for_all_users",
        "type": "bool"
      },
      {
        "desc": "True, if the chat can be reported to Telegram moderators through reportChat or reportChatPhoto.",
        "name": "can_be_reported",
        "type": "bool"
      },
      {
        "desc": "Default value of the disable_notification parameter, used when a message is sent to the chat.",
        "name": "default_disable_notification",
        "type": "bool"
      },
      {
        "desc": "Number of unread messages in the chat.",
        "name": "unread_count",
        "type": "number"
      },
      {
        "desc": "Identifier of the last read incoming message.",
        "name": "last_read_inbox_message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last read outgoing message.",
        "name": "last_read_outbox_message_id",
        "type": "string"
      },
      {
        "desc": "Number of unread messages with a mention/reply in the chat.",
        "name": "unread_mention_count",
        "type": "number"
      },
      {
        "desc": "Number of messages with unread reactions in the chat.",
        "name": "unread_reaction_count",
        "type": "number"
      },
      {
        "desc": "Notification settings for the chat.",
        "name": "notification_settings",
        "type": "chatNotificationSettings"
      },
      {
        "desc": "Types of reaction, available in the chat.",
        "name": "available_reactions",
        "type": "ChatAvailableReactions"
      },
      {
        "desc": "Current message auto-delete or self-destruct timer setting for the chat, in seconds; 0 if disabled. Self-destruct timer in secret chats starts after the message or its content is viewed. Auto-delete timer in other chats starts from the send date.",
        "name": "message_auto_delete_time",
        "type": "number"
      },
      {
        "desc": "Background set for the chat; may be null if none.",
        "name": "background",
        "type": "chatBackground"
      },
      {
        "desc": "If non-empty, name of a theme, set for the chat.",
        "name": "theme_name",
        "type": "string"
      },
      {
        "desc": "Information about actions which must be possible to do through the chat action bar; may be null if none.",
        "name": "action_bar",
        "type": "ChatActionBar"
      },
      {
        "desc": "Information about video chat of the chat.",
        "name": "video_chat",
        "type": "videoChat"
      },
      {
        "desc": "Information about pending join requests; may be null if none.",
        "name": "pending_join_requests",
        "type": "chatJoinRequestsInfo"
      },
      {
        "desc": "Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat.",
        "name": "reply_markup_message_id",
        "type": "string"
      },
      {
        "desc": "A draft of a message in the chat; may be null if none.",
        "name": "draft_message",
        "type": "draftMessage"
      },
      {
        "desc": "Application-specific data associated with the chat. (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the message database is used.",
        "name": "client_data",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat.html"
  },
  "chatActiveStories": {
    "type": "object",
    "desc": "Describes active stories posted by a chat.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the stories.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the story list in which the stories are shown; may be null if the stories aren't shown in a story list.",
        "name": "list",
        "type": "StoryList"
      },
      {
        "desc": "A parameter used to determine order of the stories in the story list; 0 if the stories doesn't need to be shown in the story list. Stories must be sorted by the pair (order, story_sender_chat_id) in descending order.",
        "name": "order",
        "type": "string"
      },
      {
        "desc": "Identifier of the last read active story.",
        "name": "max_read_story_id",
        "type": "number"
      },
      {
        "desc": "Basic information about the stories; use getStory to get full information about the stories. The stories are in a chronological order (i.e., in order of increasing story identifiers).",
        "name": "stories",
        "type": "storyInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_active_stories.html"
  },
  "chatAdministrator": {
    "type": "object",
    "desc": "Contains information about a chat administrator.",
    "fields": [
      {
        "desc": "User identifier of the administrator.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Custom title of the administrator.",
        "name": "custom_title",
        "type": "string"
      },
      {
        "desc": "True, if the user is the owner of the chat.",
        "name": "is_owner",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_administrator.html"
  },
  "chatAdministratorRights": {
    "type": "object",
    "desc": "Describes rights of the administrator.",
    "fields": [
      {
        "desc": "True, if the administrator can get chat event log, get chat boosts in channels, get channel members, report supergroup spam messages, see anonymous administrators in supergroups and ignore slow mode. Implied by any other privilege; applicable to supergroups and channels only.",
        "name": "can_manage_chat",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can change the chat title, photo, and other settings.",
        "name": "can_change_info",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can create channel posts or view channel statistics; applicable to channels only.",
        "name": "can_post_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can edit messages of other users and pin messages; applicable to channels only.",
        "name": "can_edit_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can delete messages of other users.",
        "name": "can_delete_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can invite new users to the chat.",
        "name": "can_invite_users",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can restrict, ban, or unban chat members or view supergroup statistics; always true for channels.",
        "name": "can_restrict_members",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can pin messages; applicable to basic groups and supergroups only.",
        "name": "can_pin_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can manage topics; applicable to forum supergroups only.",
        "name": "can_manage_topics",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by them.",
        "name": "can_promote_members",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can manage video chats.",
        "name": "can_manage_video_chats",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can create new channel stories, or edit and delete posted stories; applicable to channels only.",
        "name": "can_post_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can edit stories posted by other users, pin stories and access story archive; applicable to channels only.",
        "name": "can_edit_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator can delete stories posted by other users; applicable to channels only.",
        "name": "can_delete_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the administrator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only.",
        "name": "is_anonymous",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_administrator_rights.html"
  },
  "chatAdministrators": {
    "type": "object",
    "desc": "Represents a list of chat administrators.",
    "fields": [
      {
        "desc": "A list of chat administrators.",
        "name": "administrators",
        "type": "chatAdministrator"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_administrators.html"
  },
  "chatBackground": {
    "type": "object",
    "desc": "Describes a background set for a specific chat.",
    "fields": [
      {
        "desc": "The background.",
        "name": "background",
        "type": "background"
      },
      {
        "desc": "Dimming of the background in dark themes, as a percentage; 0-100.",
        "name": "dark_theme_dimming",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_background.html"
  },
  "chatBoost": {
    "type": "object",
    "desc": "Describes a boost applied to a chat.",
    "fields": [
      {
        "desc": "Unique identifier of the boost.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "The number of identical boosts applied.",
        "name": "count",
        "type": "number"
      },
      {
        "desc": "Source of the boost.",
        "name": "source",
        "type": "ChatBoostSource"
      },
      {
        "desc": "Point in time (Unix timestamp) when the chat was boosted.",
        "name": "start_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the boost will expire.",
        "name": "expiration_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost.html"
  },
  "chatBoostLink": {
    "type": "object",
    "desc": "Contains an HTTPS link to boost a chat.",
    "fields": [
      {
        "desc": "The link.",
        "name": "link",
        "type": "string"
      },
      {
        "desc": "True, if the link will work for non-members of the chat.",
        "name": "is_public",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_link.html"
  },
  "chatBoostLinkInfo": {
    "type": "object",
    "desc": "Contains information about a link to boost a chat.",
    "fields": [
      {
        "desc": "True, if the link will work for non-members of the chat.",
        "name": "is_public",
        "type": "bool"
      },
      {
        "desc": "Identifier of the chat to which the link points; 0 if the chat isn't found.",
        "name": "chat_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_link_info.html"
  },
  "chatBoostSlot": {
    "type": "object",
    "desc": "Describes a slot for chat boost.",
    "fields": [
      {
        "desc": "Unique identifier of the slot.",
        "name": "slot_id",
        "type": "number"
      },
      {
        "desc": "Identifier of the currently boosted chat; 0 if none.",
        "name": "currently_boosted_chat_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the chat was boosted; 0 if none.",
        "name": "start_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the boost will expire.",
        "name": "expiration_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) after which the boost can be used for another chat.",
        "name": "cooldown_until_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_slot.html"
  },
  "chatBoostSlots": {
    "type": "object",
    "desc": "Contains a list of chat boost slots.",
    "fields": [
      {
        "desc": "List of boost slots.",
        "name": "slots",
        "type": "chatBoostSlot"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_slots.html"
  },
  "chatBoostStatus": {
    "type": "object",
    "desc": "Describes current boost status of a chat.",
    "fields": [
      {
        "desc": "An HTTP URL, which can be used to boost the chat.",
        "name": "boost_url",
        "type": "string"
      },
      {
        "desc": "Identifiers of boost slots of the current user applied to the chat.",
        "name": "applied_slot_ids",
        "type": "number"
      },
      {
        "desc": "Current boost level of the chat.",
        "name": "level",
        "type": "number"
      },
      {
        "desc": "The number of boosts received by the chat from created Telegram Premium gift codes and giveaways; always 0 if the current user isn't an administrator in the chat.",
        "name": "gift_code_boost_count",
        "type": "number"
      },
      {
        "desc": "The number of boosts received by the chat.",
        "name": "boost_count",
        "type": "number"
      },
      {
        "desc": "The number of boosts added to reach the current level.",
        "name": "current_level_boost_count",
        "type": "number"
      },
      {
        "desc": "The number of boosts needed to reach the next level; 0 if the next level isn't available.",
        "name": "next_level_boost_count",
        "type": "number"
      },
      {
        "desc": "Approximate number of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat.",
        "name": "premium_member_count",
        "type": "number"
      },
      {
        "desc": "A percentage of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat.",
        "name": "premium_member_percentage",
        "type": "double"
      },
      {
        "desc": "The list of prepaid giveaways available for the chat; only for chat administrators.",
        "name": "prepaid_giveaways",
        "type": "prepaidPremiumGiveaway"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_boost_status.html"
  },
  "chatEvent": {
    "type": "object",
    "desc": "Represents a chat event.",
    "fields": [
      {
        "desc": "Chat event identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the event happened.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Identifier of the user or chat who performed the action.",
        "name": "member_id",
        "type": "MessageSender"
      },
      {
        "desc": "The action.",
        "name": "action",
        "type": "ChatEventAction"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event.html"
  },
  "chatEventLogFilters": {
    "type": "object",
    "desc": "Represents a set of filters used to obtain a chat event log.",
    "fields": [
      {
        "desc": "True, if message edits need to be returned.",
        "name": "message_edits",
        "type": "bool"
      },
      {
        "desc": "True, if message deletions need to be returned.",
        "name": "message_deletions",
        "type": "bool"
      },
      {
        "desc": "True, if pin/unpin events need to be returned.",
        "name": "message_pins",
        "type": "bool"
      },
      {
        "desc": "True, if members joining events need to be returned.",
        "name": "member_joins",
        "type": "bool"
      },
      {
        "desc": "True, if members leaving events need to be returned.",
        "name": "member_leaves",
        "type": "bool"
      },
      {
        "desc": "True, if invited member events need to be returned.",
        "name": "member_invites",
        "type": "bool"
      },
      {
        "desc": "True, if member promotion/demotion events need to be returned.",
        "name": "member_promotions",
        "type": "bool"
      },
      {
        "desc": "True, if member restricted/unrestricted/banned/unbanned events need to be returned.",
        "name": "member_restrictions",
        "type": "bool"
      },
      {
        "desc": "True, if changes in chat information need to be returned.",
        "name": "info_changes",
        "type": "bool"
      },
      {
        "desc": "True, if changes in chat settings need to be returned.",
        "name": "setting_changes",
        "type": "bool"
      },
      {
        "desc": "True, if changes to invite links need to be returned.",
        "name": "invite_link_changes",
        "type": "bool"
      },
      {
        "desc": "True, if video chat actions need to be returned.",
        "name": "video_chat_changes",
        "type": "bool"
      },
      {
        "desc": "True, if forum-related actions need to be returned.",
        "name": "forum_changes",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_event_log_filters.html"
  },
  "chatEvents": {
    "type": "object",
    "desc": "Contains a list of chat events.",
    "fields": [
      {
        "desc": "List of events.",
        "name": "events",
        "type": "chatEvent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_events.html"
  },
  "chatFolder": {
    "type": "object",
    "desc": "Represents a folder for user chats.",
    "fields": [
      {
        "desc": "The title of the folder; 1-12 characters without line feeds.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "The chosen icon for the chat folder; may be null. If null, use getChatFolderDefaultIconName to get default icon name for the folder.",
        "name": "icon",
        "type": "chatFolderIcon"
      },
      {
        "desc": "True, if at least one link has been created for the folder.",
        "name": "is_shareable",
        "type": "bool"
      },
      {
        "desc": "The chat identifiers of pinned chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium.",
        "name": "pinned_chat_ids",
        "type": "string"
      },
      {
        "desc": "The chat identifiers of always included chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium.",
        "name": "included_chat_ids",
        "type": "string"
      },
      {
        "desc": "The chat identifiers of always excluded chats in the folder. There can be up to getOption(\"chat_folder_chosen_chat_count_max\") always excluded non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium.",
        "name": "excluded_chat_ids",
        "type": "string"
      },
      {
        "desc": "True, if muted chats need to be excluded.",
        "name": "exclude_muted",
        "type": "bool"
      },
      {
        "desc": "True, if read chats need to be excluded.",
        "name": "exclude_read",
        "type": "bool"
      },
      {
        "desc": "True, if archived chats need to be excluded.",
        "name": "exclude_archived",
        "type": "bool"
      },
      {
        "desc": "True, if contacts need to be included.",
        "name": "include_contacts",
        "type": "bool"
      },
      {
        "desc": "True, if non-contact users need to be included.",
        "name": "include_non_contacts",
        "type": "bool"
      },
      {
        "desc": "True, if bots need to be included.",
        "name": "include_bots",
        "type": "bool"
      },
      {
        "desc": "True, if basic groups and supergroups need to be included.",
        "name": "include_groups",
        "type": "bool"
      },
      {
        "desc": "True, if channels need to be included.",
        "name": "include_channels",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder.html"
  },
  "chatFolderIcon": {
    "type": "object",
    "desc": "Represents an icon for a chat folder.",
    "fields": [
      {
        "desc": "The chosen icon name for short folder representation; one of \"All\", \"Unread\", \"Unmuted\", \"Bots\", \"Channels\", \"Groups\", \"Private\", \"Custom\", \"Setup\", \"Cat\", \"Crown\", \"Favorite\", \"Flower\", \"Game\", \"Home\", \"Love\", \"Mask\", \"Party\", \"Sport\", \"Study\", \"Trade\", \"Travel\", \"Work\", \"Airplane\", \"Book\", \"Light\", \"Like\", \"Money\", \"Note\", \"Palette\".",
        "name": "name",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder_icon.html"
  },
  "chatFolderInfo": {
    "type": "object",
    "desc": "Contains basic information about a chat folder.",
    "fields": [
      {
        "desc": "Unique chat folder identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "The title of the folder; 1-12 characters without line feeds.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "The chosen or default icon for the chat folder.",
        "name": "icon",
        "type": "chatFolderIcon"
      },
      {
        "desc": "True, if at least one link has been created for the folder.",
        "name": "is_shareable",
        "type": "bool"
      },
      {
        "desc": "True, if the chat folder has invite links created by the current user.",
        "name": "has_my_invite_links",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder_info.html"
  },
  "chatFolderInviteLink": {
    "type": "object",
    "desc": "Contains a chat folder invite link.",
    "fields": [
      {
        "desc": "The chat folder invite link.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "Name of the link.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Identifiers of chats, included in the link.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder_invite_link.html"
  },
  "chatFolderInviteLinkInfo": {
    "type": "object",
    "desc": "Contains information about an invite link to a chat folder.",
    "fields": [
      {
        "desc": "Basic information about the chat folder; chat folder identifier will be 0 if the user didn't have the chat folder yet.",
        "name": "chat_folder_info",
        "type": "chatFolderInfo"
      },
      {
        "desc": "Identifiers of the chats from the link, which aren't added to the folder yet.",
        "name": "missing_chat_ids",
        "type": "string"
      },
      {
        "desc": "Identifiers of the chats from the link, which are added to the folder already.",
        "name": "added_chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder_invite_link_info.html"
  },
  "chatFolderInviteLinks": {
    "type": "object",
    "desc": "Represents a list of chat folder invite links.",
    "fields": [
      {
        "desc": "List of the invite links.",
        "name": "invite_links",
        "type": "chatFolderInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_folder_invite_links.html"
  },
  "chatInviteLink": {
    "type": "object",
    "desc": "Contains a chat invite link.",
    "fields": [
      {
        "desc": "Chat invite link.",
        "name": "invite_link",
        "type": "string"
      },
      {
        "desc": "Name of the link.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "User identifier of an administrator created the link.",
        "name": "creator_user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the link was created.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown.",
        "name": "edit_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the link will expire; 0 if never.",
        "name": "expiration_date",
        "type": "number"
      },
      {
        "desc": "The maximum number of members, which can join the chat using the link simultaneously; 0 if not limited. Always 0 if the link requires approval.",
        "name": "member_limit",
        "type": "number"
      },
      {
        "desc": "Number of chat members, which joined the chat using the link.",
        "name": "member_count",
        "type": "number"
      },
      {
        "desc": "Number of pending join requests created using this link.",
        "name": "pending_join_request_count",
        "type": "number"
      },
      {
        "desc": "True, if the link only creates join request. If true, total number of joining members will be unlimited.",
        "name": "creates_join_request",
        "type": "bool"
      },
      {
        "desc": "True, if the link is primary. Primary invite link can't have name, expiration date, or usage limit. There is exactly one primary invite link for each administrator with can_invite_users right at a given time.",
        "name": "is_primary",
        "type": "bool"
      },
      {
        "desc": "True, if the link was revoked.",
        "name": "is_revoked",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link.html"
  },
  "chatInviteLinkCount": {
    "type": "object",
    "desc": "Describes a chat administrator with a number of active and revoked chat invite links.",
    "fields": [
      {
        "desc": "Administrator's user identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Number of active invite links.",
        "name": "invite_link_count",
        "type": "number"
      },
      {
        "desc": "Number of revoked invite links.",
        "name": "revoked_invite_link_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_count.html"
  },
  "chatInviteLinkCounts": {
    "type": "object",
    "desc": "Contains a list of chat invite link counts.",
    "fields": [
      {
        "desc": "List of invite link counts.",
        "name": "invite_link_counts",
        "type": "chatInviteLinkCount"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_counts.html"
  },
  "chatInviteLinkInfo": {
    "type": "object",
    "desc": "Contains information about a chat invite link.",
    "fields": [
      {
        "desc": "Chat identifier of the invite link; 0 if the user has no access to the chat before joining.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If non-zero, the amount of time for which read access to the chat will remain available, in seconds.",
        "name": "accessible_for",
        "type": "number"
      },
      {
        "desc": "Type of the chat.",
        "name": "type",
        "type": "InviteLinkChatType"
      },
      {
        "desc": "Title of the chat.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Chat photo; may be null.",
        "name": "photo",
        "type": "chatPhotoInfo"
      },
      {
        "desc": "Identifier of the accent color for chat title and background of chat photo.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Chat description.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Number of members in the chat.",
        "name": "member_count",
        "type": "number"
      },
      {
        "desc": "User identifiers of some chat members that may be known to the current user.",
        "name": "member_user_ids",
        "type": "string"
      },
      {
        "desc": "True, if the link only creates join request.",
        "name": "creates_join_request",
        "type": "bool"
      },
      {
        "desc": "True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup.",
        "name": "is_public",
        "type": "bool"
      },
      {
        "desc": "True, if the chat is verified.",
        "name": "is_verified",
        "type": "bool"
      },
      {
        "desc": "True, if many users reported this chat as a scam.",
        "name": "is_scam",
        "type": "bool"
      },
      {
        "desc": "True, if many users reported this chat as a fake account.",
        "name": "is_fake",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_info.html"
  },
  "chatInviteLinkMember": {
    "type": "object",
    "desc": "Describes a chat member joined a chat via an invite link.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user joined the chat.",
        "name": "joined_chat_date",
        "type": "number"
      },
      {
        "desc": "True, if the user has joined the chat using an invite link for a chat folder.",
        "name": "via_chat_folder_invite_link",
        "type": "bool"
      },
      {
        "desc": "User identifier of the chat administrator, approved user join request.",
        "name": "approver_user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_member.html"
  },
  "chatInviteLinkMembers": {
    "type": "object",
    "desc": "Contains a list of chat members joined a chat via an invite link.",
    "fields": [
      {
        "desc": "Approximate total number of chat members found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of chat members, joined a chat via an invite link.",
        "name": "members",
        "type": "chatInviteLinkMember"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_link_members.html"
  },
  "chatInviteLinks": {
    "type": "object",
    "desc": "Contains a list of chat invite links.",
    "fields": [
      {
        "desc": "Approximate total number of chat invite links found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of invite links.",
        "name": "invite_links",
        "type": "chatInviteLink"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_invite_links.html"
  },
  "chatJoinRequest": {
    "type": "object",
    "desc": "Describes a user that sent a join request and waits for administrator approval.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user sent the join request.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "A short bio of the user.",
        "name": "bio",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_join_request.html"
  },
  "chatJoinRequests": {
    "type": "object",
    "desc": "Contains a list of requests to join a chat.",
    "fields": [
      {
        "desc": "Approximate total number of requests found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of the requests.",
        "name": "requests",
        "type": "chatJoinRequest"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_join_requests.html"
  },
  "chatJoinRequestsInfo": {
    "type": "object",
    "desc": "Contains information about pending join requests for a chat.",
    "fields": [
      {
        "desc": "Total number of pending join requests.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "Identifiers of at most 3 users sent the newest pending join requests.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_join_requests_info.html"
  },
  "chatLists": {
    "type": "object",
    "desc": "Contains a list of chat lists.",
    "fields": [
      {
        "desc": "List of chat lists.",
        "name": "chat_lists",
        "type": "ChatList"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_lists.html"
  },
  "chatLocation": {
    "type": "object",
    "desc": "Represents a location to which a chat is connected.",
    "fields": [
      {
        "desc": "The location.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Location address; 1-64 characters, as defined by the chat owner.",
        "name": "address",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_location.html"
  },
  "chatMember": {
    "type": "object",
    "desc": "Describes a user or a chat as a member of another chat.",
    "fields": [
      {
        "desc": "Identifier of the chat member. Currently, other chats can be only Left or Banned. Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups or channels.",
        "name": "member_id",
        "type": "MessageSender"
      },
      {
        "desc": "Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown.",
        "name": "inviter_user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user joined/was promoted/was banned in the chat.",
        "name": "joined_chat_date",
        "type": "number"
      },
      {
        "desc": "Status of the member in the chat.",
        "name": "status",
        "type": "ChatMemberStatus"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_member.html"
  },
  "chatMembers": {
    "type": "object",
    "desc": "Contains a list of chat members.",
    "fields": [
      {
        "desc": "Approximate total number of chat members found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "A list of chat members.",
        "name": "members",
        "type": "chatMember"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_members.html"
  },
  "chatMessageSender": {
    "type": "object",
    "desc": "Represents a message sender, which can be used to send messages in a chat.",
    "fields": [
      {
        "desc": "The message sender.",
        "name": "sender",
        "type": "MessageSender"
      },
      {
        "desc": "True, if Telegram Premium is needed to use the message sender.",
        "name": "needs_premium",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_message_sender.html"
  },
  "chatMessageSenders": {
    "type": "object",
    "desc": "Represents a list of message senders, which can be used to send messages in a chat.",
    "fields": [
      {
        "desc": "List of available message senders.",
        "name": "senders",
        "type": "chatMessageSender"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_message_senders.html"
  },
  "chatNearby": {
    "type": "object",
    "desc": "Describes a chat located nearby.",
    "fields": [
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Distance to the chat location, in meters.",
        "name": "distance",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_nearby.html"
  },
  "chatNotificationSettings": {
    "type": "object",
    "desc": "Contains information about notification settings for a chat or a forum topic.",
    "fields": [
      {
        "desc": "If true, the value for the relevant type of chat or the forum chat is used instead of mute_for.",
        "name": "use_default_mute_for",
        "type": "bool"
      },
      {
        "desc": "Time left before notifications will be unmuted, in seconds.",
        "name": "mute_for",
        "type": "number"
      },
      {
        "desc": "If true, the value for the relevant type of chat or the forum chat is used instead of sound_id.",
        "name": "use_default_sound",
        "type": "bool"
      },
      {
        "desc": "Identifier of the notification sound to be played for messages; 0 if sound is disabled.",
        "name": "sound_id",
        "type": "string"
      },
      {
        "desc": "If true, the value for the relevant type of chat or the forum chat is used instead of show_preview.",
        "name": "use_default_show_preview",
        "type": "bool"
      },
      {
        "desc": "True, if message content must be displayed in notifications.",
        "name": "show_preview",
        "type": "bool"
      },
      {
        "desc": "If true, the value for the relevant type of chat is used instead of mute_stories.",
        "name": "use_default_mute_stories",
        "type": "bool"
      },
      {
        "desc": "True, if story notifications are disabled for the chat.",
        "name": "mute_stories",
        "type": "bool"
      },
      {
        "desc": "If true, the value for the relevant type of chat is used instead of story_sound_id.",
        "name": "use_default_story_sound",
        "type": "bool"
      },
      {
        "desc": "Identifier of the notification sound to be played for stories; 0 if sound is disabled.",
        "name": "story_sound_id",
        "type": "string"
      },
      {
        "desc": "If true, the value for the relevant type of chat is used instead of show_story_sender.",
        "name": "use_default_show_story_sender",
        "type": "bool"
      },
      {
        "desc": "True, if the sender of stories must be displayed in notifications.",
        "name": "show_story_sender",
        "type": "bool"
      },
      {
        "desc": "If true, the value for the relevant type of chat or the forum chat is used instead of disable_pinned_message_notifications.",
        "name": "use_default_disable_pinned_message_notifications",
        "type": "bool"
      },
      {
        "desc": "If true, notifications for incoming pinned messages will be created as for an ordinary unread message.",
        "name": "disable_pinned_message_notifications",
        "type": "bool"
      },
      {
        "desc": "If true, the value for the relevant type of chat or the forum chat is used instead of disable_mention_notifications.",
        "name": "use_default_disable_mention_notifications",
        "type": "bool"
      },
      {
        "desc": "If true, notifications for messages with mentions will be created as for an ordinary unread message.",
        "name": "disable_mention_notifications",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_notification_settings.html"
  },
  "chatPermissions": {
    "type": "object",
    "desc": "Describes actions that a user is allowed to take in a chat.",
    "fields": [
      {
        "desc": "True, if the user can send text messages, contacts, giveaways, invoices, locations, and venues.",
        "name": "can_send_basic_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send music files.",
        "name": "can_send_audios",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send documents.",
        "name": "can_send_documents",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send photos.",
        "name": "can_send_photos",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send videos.",
        "name": "can_send_videos",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send video notes.",
        "name": "can_send_video_notes",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send voice notes.",
        "name": "can_send_voice_notes",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send polls.",
        "name": "can_send_polls",
        "type": "bool"
      },
      {
        "desc": "True, if the user can send animations, games, stickers, and dice and use inline bots.",
        "name": "can_send_other_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the user may add a web page preview to their messages.",
        "name": "can_add_web_page_previews",
        "type": "bool"
      },
      {
        "desc": "True, if the user can change the chat title, photo, and other settings.",
        "name": "can_change_info",
        "type": "bool"
      },
      {
        "desc": "True, if the user can invite new users to the chat.",
        "name": "can_invite_users",
        "type": "bool"
      },
      {
        "desc": "True, if the user can pin messages.",
        "name": "can_pin_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the user can manage topics.",
        "name": "can_manage_topics",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_permissions.html"
  },
  "chatPhoto": {
    "type": "object",
    "desc": "Describes a chat or user profile photo.",
    "fields": [
      {
        "desc": "Unique photo identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the photo has been added.",
        "name": "added_date",
        "type": "number"
      },
      {
        "desc": "Photo minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Available variants of the photo in JPEG format, in different size.",
        "name": "sizes",
        "type": "photoSize"
      },
      {
        "desc": "A big (up to 1280x1280) animated variant of the photo in MPEG4 format; may be null.",
        "name": "animation",
        "type": "animatedChatPhoto"
      },
      {
        "desc": "A small (160x160) animated variant of the photo in MPEG4 format; may be null even the big animation is available.",
        "name": "small_animation",
        "type": "animatedChatPhoto"
      },
      {
        "desc": "Sticker-based version of the chat photo; may be null.",
        "name": "sticker",
        "type": "chatPhotoSticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo.html"
  },
  "chatPhotoInfo": {
    "type": "object",
    "desc": "Contains basic information about the photo of a chat.",
    "fields": [
      {
        "desc": "A small (160x160) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed.",
        "name": "small",
        "type": "file"
      },
      {
        "desc": "A big (640x640) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed.",
        "name": "big",
        "type": "file"
      },
      {
        "desc": "Chat photo minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "True, if the photo has animated variant.",
        "name": "has_animation",
        "type": "bool"
      },
      {
        "desc": "True, if the photo is visible only for the current user.",
        "name": "is_personal",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo_info.html"
  },
  "chatPhotoSticker": {
    "type": "object",
    "desc": "Information about the sticker, which was used to create the chat photo. The sticker is shown at the center of the photo and occupies at most 67% of it.",
    "fields": [
      {
        "desc": "Type of the sticker.",
        "name": "type",
        "type": "ChatPhotoStickerType"
      },
      {
        "desc": "The fill to be used as background for the sticker; rotation angle in backgroundFillGradient isn't supported.",
        "name": "background_fill",
        "type": "BackgroundFill"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photo_sticker.html"
  },
  "chatPhotos": {
    "type": "object",
    "desc": "Contains a list of chat or user profile photos.",
    "fields": [
      {
        "desc": "Total number of photos.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of photos.",
        "name": "photos",
        "type": "chatPhoto"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_photos.html"
  },
  "chatPosition": {
    "type": "object",
    "desc": "Describes a position of a chat in a chat list.",
    "fields": [
      {
        "desc": "The chat list.",
        "name": "list",
        "type": "ChatList"
      },
      {
        "desc": "A parameter used to determine order of the chat in the chat list. Chats must be sorted by the pair (order, chat.id) in descending order.",
        "name": "order",
        "type": "string"
      },
      {
        "desc": "True, if the chat is pinned in the chat list.",
        "name": "is_pinned",
        "type": "bool"
      },
      {
        "desc": "Source of the chat in the chat list; may be null.",
        "name": "source",
        "type": "ChatSource"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_position.html"
  },
  "chatStatisticsAdministratorActionsInfo": {
    "type": "object",
    "desc": "Contains statistics about administrator actions done by a user.",
    "fields": [
      {
        "desc": "Administrator user identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Number of messages deleted by the administrator.",
        "name": "deleted_message_count",
        "type": "number"
      },
      {
        "desc": "Number of users banned by the administrator.",
        "name": "banned_user_count",
        "type": "number"
      },
      {
        "desc": "Number of users restricted by the administrator.",
        "name": "restricted_user_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_administrator_actions_info.html"
  },
  "chatStatisticsInteractionInfo": {
    "type": "object",
    "desc": "Contains statistics about interactions with a message sent in the chat or a story sent by the chat.",
    "fields": [
      {
        "desc": "Type of the object.",
        "name": "object_type",
        "type": "ChatStatisticsObjectType"
      },
      {
        "desc": "Number of times the object was viewed.",
        "name": "view_count",
        "type": "number"
      },
      {
        "desc": "Number of times the object was forwarded.",
        "name": "forward_count",
        "type": "number"
      },
      {
        "desc": "Number of times reactions were added to the object.",
        "name": "reaction_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_interaction_info.html"
  },
  "chatStatisticsInviterInfo": {
    "type": "object",
    "desc": "Contains statistics about number of new members invited by a user.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Number of new members invited by the user.",
        "name": "added_member_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_inviter_info.html"
  },
  "chatStatisticsMessageSenderInfo": {
    "type": "object",
    "desc": "Contains statistics about messages sent by a user.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Number of sent messages.",
        "name": "sent_message_count",
        "type": "number"
      },
      {
        "desc": "Average number of characters in sent messages; 0 if unknown.",
        "name": "average_character_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_statistics_message_sender_info.html"
  },
  "chatTheme": {
    "type": "object",
    "desc": "Describes a chat theme.",
    "fields": [
      {
        "desc": "Theme name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Theme settings for a light chat theme.",
        "name": "light_settings",
        "type": "themeSettings"
      },
      {
        "desc": "Theme settings for a dark chat theme.",
        "name": "dark_settings",
        "type": "themeSettings"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chat_theme.html"
  },
  "chats": {
    "type": "object",
    "desc": "Represents a list of chats.",
    "fields": [
      {
        "desc": "Approximate total number of chats found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of chat identifiers.",
        "name": "chat_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chats.html"
  },
  "chatsNearby": {
    "type": "object",
    "desc": "Represents a list of chats located nearby.",
    "fields": [
      {
        "desc": "List of users nearby.",
        "name": "users_nearby",
        "type": "chatNearby"
      },
      {
        "desc": "List of location-based supergroups nearby.",
        "name": "supergroups_nearby",
        "type": "chatNearby"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1chats_nearby.html"
  },
  "closedVectorPath": {
    "type": "object",
    "desc": "Represents a closed vector path. The path begins at the end point of the last command.",
    "fields": [
      {
        "desc": "List of vector path commands.",
        "name": "commands",
        "type": "VectorPathCommand"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1closed_vector_path.html"
  },
  "connectedWebsite": {
    "type": "object",
    "desc": "Contains information about one website the current user is logged in with Telegram.",
    "fields": [
      {
        "desc": "Website identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "The domain name of the website.",
        "name": "domain_name",
        "type": "string"
      },
      {
        "desc": "User identifier of a bot linked with the website.",
        "name": "bot_user_id",
        "type": "string"
      },
      {
        "desc": "The version of a browser used to log in.",
        "name": "browser",
        "type": "string"
      },
      {
        "desc": "Operating system the browser is running on.",
        "name": "platform",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user was logged in.",
        "name": "log_in_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when obtained authorization was last used.",
        "name": "last_active_date",
        "type": "number"
      },
      {
        "desc": "IP address from which the user was logged in, in human-readable format.",
        "name": "ip_address",
        "type": "string"
      },
      {
        "desc": "Human-readable description of a country and a region from which the user was logged in, based on the IP address.",
        "name": "location",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connected_website.html"
  },
  "connectedWebsites": {
    "type": "object",
    "desc": "Contains a list of websites the current user is logged in with Telegram.",
    "fields": [
      {
        "desc": "List of connected websites.",
        "name": "websites",
        "type": "connectedWebsite"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1connected_websites.html"
  },
  "contact": {
    "type": "object",
    "desc": "Describes a user contact.",
    "fields": [
      {
        "desc": "Phone number of the user.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "First name of the user; 1-255 characters in length.",
        "name": "first_name",
        "type": "string"
      },
      {
        "desc": "Last name of the user.",
        "name": "last_name",
        "type": "string"
      },
      {
        "desc": "Additional data about the user in a form of vCard; 0-2048 bytes in length.",
        "name": "vcard",
        "type": "string"
      },
      {
        "desc": "Identifier of the user, if known; 0 otherwise.",
        "name": "user_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1contact.html"
  },
  "count": {
    "type": "object",
    "desc": "Contains a counter.",
    "fields": [
      {
        "desc": "Count.",
        "name": "count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1count.html"
  },
  "countries": {
    "type": "object",
    "desc": "Contains information about countries.",
    "fields": [
      {
        "desc": "The list of countries.",
        "name": "countries",
        "type": "countryInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1countries.html"
  },
  "countryInfo": {
    "type": "object",
    "desc": "Contains information about a country.",
    "fields": [
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code.",
        "name": "country_code",
        "type": "string"
      },
      {
        "desc": "Native name of the country.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "English name of the country.",
        "name": "english_name",
        "type": "string"
      },
      {
        "desc": "True, if the country must be hidden from the list of all countries.",
        "name": "is_hidden",
        "type": "bool"
      },
      {
        "desc": "List of country calling codes.",
        "name": "calling_codes",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1country_info.html"
  },
  "customRequestResult": {
    "type": "object",
    "desc": "Contains the result of a custom request.",
    "fields": [
      {
        "desc": "A JSON-serialized result.",
        "name": "result",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1custom_request_result.html"
  },
  "databaseStatistics": {
    "type": "object",
    "desc": "Contains database statistics.",
    "fields": [
      {
        "desc": "Database statistics in an unspecified human-readable format.",
        "name": "statistics",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1database_statistics.html"
  },
  "date": {
    "type": "object",
    "desc": "Represents a date according to the Gregorian calendar.",
    "fields": [
      {
        "desc": "Day of the month; 1-31.",
        "name": "day",
        "type": "number"
      },
      {
        "desc": "Month; 1-12.",
        "name": "month",
        "type": "number"
      },
      {
        "desc": "Year; 1-9999.",
        "name": "year",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1date.html"
  },
  "dateRange": {
    "type": "object",
    "desc": "Represents a date range.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) at which the date range begins.",
        "name": "start_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) at which the date range ends.",
        "name": "end_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1date_range.html"
  },
  "datedFile": {
    "type": "object",
    "desc": "File with the date it was uploaded.",
    "fields": [
      {
        "desc": "The file.",
        "name": "file",
        "type": "file"
      },
      {
        "desc": "Point in time (Unix timestamp) when the file was uploaded.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1dated_file.html"
  },
  "deepLinkInfo": {
    "type": "object",
    "desc": "Contains information about a tg: deep link.",
    "fields": [
      {
        "desc": "Text to be shown to the user.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "True, if the user must be asked to update the application.",
        "name": "need_update_application",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1deep_link_info.html"
  },
  "document": {
    "type": "object",
    "desc": "Describes a document of any type.",
    "fields": [
      {
        "desc": "Original name of the file; as defined by the sender.",
        "name": "file_name",
        "type": "string"
      },
      {
        "desc": "MIME type of the file; as defined by the sender.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "Document minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "File containing the document.",
        "name": "document",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1document.html"
  },
  "downloadedFileCounts": {
    "type": "object",
    "desc": "Contains number of being downloaded and recently downloaded files found.",
    "fields": [
      {
        "desc": "Number of active file downloads found, including paused.",
        "name": "active_count",
        "type": "number"
      },
      {
        "desc": "Number of paused file downloads found.",
        "name": "paused_count",
        "type": "number"
      },
      {
        "desc": "Number of completed file downloads found.",
        "name": "completed_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1downloaded_file_counts.html"
  },
  "draftMessage": {
    "type": "object",
    "desc": "Contains information about a message draft.",
    "fields": [
      {
        "desc": "Information about the message to be replied; must be of the type inputMessageReplyToMessage; may be null if none.",
        "name": "reply_to",
        "type": "InputMessageReplyTo"
      },
      {
        "desc": "Point in time (Unix timestamp) when the draft was created.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Content of the message draft; must be of the type inputMessageText.",
        "name": "input_message_text",
        "type": "InputMessageContent"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1draft_message.html"
  },
  "emailAddressAuthenticationCodeInfo": {
    "type": "object",
    "desc": "Information about the email address authentication code that was sent.",
    "fields": [
      {
        "desc": "Pattern of the email address to which an authentication code was sent.",
        "name": "email_address_pattern",
        "type": "string"
      },
      {
        "desc": "Length of the code; 0 if unknown.",
        "name": "length",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1email_address_authentication_code_info.html"
  },
  "emojiCategories": {
    "type": "object",
    "desc": "Represents a list of emoji categories.",
    "fields": [
      {
        "desc": "List of categories.",
        "name": "categories",
        "type": "emojiCategory"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_categories.html"
  },
  "emojiCategory": {
    "type": "object",
    "desc": "Contains a list of similar emoji to search for in getStickers and searchStickers.",
    "fields": [
      {
        "desc": "Name of the category.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Custom emoji sticker, which represents icon of the category.",
        "name": "icon",
        "type": "sticker"
      },
      {
        "desc": "List of emojis in the category.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_category.html"
  },
  "emojiReaction": {
    "type": "object",
    "desc": "Contains information about a emoji reaction.",
    "fields": [
      {
        "desc": "Text representation of the reaction.",
        "name": "emoji",
        "type": "string"
      },
      {
        "desc": "Reaction title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "True, if the reaction can be added to new messages and enabled in chats.",
        "name": "is_active",
        "type": "bool"
      },
      {
        "desc": "Static icon for the reaction.",
        "name": "static_icon",
        "type": "sticker"
      },
      {
        "desc": "Appear animation for the reaction.",
        "name": "appear_animation",
        "type": "sticker"
      },
      {
        "desc": "Select animation for the reaction.",
        "name": "select_animation",
        "type": "sticker"
      },
      {
        "desc": "Activate animation for the reaction.",
        "name": "activate_animation",
        "type": "sticker"
      },
      {
        "desc": "Effect animation for the reaction.",
        "name": "effect_animation",
        "type": "sticker"
      },
      {
        "desc": "Around animation for the reaction; may be null.",
        "name": "around_animation",
        "type": "sticker"
      },
      {
        "desc": "Center animation for the reaction; may be null.",
        "name": "center_animation",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_reaction.html"
  },
  "emojiStatus": {
    "type": "object",
    "desc": "Describes a custom emoji to be shown instead of the Telegram Premium badge.",
    "fields": [
      {
        "desc": "Identifier of the custom emoji in stickerFormatTgs format.",
        "name": "custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the status will expire; 0 if never.",
        "name": "expiration_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_status.html"
  },
  "emojiStatuses": {
    "type": "object",
    "desc": "Contains a list of custom emoji identifiers, which can be set as emoji statuses.",
    "fields": [
      {
        "desc": "The list of custom emoji identifiers.",
        "name": "custom_emoji_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emoji_statuses.html"
  },
  "emojis": {
    "type": "object",
    "desc": "Represents a list of emoji.",
    "fields": [
      {
        "desc": "List of emojis.",
        "name": "emojis",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1emojis.html"
  },
  "encryptedCredentials": {
    "type": "object",
    "desc": "Contains encrypted Telegram Passport data credentials.",
    "fields": [
      {
        "desc": "The encrypted credentials.",
        "name": "data",
        "type": "bytes"
      },
      {
        "desc": "The decrypted data hash.",
        "name": "hash",
        "type": "bytes"
      },
      {
        "desc": "Secret for data decryption, encrypted with the service's public key.",
        "name": "secret",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1encrypted_credentials.html"
  },
  "encryptedPassportElement": {
    "type": "object",
    "desc": "Contains information about an encrypted Telegram Passport element; for bots only.",
    "fields": [
      {
        "desc": "Type of Telegram Passport element.",
        "name": "type",
        "type": "PassportElementType"
      },
      {
        "desc": "Encrypted JSON-encoded data about the user.",
        "name": "data",
        "type": "bytes"
      },
      {
        "desc": "The front side of an identity document.",
        "name": "front_side",
        "type": "datedFile"
      },
      {
        "desc": "The reverse side of an identity document; may be null.",
        "name": "reverse_side",
        "type": "datedFile"
      },
      {
        "desc": "Selfie with the document; may be null.",
        "name": "selfie",
        "type": "datedFile"
      },
      {
        "desc": "List of files containing a certified English translation of the document.",
        "name": "translation",
        "type": "datedFile"
      },
      {
        "desc": "List of attached files.",
        "name": "files",
        "type": "datedFile"
      },
      {
        "desc": "Unencrypted data, phone number or email address.",
        "name": "value",
        "type": "string"
      },
      {
        "desc": "Hash of the entire element.",
        "name": "hash",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1encrypted_passport_element.html"
  },
  "error": {
    "type": "object",
    "desc": "An object of this type can be returned on every function call, in case of an error.",
    "fields": [
      {
        "desc": "Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user.",
        "name": "code",
        "type": "number"
      },
      {
        "desc": "Error message; subject to future changes.",
        "name": "message",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1error.html"
  },
  "file": {
    "type": "object",
    "desc": "Represents a file.",
    "fields": [
      {
        "desc": "Unique file identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "File size, in bytes; 0 if unknown.",
        "name": "size",
        "type": "string"
      },
      {
        "desc": "Approximate file size in bytes in case the exact file size is unknown. Can be used to show download/upload progress.",
        "name": "expected_size",
        "type": "string"
      },
      {
        "desc": "Information about the local copy of the file.",
        "name": "local",
        "type": "localFile"
      },
      {
        "desc": "Information about the remote copy of the file.",
        "name": "remote",
        "type": "remoteFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file.html"
  },
  "fileDownload": {
    "type": "object",
    "desc": "Describes a file added to file download list.",
    "fields": [
      {
        "desc": "File identifier.",
        "name": "file_id",
        "type": "number"
      },
      {
        "desc": "The message with the file.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "Point in time (Unix timestamp) when the file was added to the download list.",
        "name": "add_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed.",
        "name": "complete_date",
        "type": "number"
      },
      {
        "desc": "True, if downloading of the file is paused.",
        "name": "is_paused",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_download.html"
  },
  "fileDownloadedPrefixSize": {
    "type": "object",
    "desc": "Contains size of downloaded prefix of a file.",
    "fields": [
      {
        "desc": "The prefix size, in bytes.",
        "name": "size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_downloaded_prefix_size.html"
  },
  "filePart": {
    "type": "object",
    "desc": "Contains a part of a file.",
    "fields": [
      {
        "desc": "File bytes.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1file_part.html"
  },
  "formattedText": {
    "type": "object",
    "desc": "A text with some entities.",
    "fields": [
      {
        "desc": "The text.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Entities contained in the text. Entities can be nested, but must not mutually intersect with each other. Pre, Code and PreCode entities can't contain other entities. BlockQuote entities can't contain other BlockQuote entities. Bold, Italic, Underline, Strikethrough, and Spoiler entities can contain and can be part of any other entities. All other entities can't contain each other.",
        "name": "entities",
        "type": "textEntity"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1formatted_text.html"
  },
  "forumTopic": {
    "type": "object",
    "desc": "Describes a forum topic.",
    "fields": [
      {
        "desc": "Basic information about the topic.",
        "name": "info",
        "type": "forumTopicInfo"
      },
      {
        "desc": "Last message in the topic; may be null if unknown.",
        "name": "last_message",
        "type": "message"
      },
      {
        "desc": "True, if the topic is pinned in the topic list.",
        "name": "is_pinned",
        "type": "bool"
      },
      {
        "desc": "Number of unread messages in the topic.",
        "name": "unread_count",
        "type": "number"
      },
      {
        "desc": "Identifier of the last read incoming message.",
        "name": "last_read_inbox_message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last read outgoing message.",
        "name": "last_read_outbox_message_id",
        "type": "string"
      },
      {
        "desc": "Number of unread messages with a mention/reply in the topic.",
        "name": "unread_mention_count",
        "type": "number"
      },
      {
        "desc": "Number of messages with unread reactions in the topic.",
        "name": "unread_reaction_count",
        "type": "number"
      },
      {
        "desc": "Notification settings for the topic.",
        "name": "notification_settings",
        "type": "chatNotificationSettings"
      },
      {
        "desc": "A draft of a message in the topic; may be null if none.",
        "name": "draft_message",
        "type": "draftMessage"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forum_topic.html"
  },
  "forumTopicIcon": {
    "type": "object",
    "desc": "Describes a forum topic icon.",
    "fields": [
      {
        "desc": "Color of the topic icon in RGB format.",
        "name": "color",
        "type": "number"
      },
      {
        "desc": "Unique identifier of the custom emoji shown on the topic icon; 0 if none.",
        "name": "custom_emoji_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forum_topic_icon.html"
  },
  "forumTopicInfo": {
    "type": "object",
    "desc": "Contains basic information about a forum topic.",
    "fields": [
      {
        "desc": "Message thread identifier of the topic.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Name of the topic.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Icon of the topic.",
        "name": "icon",
        "type": "forumTopicIcon"
      },
      {
        "desc": "Point in time (Unix timestamp) when the topic was created.",
        "name": "creation_date",
        "type": "number"
      },
      {
        "desc": "Identifier of the creator of the topic.",
        "name": "creator_id",
        "type": "MessageSender"
      },
      {
        "desc": "True, if the topic is the General topic list.",
        "name": "is_general",
        "type": "bool"
      },
      {
        "desc": "True, if the topic was created by the current user.",
        "name": "is_outgoing",
        "type": "bool"
      },
      {
        "desc": "True, if the topic is closed.",
        "name": "is_closed",
        "type": "bool"
      },
      {
        "desc": "True, if the topic is hidden above the topic list and closed; for General topic only.",
        "name": "is_hidden",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forum_topic_info.html"
  },
  "forumTopics": {
    "type": "object",
    "desc": "Describes a list of forum topics.",
    "fields": [
      {
        "desc": "Approximate total number of forum topics found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of forum topics.",
        "name": "topics",
        "type": "forumTopic"
      },
      {
        "desc": "Offset date for the next getForumTopics request.",
        "name": "next_offset_date",
        "type": "number"
      },
      {
        "desc": "Offset message identifier for the next getForumTopics request.",
        "name": "next_offset_message_id",
        "type": "string"
      },
      {
        "desc": "Offset message thread identifier for the next getForumTopics request.",
        "name": "next_offset_message_thread_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1forum_topics.html"
  },
  "foundChatBoosts": {
    "type": "object",
    "desc": "Contains a list of boosts applied to a chat.",
    "fields": [
      {
        "desc": "Total number of boosts applied to the chat.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of boosts.",
        "name": "boosts",
        "type": "chatBoost"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_chat_boosts.html"
  },
  "foundChatMessages": {
    "type": "object",
    "desc": "Contains a list of messages found by a search in a given chat.",
    "fields": [
      {
        "desc": "Approximate total number of messages found; -1 if unknown.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of messages.",
        "name": "messages",
        "type": "message"
      },
      {
        "desc": "The offset for the next request. If 0, there are no more results.",
        "name": "next_from_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_chat_messages.html"
  },
  "foundFileDownloads": {
    "type": "object",
    "desc": "Contains a list of downloaded files, found by a search.",
    "fields": [
      {
        "desc": "Total number of suitable files, ignoring offset.",
        "name": "total_counts",
        "type": "downloadedFileCounts"
      },
      {
        "desc": "The list of files.",
        "name": "files",
        "type": "fileDownload"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_file_downloads.html"
  },
  "foundMessages": {
    "type": "object",
    "desc": "Contains a list of messages found by a search.",
    "fields": [
      {
        "desc": "Approximate total number of messages found; -1 if unknown.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of messages.",
        "name": "messages",
        "type": "message"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_messages.html"
  },
  "foundPosition": {
    "type": "object",
    "desc": "Contains 0-based match position.",
    "fields": [
      {
        "desc": "The position of the match.",
        "name": "position",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_position.html"
  },
  "foundPositions": {
    "type": "object",
    "desc": "Contains 0-based positions of matched objects.",
    "fields": [
      {
        "desc": "Total number of matched objects.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "The positions of the matched objects.",
        "name": "positions",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_positions.html"
  },
  "foundWebApp": {
    "type": "object",
    "desc": "Contains information about a Web App found by its short name.",
    "fields": [
      {
        "desc": "The Web App.",
        "name": "web_app",
        "type": "webApp"
      },
      {
        "desc": "True, if the user must be asked for the permission to the bot to send them messages.",
        "name": "request_write_access",
        "type": "bool"
      },
      {
        "desc": "True, if there is no need to show an ordinary open URL confirmation before opening the Web App. The field must be ignored and confirmation must be shown anyway if the Web App link was hidden.",
        "name": "skip_confirmation",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1found_web_app.html"
  },
  "game": {
    "type": "object",
    "desc": "Describes a game. Use getInternalLink with internalLinkTypeGame to share the game.",
    "fields": [
      {
        "desc": "Unique game identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Game short name.",
        "name": "short_name",
        "type": "string"
      },
      {
        "desc": "Game title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Game text, usually containing scoreboards for a game.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Game description.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Game photo.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Game animation; may be null.",
        "name": "animation",
        "type": "animation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game.html"
  },
  "gameHighScore": {
    "type": "object",
    "desc": "Contains one row of the game high score table.",
    "fields": [
      {
        "desc": "Position in the high score table.",
        "name": "position",
        "type": "number"
      },
      {
        "desc": "User identifier.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "User score.",
        "name": "score",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game_high_score.html"
  },
  "gameHighScores": {
    "type": "object",
    "desc": "Contains a list of game high scores.",
    "fields": [
      {
        "desc": "A list of game high scores.",
        "name": "scores",
        "type": "gameHighScore"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1game_high_scores.html"
  },
  "groupCall": {
    "type": "object",
    "desc": "Describes a group call.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Group call title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the group call is supposed to be started by an administrator; 0 if it is already active or was ended.",
        "name": "scheduled_start_date",
        "type": "number"
      },
      {
        "desc": "True, if the group call is scheduled and the current user will receive a notification when the group call starts.",
        "name": "enabled_start_notification",
        "type": "bool"
      },
      {
        "desc": "True, if the call is active.",
        "name": "is_active",
        "type": "bool"
      },
      {
        "desc": "True, if the chat is an RTMP stream instead of an ordinary video chat.",
        "name": "is_rtmp_stream",
        "type": "bool"
      },
      {
        "desc": "True, if the call is joined.",
        "name": "is_joined",
        "type": "bool"
      },
      {
        "desc": "True, if user was kicked from the call because of network loss and the call needs to be rejoined.",
        "name": "need_rejoin",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can manage the group call.",
        "name": "can_be_managed",
        "type": "bool"
      },
      {
        "desc": "Number of participants in the group call.",
        "name": "participant_count",
        "type": "number"
      },
      {
        "desc": "True, if group call participants, which are muted, aren't returned in participant list.",
        "name": "has_hidden_listeners",
        "type": "bool"
      },
      {
        "desc": "True, if all group call participants are loaded.",
        "name": "loaded_all_participants",
        "type": "bool"
      },
      {
        "desc": "At most 3 recently speaking users in the group call.",
        "name": "recent_speakers",
        "type": "groupCallRecentSpeaker"
      },
      {
        "desc": "True, if the current user's video is enabled.",
        "name": "is_my_video_enabled",
        "type": "bool"
      },
      {
        "desc": "True, if the current user's video is paused.",
        "name": "is_my_video_paused",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can broadcast video or share screen.",
        "name": "can_enable_video",
        "type": "bool"
      },
      {
        "desc": "True, if only group call administrators can unmute new participants.",
        "name": "mute_new_participants",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can enable or disable mute_new_participants setting.",
        "name": "can_toggle_mute_new_participants",
        "type": "bool"
      },
      {
        "desc": "Duration of the ongoing group call recording, in seconds; 0 if none. An updateGroupCall update is not triggered when value of this field changes, but the same recording goes on.",
        "name": "record_duration",
        "type": "number"
      },
      {
        "desc": "True, if a video file is being recorded for the call.",
        "name": "is_video_recorded",
        "type": "bool"
      },
      {
        "desc": "Call duration, in seconds; for ended calls only.",
        "name": "duration",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call.html"
  },
  "groupCallId": {
    "type": "object",
    "desc": "Contains the group call identifier.",
    "fields": [
      {
        "desc": "Group call identifier.",
        "name": "id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_id.html"
  },
  "groupCallParticipant": {
    "type": "object",
    "desc": "Represents a group call participant.",
    "fields": [
      {
        "desc": "Identifier of the group call participant.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "User's audio channel synchronization source identifier.",
        "name": "audio_source_id",
        "type": "number"
      },
      {
        "desc": "User's screen sharing audio channel synchronization source identifier.",
        "name": "screen_sharing_audio_source_id",
        "type": "number"
      },
      {
        "desc": "Information about user's video channel; may be null if there is no active video.",
        "name": "video_info",
        "type": "groupCallParticipantVideoInfo"
      },
      {
        "desc": "Information about user's screen sharing video channel; may be null if there is no active screen sharing video.",
        "name": "screen_sharing_video_info",
        "type": "groupCallParticipantVideoInfo"
      },
      {
        "desc": "The participant user's bio or the participant chat's description.",
        "name": "bio",
        "type": "string"
      },
      {
        "desc": "True, if the participant is the current user.",
        "name": "is_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking.",
        "name": "is_speaking",
        "type": "bool"
      },
      {
        "desc": "True, if the participant hand is raised.",
        "name": "is_hand_raised",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can mute the participant for all other group call participants.",
        "name": "can_be_muted_for_all_users",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can allow the participant to unmute themselves or unmute the participant (if the participant is the current user).",
        "name": "can_be_unmuted_for_all_users",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can mute the participant only for self.",
        "name": "can_be_muted_for_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the current user can unmute the participant for self.",
        "name": "can_be_unmuted_for_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the participant is muted for all users.",
        "name": "is_muted_for_all_users",
        "type": "bool"
      },
      {
        "desc": "True, if the participant is muted for the current user.",
        "name": "is_muted_for_current_user",
        "type": "bool"
      },
      {
        "desc": "True, if the participant is muted for all users, but can unmute themselves.",
        "name": "can_unmute_self",
        "type": "bool"
      },
      {
        "desc": "Participant's volume level; 1-20000 in hundreds of percents.",
        "name": "volume_level",
        "type": "number"
      },
      {
        "desc": "User's order in the group call participant list. Orders must be compared lexicographically. The bigger is order, the higher is user in the list. If order is empty, the user must be removed from the participant list.",
        "name": "order",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_participant.html"
  },
  "groupCallParticipantVideoInfo": {
    "type": "object",
    "desc": "Contains information about a group call participant's video channel.",
    "fields": [
      {
        "desc": "List of synchronization source groups of the video.",
        "name": "source_groups",
        "type": "groupCallVideoSourceGroup"
      },
      {
        "desc": "Video channel endpoint identifier.",
        "name": "endpoint_id",
        "type": "string"
      },
      {
        "desc": "True, if the video is paused. This flag needs to be ignored, if new video frames are received.",
        "name": "is_paused",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_participant_video_info.html"
  },
  "groupCallRecentSpeaker": {
    "type": "object",
    "desc": "Describes a recently speaking participant in a group call.",
    "fields": [
      {
        "desc": "Group call participant identifier.",
        "name": "participant_id",
        "type": "MessageSender"
      },
      {
        "desc": "True, is the user has spoken recently.",
        "name": "is_speaking",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_recent_speaker.html"
  },
  "groupCallStream": {
    "type": "object",
    "desc": "Describes an available stream in a group call.",
    "fields": [
      {
        "desc": "Identifier of an audio/video channel.",
        "name": "channel_id",
        "type": "number"
      },
      {
        "desc": "Scale of segment durations in the stream. The duration is 1000/(2**scale) milliseconds.",
        "name": "scale",
        "type": "number"
      },
      {
        "desc": "Point in time when the stream currently ends; Unix timestamp in milliseconds.",
        "name": "time_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_stream.html"
  },
  "groupCallStreams": {
    "type": "object",
    "desc": "Represents a list of group call streams.",
    "fields": [
      {
        "desc": "A list of group call streams.",
        "name": "streams",
        "type": "groupCallStream"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_streams.html"
  },
  "groupCallVideoSourceGroup": {
    "type": "object",
    "desc": "Describes a group of video synchronization source identifiers.",
    "fields": [
      {
        "desc": "The semantics of sources, one of \"SIM\" or \"FID\".",
        "name": "semantics",
        "type": "string"
      },
      {
        "desc": "The list of synchronization source identifiers.",
        "name": "source_ids",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1group_call_video_source_group.html"
  },
  "hashtags": {
    "type": "object",
    "desc": "Contains a list of hashtags.",
    "fields": [
      {
        "desc": "A list of hashtags.",
        "name": "hashtags",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1hashtags.html"
  },
  "httpUrl": {
    "type": "object",
    "desc": "Contains an HTTP URL.",
    "fields": [
      {
        "desc": "The URL.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1http_url.html"
  },
  "identityDocument": {
    "type": "object",
    "desc": "An identity document.",
    "fields": [
      {
        "desc": "Document number; 1-24 characters.",
        "name": "number",
        "type": "string"
      },
      {
        "desc": "Document expiration date; may be null if not applicable.",
        "name": "expiration_date",
        "type": "date"
      },
      {
        "desc": "Front side of the document.",
        "name": "front_side",
        "type": "datedFile"
      },
      {
        "desc": "Reverse side of the document; only for driver license and identity card; may be null.",
        "name": "reverse_side",
        "type": "datedFile"
      },
      {
        "desc": "Selfie with the document; may be null.",
        "name": "selfie",
        "type": "datedFile"
      },
      {
        "desc": "List of files containing a certified English translation of the document.",
        "name": "translation",
        "type": "datedFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1identity_document.html"
  },
  "importedContacts": {
    "type": "object",
    "desc": "Represents the result of an importContacts request.",
    "fields": [
      {
        "desc": "User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user.",
        "name": "user_ids",
        "type": "string"
      },
      {
        "desc": "The number of users that imported the corresponding contact; 0 for already registered users or if unavailable.",
        "name": "importer_count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1imported_contacts.html"
  },
  "inlineKeyboardButton": {
    "type": "object",
    "desc": "Represents a single button in an inline keyboard.",
    "fields": [
      {
        "desc": "Text of the button.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Type of the button.",
        "name": "type",
        "type": "InlineKeyboardButtonType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_keyboard_button.html"
  },
  "inlineQueryResults": {
    "type": "object",
    "desc": "Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query.",
    "fields": [
      {
        "desc": "Unique identifier of the inline query.",
        "name": "inline_query_id",
        "type": "string"
      },
      {
        "desc": "Button to be shown above inline query results; may be null.",
        "name": "button",
        "type": "inlineQueryResultsButton"
      },
      {
        "desc": "Results of the query.",
        "name": "results",
        "type": "InlineQueryResult"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_results.html"
  },
  "inlineQueryResultsButton": {
    "type": "object",
    "desc": "Represents a button to be shown above inline query results.",
    "fields": [
      {
        "desc": "The text of the button.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Type of the button.",
        "name": "type",
        "type": "InlineQueryResultsButtonType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1inline_query_results_button.html"
  },
  "inputIdentityDocument": {
    "type": "object",
    "desc": "An identity document to be saved to Telegram Passport.",
    "fields": [
      {
        "desc": "Document number; 1-24 characters.",
        "name": "number",
        "type": "string"
      },
      {
        "desc": "Document expiration date; pass null if not applicable.",
        "name": "expiration_date",
        "type": "date"
      },
      {
        "desc": "Front side of the document.",
        "name": "front_side",
        "type": "InputFile"
      },
      {
        "desc": "Reverse side of the document; only for driver license and identity card; pass null otherwise.",
        "name": "reverse_side",
        "type": "InputFile"
      },
      {
        "desc": "Selfie with the document; pass null if unavailable.",
        "name": "selfie",
        "type": "InputFile"
      },
      {
        "desc": "List of files containing a certified English translation of the document.",
        "name": "translation",
        "type": "InputFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_identity_document.html"
  },
  "inputPassportElementError": {
    "type": "object",
    "desc": "Contains the description of an error in a Telegram Passport element; for bots only.",
    "fields": [
      {
        "desc": "Type of Telegram Passport element that has the error.",
        "name": "type",
        "type": "PassportElementType"
      },
      {
        "desc": "Error message.",
        "name": "message",
        "type": "string"
      },
      {
        "desc": "Error source.",
        "name": "source",
        "type": "InputPassportElementErrorSource"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_passport_element_error.html"
  },
  "inputPersonalDocument": {
    "type": "object",
    "desc": "A personal document to be saved to Telegram Passport.",
    "fields": [
      {
        "desc": "List of files containing the pages of the document.",
        "name": "files",
        "type": "InputFile"
      },
      {
        "desc": "List of files containing a certified English translation of the document.",
        "name": "translation",
        "type": "InputFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_personal_document.html"
  },
  "inputSticker": {
    "type": "object",
    "desc": "A sticker to be added to a sticker set.",
    "fields": [
      {
        "desc": "File with the sticker; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements.",
        "name": "sticker",
        "type": "InputFile"
      },
      {
        "desc": "String with 1-20 emoji corresponding to the sticker.",
        "name": "emojis",
        "type": "string"
      },
      {
        "desc": "Position where the mask is placed; pass null if not specified.",
        "name": "mask_position",
        "type": "maskPosition"
      },
      {
        "desc": "List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker.",
        "name": "keywords",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_sticker.html"
  },
  "inputStoryArea": {
    "type": "object",
    "desc": "Describes a clickable rectangle area on a story media to be added.",
    "fields": [
      {
        "desc": "Position of the area.",
        "name": "position",
        "type": "storyAreaPosition"
      },
      {
        "desc": "Type of the area.",
        "name": "type",
        "type": "InputStoryAreaType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_area.html"
  },
  "inputStoryAreas": {
    "type": "object",
    "desc": "Contains a list of story areas to be added.",
    "fields": [
      {
        "desc": "List of 0-10 input story areas.",
        "name": "areas",
        "type": "inputStoryArea"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_story_areas.html"
  },
  "inputTextQuote": {
    "type": "object",
    "desc": "Describes manually chosen quote from another message.",
    "fields": [
      {
        "desc": "Text of the quote; 0-getOption(\"message_reply_quote_length_max\") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed to be kept and must be kept in the quote.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Quote position in the original message in UTF-16 code units.",
        "name": "position",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_text_quote.html"
  },
  "inputThumbnail": {
    "type": "object",
    "desc": "A thumbnail to be sent along with a file; must be in JPEG or WEBP format for stickers, and less than 200 KB in size.",
    "fields": [
      {
        "desc": "Thumbnail file to send. Sending thumbnails by file_id is currently not supported.",
        "name": "thumbnail",
        "type": "InputFile"
      },
      {
        "desc": "Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown.",
        "name": "height",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1input_thumbnail.html"
  },
  "invoice": {
    "type": "object",
    "desc": "Product invoice.",
    "fields": [
      {
        "desc": "ISO 4217 currency code.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "A list of objects used to calculate the total price of the product.",
        "name": "price_parts",
        "type": "labeledPricePart"
      },
      {
        "desc": "The maximum allowed amount of tip in the smallest units of the currency.",
        "name": "max_tip_amount",
        "type": "string"
      },
      {
        "desc": "Suggested amounts of tip in the smallest units of the currency.",
        "name": "suggested_tip_amounts",
        "type": "string"
      },
      {
        "desc": "An HTTP URL with terms of service for recurring payments. If non-empty, the invoice payment will result in recurring payments and the user must accept the terms of service before allowed to pay.",
        "name": "recurring_payment_terms_of_service_url",
        "type": "string"
      },
      {
        "desc": "An HTTP URL with terms of service for non-recurring payments. If non-empty, then the user must accept the terms of service before allowed to pay.",
        "name": "terms_of_service_url",
        "type": "string"
      },
      {
        "desc": "True, if the payment is a test payment.",
        "name": "is_test",
        "type": "bool"
      },
      {
        "desc": "True, if the user's name is needed for payment.",
        "name": "need_name",
        "type": "bool"
      },
      {
        "desc": "True, if the user's phone number is needed for payment.",
        "name": "need_phone_number",
        "type": "bool"
      },
      {
        "desc": "True, if the user's email address is needed for payment.",
        "name": "need_email_address",
        "type": "bool"
      },
      {
        "desc": "True, if the user's shipping address is needed for payment.",
        "name": "need_shipping_address",
        "type": "bool"
      },
      {
        "desc": "True, if the user's phone number will be sent to the provider.",
        "name": "send_phone_number_to_provider",
        "type": "bool"
      },
      {
        "desc": "True, if the user's email address will be sent to the provider.",
        "name": "send_email_address_to_provider",
        "type": "bool"
      },
      {
        "desc": "True, if the total price depends on the shipping method.",
        "name": "is_flexible",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1invoice.html"
  },
  "jsonObjectMember": {
    "type": "object",
    "desc": "Represents one member of a JSON object.",
    "fields": [
      {
        "desc": "Member's key.",
        "name": "key",
        "type": "string"
      },
      {
        "desc": "Member's value.",
        "name": "value",
        "type": "JsonValue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1json_object_member.html"
  },
  "keyboardButton": {
    "type": "object",
    "desc": "Represents a single button in a bot keyboard.",
    "fields": [
      {
        "desc": "Text of the button.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Type of the button.",
        "name": "type",
        "type": "KeyboardButtonType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1keyboard_button.html"
  },
  "labeledPricePart": {
    "type": "object",
    "desc": "Portion of the price of a product (e.g., \"delivery cost\", \"tax amount\").",
    "fields": [
      {
        "desc": "Label for this portion of the product price.",
        "name": "label",
        "type": "string"
      },
      {
        "desc": "Currency amount in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1labeled_price_part.html"
  },
  "languagePackInfo": {
    "type": "object",
    "desc": "Contains information about a language pack.",
    "fields": [
      {
        "desc": "Unique language pack identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it must be fetched from base language pack. Unsupported in custom language packs.",
        "name": "base_language_pack_id",
        "type": "string"
      },
      {
        "desc": "Language name.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Name of the language in that language.",
        "name": "native_name",
        "type": "string"
      },
      {
        "desc": "A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information.",
        "name": "plural_code",
        "type": "string"
      },
      {
        "desc": "True, if the language pack is official.",
        "name": "is_official",
        "type": "bool"
      },
      {
        "desc": "True, if the language pack strings are RTL.",
        "name": "is_rtl",
        "type": "bool"
      },
      {
        "desc": "True, if the language pack is a beta language pack.",
        "name": "is_beta",
        "type": "bool"
      },
      {
        "desc": "True, if the language pack is installed by the current user.",
        "name": "is_installed",
        "type": "bool"
      },
      {
        "desc": "Total number of non-deleted strings from the language pack.",
        "name": "total_string_count",
        "type": "number"
      },
      {
        "desc": "Total number of translated strings from the language pack.",
        "name": "translated_string_count",
        "type": "number"
      },
      {
        "desc": "Total number of non-deleted strings from the language pack available locally.",
        "name": "local_string_count",
        "type": "number"
      },
      {
        "desc": "Link to language translation interface; empty for custom local language packs.",
        "name": "translation_url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_info.html"
  },
  "languagePackString": {
    "type": "object",
    "desc": "Represents one language pack string.",
    "fields": [
      {
        "desc": "String key.",
        "name": "key",
        "type": "string"
      },
      {
        "desc": "String value; pass null if the string needs to be taken from the built-in English language pack.",
        "name": "value",
        "type": "LanguagePackStringValue"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_string.html"
  },
  "languagePackStrings": {
    "type": "object",
    "desc": "Contains a list of language pack strings.",
    "fields": [
      {
        "desc": "A list of language pack strings.",
        "name": "strings",
        "type": "languagePackString"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1language_pack_strings.html"
  },
  "linkPreviewOptions": {
    "type": "object",
    "desc": "Options to be used for generation of a link preview.",
    "fields": [
      {
        "desc": "True, if link preview must be disabled.",
        "name": "is_disabled",
        "type": "bool"
      },
      {
        "desc": "URL to use for link preview. If empty, then the first URL found in the message text will be used.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "True, if shown media preview must be small; ignored in secret chats or if the URL isn't explicitly specified.",
        "name": "force_small_media",
        "type": "bool"
      },
      {
        "desc": "True, if shown media preview must be large; ignored in secret chats or if the URL isn't explicitly specified.",
        "name": "force_large_media",
        "type": "bool"
      },
      {
        "desc": "True, if link preview must be shown above message text; otherwise, the link preview will be shown below the message text; ignored in secret chats.",
        "name": "show_above_text",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1link_preview_options.html"
  },
  "localFile": {
    "type": "object",
    "desc": "Represents a local file.",
    "fields": [
      {
        "desc": "Local path to the locally available file part; may be empty.",
        "name": "path",
        "type": "string"
      },
      {
        "desc": "True, if it is possible to download or generate the file.",
        "name": "can_be_downloaded",
        "type": "bool"
      },
      {
        "desc": "True, if the file can be deleted.",
        "name": "can_be_deleted",
        "type": "bool"
      },
      {
        "desc": "True, if the file is currently being downloaded (or a local copy is being generated by some other means).",
        "name": "is_downloading_active",
        "type": "bool"
      },
      {
        "desc": "True, if the local copy is fully available.",
        "name": "is_downloading_completed",
        "type": "bool"
      },
      {
        "desc": "Download will be started from this offset. downloaded_prefix_size is calculated from this offset.",
        "name": "download_offset",
        "type": "string"
      },
      {
        "desc": "If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes.",
        "name": "downloaded_prefix_size",
        "type": "string"
      },
      {
        "desc": "Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage.",
        "name": "downloaded_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1local_file.html"
  },
  "localizationTargetInfo": {
    "type": "object",
    "desc": "Contains information about the current localization target.",
    "fields": [
      {
        "desc": "List of available language packs for this application.",
        "name": "language_packs",
        "type": "languagePackInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1localization_target_info.html"
  },
  "location": {
    "type": "object",
    "desc": "Describes a location on planet Earth.",
    "fields": [
      {
        "desc": "Latitude of the location in degrees; as defined by the sender.",
        "name": "latitude",
        "type": "double"
      },
      {
        "desc": "Longitude of the location, in degrees; as defined by the sender.",
        "name": "longitude",
        "type": "double"
      },
      {
        "desc": "The estimated horizontal accuracy of the location, in meters; as defined by the sender. 0 if unknown.",
        "name": "horizontal_accuracy",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1location.html"
  },
  "logTags": {
    "type": "object",
    "desc": "Contains a list of available TDLib internal log tags.",
    "fields": [
      {
        "desc": "List of log tags.",
        "name": "tags",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_tags.html"
  },
  "logVerbosityLevel": {
    "type": "object",
    "desc": "Contains a TDLib internal log verbosity level.",
    "fields": [
      {
        "desc": "Log verbosity level.",
        "name": "verbosity_level",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1log_verbosity_level.html"
  },
  "maskPosition": {
    "type": "object",
    "desc": "Position on a photo where a mask is placed.",
    "fields": [
      {
        "desc": "Part of the face, relative to which the mask is placed.",
        "name": "point",
        "type": "MaskPoint"
      },
      {
        "desc": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position.)",
        "name": "x_shift",
        "type": "double"
      },
      {
        "desc": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position.)",
        "name": "y_shift",
        "type": "double"
      },
      {
        "desc": "Mask scaling coefficient. (For example, 2.0 means a doubled size.)",
        "name": "scale",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1mask_position.html"
  },
  "message": {
    "type": "object",
    "desc": "Describes a message.",
    "fields": [
      {
        "desc": "Message identifier; unique for the chat to which the message belongs.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sender of the message.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Chat identifier.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent.",
        "name": "sending_state",
        "type": "MessageSendingState"
      },
      {
        "desc": "The scheduling state of the message; may be null if the message isn't scheduled.",
        "name": "scheduling_state",
        "type": "MessageSchedulingState"
      },
      {
        "desc": "True, if the message is outgoing.",
        "name": "is_outgoing",
        "type": "bool"
      },
      {
        "desc": "True, if the message is pinned.",
        "name": "is_pinned",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be edited. For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used with this message by the application.",
        "name": "can_be_edited",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be forwarded.",
        "name": "can_be_forwarded",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be replied in another chat or topic.",
        "name": "can_be_replied_in_another_chat",
        "type": "bool"
      },
      {
        "desc": "True, if content of the message can be saved locally or copied.",
        "name": "can_be_saved",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be deleted only for the current user while other users will continue to see it.",
        "name": "can_be_deleted_only_for_self",
        "type": "bool"
      },
      {
        "desc": "True, if the message can be deleted for all users.",
        "name": "can_be_deleted_for_all_users",
        "type": "bool"
      },
      {
        "desc": "True, if the list of added reactions is available through getMessageAddedReactions.",
        "name": "can_get_added_reactions",
        "type": "bool"
      },
      {
        "desc": "True, if the message statistics are available through getMessageStatistics.",
        "name": "can_get_statistics",
        "type": "bool"
      },
      {
        "desc": "True, if information about the message thread is available through getMessageThread and getMessageThreadHistory.",
        "name": "can_get_message_thread",
        "type": "bool"
      },
      {
        "desc": "True, if chat members already viewed the message can be received through getMessageViewers.",
        "name": "can_get_viewers",
        "type": "bool"
      },
      {
        "desc": "True, if media timestamp links can be generated for media timestamp entities in the message text, caption or web page description through getMessageLink.",
        "name": "can_get_media_timestamp_links",
        "type": "bool"
      },
      {
        "desc": "True, if reactions on the message can be reported through reportMessageReactions.",
        "name": "can_report_reactions",
        "type": "bool"
      },
      {
        "desc": "True, if media timestamp entities refers to a media in this message as opposed to a media in the replied message.",
        "name": "has_timestamped_media",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts.",
        "name": "is_channel_post",
        "type": "bool"
      },
      {
        "desc": "True, if the message is a forum topic message.",
        "name": "is_topic_message",
        "type": "bool"
      },
      {
        "desc": "True, if the message contains an unread mention for the current user.",
        "name": "contains_unread_mention",
        "type": "bool"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was sent.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was last edited.",
        "name": "edit_date",
        "type": "number"
      },
      {
        "desc": "Information about the initial message sender; may be null if none or unknown.",
        "name": "forward_info",
        "type": "messageForwardInfo"
      },
      {
        "desc": "Information about the initial message for messages created with importMessages; may be null if the message isn't imported.",
        "name": "import_info",
        "type": "messageImportInfo"
      },
      {
        "desc": "Information about interactions with the message; may be null if none.",
        "name": "interaction_info",
        "type": "messageInteractionInfo"
      },
      {
        "desc": "Information about unread reactions added to the message.",
        "name": "unread_reactions",
        "type": "unreadReaction"
      },
      {
        "desc": "Information about the message or the story this message is replying to; may be null if none.",
        "name": "reply_to",
        "type": "MessageReplyTo"
      },
      {
        "desc": "If non-zero, the identifier of the message thread the message belongs to; unique within the chat to which the message belongs.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "The message's self-destruct type; may be null if none.",
        "name": "self_destruct_type",
        "type": "MessageSelfDestructType"
      },
      {
        "desc": "Time left before the message self-destruct timer expires, in seconds; 0 if self-destruction isn't scheduled yet.",
        "name": "self_destruct_in",
        "type": "double"
      },
      {
        "desc": "Time left before the message will be automatically deleted by message_auto_delete_time setting of the chat, in seconds; 0 if never.",
        "name": "auto_delete_in",
        "type": "double"
      },
      {
        "desc": "If non-zero, the user identifier of the bot through which this message was sent.",
        "name": "via_bot_user_id",
        "type": "string"
      },
      {
        "desc": "For channel posts and anonymous group messages, optional author signature.",
        "name": "author_signature",
        "type": "string"
      },
      {
        "desc": "Unique identifier of an album this message belongs to. Only audios, documents, photos and videos can be grouped together in albums.",
        "name": "media_album_id",
        "type": "string"
      },
      {
        "desc": "If non-empty, contains a human-readable description of the reason why access to this message must be restricted.",
        "name": "restriction_reason",
        "type": "string"
      },
      {
        "desc": "Content of the message.",
        "name": "content",
        "type": "MessageContent"
      },
      {
        "desc": "Reply markup for the message; may be null if none.",
        "name": "reply_markup",
        "type": "ReplyMarkup"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message.html"
  },
  "messageAutoDeleteTime": {
    "type": "object",
    "desc": "Contains default auto-delete timer setting for new chats.",
    "fields": [
      {
        "desc": "Message auto-delete time, in seconds. If 0, then messages aren't deleted automatically.",
        "name": "time",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_auto_delete_time.html"
  },
  "messageCalendar": {
    "type": "object",
    "desc": "Contains information about found messages, split by days according to the option \"utc_time_offset\".",
    "fields": [
      {
        "desc": "Total number of found messages.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "Information about messages sent.",
        "name": "days",
        "type": "messageCalendarDay"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_calendar.html"
  },
  "messageCalendarDay": {
    "type": "object",
    "desc": "Contains information about found messages sent on a specific day.",
    "fields": [
      {
        "desc": "Total number of found messages sent on the day.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "First message sent on the day.",
        "name": "message",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_calendar_day.html"
  },
  "messageCopyOptions": {
    "type": "object",
    "desc": "Options to be used when a message content is copied without reference to the original sender. Service messages, and messages with messageInvoice or messagePremiumGiveaway content can't be copied.",
    "fields": [
      {
        "desc": "True, if content of the message needs to be copied without reference to the original sender. Always true if the message is forwarded to a secret chat or is local.",
        "name": "send_copy",
        "type": "bool"
      },
      {
        "desc": "True, if media caption of the message copy needs to be replaced. Ignored if send_copy is false.",
        "name": "replace_caption",
        "type": "bool"
      },
      {
        "desc": "New message caption; pass null to copy message without caption. Ignored if replace_caption is false.",
        "name": "new_caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_copy_options.html"
  },
  "messageForwardInfo": {
    "type": "object",
    "desc": "Contains information about a forwarded message.",
    "fields": [
      {
        "desc": "Origin of the forwarded message.",
        "name": "origin",
        "type": "MessageOrigin"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was originally sent.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "The type of a public service announcement for the forwarded message.",
        "name": "public_service_announcement_type",
        "type": "string"
      },
      {
        "desc": "For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, the identifier of the chat from which the message was forwarded last time; 0 if unknown.",
        "name": "from_chat_id",
        "type": "string"
      },
      {
        "desc": "For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, the identifier of the original message from which the new message was forwarded last time; 0 if unknown.",
        "name": "from_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_forward_info.html"
  },
  "messageImportInfo": {
    "type": "object",
    "desc": "Contains information about a message created with importMessages.",
    "fields": [
      {
        "desc": "Name of the original sender.",
        "name": "sender_name",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was originally sent.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_import_info.html"
  },
  "messageInteractionInfo": {
    "type": "object",
    "desc": "Contains information about interactions with a message.",
    "fields": [
      {
        "desc": "Number of times the message was viewed.",
        "name": "view_count",
        "type": "number"
      },
      {
        "desc": "Number of times the message was forwarded.",
        "name": "forward_count",
        "type": "number"
      },
      {
        "desc": "Information about direct or indirect replies to the message; may be null. Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which are not replies itself.",
        "name": "reply_info",
        "type": "messageReplyInfo"
      },
      {
        "desc": "The list of reactions added to the message.",
        "name": "reactions",
        "type": "messageReaction"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_interaction_info.html"
  },
  "messageLink": {
    "type": "object",
    "desc": "Contains an HTTPS link to a message in a supergroup or channel, or a forum topic.",
    "fields": [
      {
        "desc": "The link.",
        "name": "link",
        "type": "string"
      },
      {
        "desc": "True, if the link will work for non-members of the chat.",
        "name": "is_public",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_link.html"
  },
  "messageLinkInfo": {
    "type": "object",
    "desc": "Contains information about a link to a message or a forum topic in a chat.",
    "fields": [
      {
        "desc": "True, if the link is a public link for a message or a forum topic in a chat.",
        "name": "is_public",
        "type": "bool"
      },
      {
        "desc": "If found, identifier of the chat to which the link points, 0 otherwise.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "If found, identifier of the message thread in which to open the message, or a forum topic to open if the message is missing.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "If found, the linked message; may be null.",
        "name": "message",
        "type": "message"
      },
      {
        "desc": "Timestamp from which the video/audio/video note/voice note/story playing must start, in seconds; 0 if not specified. The media can be in the message content or in its web page preview.",
        "name": "media_timestamp",
        "type": "number"
      },
      {
        "desc": "True, if the whole media album to which the message belongs is linked.",
        "name": "for_album",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_link_info.html"
  },
  "messagePosition": {
    "type": "object",
    "desc": "Contains information about a message in a specific position.",
    "fields": [
      {
        "desc": "0-based message position in the full list of suitable messages.",
        "name": "position",
        "type": "number"
      },
      {
        "desc": "Message identifier.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the message was sent.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_position.html"
  },
  "messagePositions": {
    "type": "object",
    "desc": "Contains a list of message positions.",
    "fields": [
      {
        "desc": "Total number of messages found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of message positions.",
        "name": "positions",
        "type": "messagePosition"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_positions.html"
  },
  "messageReaction": {
    "type": "object",
    "desc": "Contains information about a reaction to a message.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "type",
        "type": "ReactionType"
      },
      {
        "desc": "Number of times the reaction was added.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "True, if the reaction is chosen by the current user.",
        "name": "is_chosen",
        "type": "bool"
      },
      {
        "desc": "Identifier of the message sender used by the current user to add the reaction; may be null if unknown or the reaction isn't chosen.",
        "name": "used_sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "Identifiers of at most 3 recent message senders, added the reaction; available in private, basic group and supergroup chats.",
        "name": "recent_sender_ids",
        "type": "MessageSender"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_reaction.html"
  },
  "messageReplyInfo": {
    "type": "object",
    "desc": "Contains information about replies to a message.",
    "fields": [
      {
        "desc": "Number of times the message was directly or indirectly replied.",
        "name": "reply_count",
        "type": "number"
      },
      {
        "desc": "Identifiers of at most 3 recent repliers to the message; available in channels with a discussion supergroup. The users and chats are expected to be inaccessible: only their photo and name will be available.",
        "name": "recent_replier_ids",
        "type": "MessageSender"
      },
      {
        "desc": "Identifier of the last read incoming reply to the message.",
        "name": "last_read_inbox_message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last read outgoing reply to the message.",
        "name": "last_read_outbox_message_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last reply to the message.",
        "name": "last_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_reply_info.html"
  },
  "messageSendOptions": {
    "type": "object",
    "desc": "Options to be used when a message is sent.",
    "fields": [
      {
        "desc": "Pass true to disable notification for the message.",
        "name": "disable_notification",
        "type": "bool"
      },
      {
        "desc": "Pass true if the message is sent from the background.",
        "name": "from_background",
        "type": "bool"
      },
      {
        "desc": "Pass true if the content of the message must be protected from forwarding and saving; for bots only.",
        "name": "protect_content",
        "type": "bool"
      },
      {
        "desc": "Pass true if the user explicitly chosen a sticker or a custom emoji from an installed sticker set; applicable only to sendMessage and sendMessageAlbum.",
        "name": "update_order_of_installed_sticker_sets",
        "type": "bool"
      },
      {
        "desc": "Message scheduling state; pass null to send message immediately. Messages sent to a secret chat, live location messages and self-destructing messages can't be scheduled.",
        "name": "scheduling_state",
        "type": "MessageSchedulingState"
      },
      {
        "desc": "Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates.",
        "name": "sending_id",
        "type": "number"
      },
      {
        "desc": "Pass true to get a fake message instead of actually sending them.",
        "name": "only_preview",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_send_options.html"
  },
  "messageSenders": {
    "type": "object",
    "desc": "Represents a list of message senders.",
    "fields": [
      {
        "desc": "Approximate total number of messages senders found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of message senders.",
        "name": "senders",
        "type": "MessageSender"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_senders.html"
  },
  "messageSponsor": {
    "type": "object",
    "desc": "Information about the sponsor of a message.",
    "fields": [
      {
        "desc": "Type of the sponsor.",
        "name": "type",
        "type": "MessageSponsorType"
      },
      {
        "desc": "Photo of the sponsor; may be null if must not be shown.",
        "name": "photo",
        "type": "chatPhotoInfo"
      },
      {
        "desc": "Additional optional information about the sponsor to be shown along with the message.",
        "name": "info",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_sponsor.html"
  },
  "messageStatistics": {
    "type": "object",
    "desc": "A detailed statistics about a message.",
    "fields": [
      {
        "desc": "A graph containing number of message views and shares.",
        "name": "message_interaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of message reactions.",
        "name": "message_reaction_graph",
        "type": "StatisticalGraph"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_statistics.html"
  },
  "messageThreadInfo": {
    "type": "object",
    "desc": "Contains information about a message thread.",
    "fields": [
      {
        "desc": "Identifier of the chat to which the message thread belongs.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Message thread identifier, unique within the chat.",
        "name": "message_thread_id",
        "type": "string"
      },
      {
        "desc": "Information about the message thread; may be null for forum topic threads.",
        "name": "reply_info",
        "type": "messageReplyInfo"
      },
      {
        "desc": "Approximate number of unread messages in the message thread.",
        "name": "unread_message_count",
        "type": "number"
      },
      {
        "desc": "The messages from which the thread starts. The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).",
        "name": "messages",
        "type": "message"
      },
      {
        "desc": "A draft of a message in the message thread; may be null if none.",
        "name": "draft_message",
        "type": "draftMessage"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_thread_info.html"
  },
  "messageViewer": {
    "type": "object",
    "desc": "Represents a viewer of a message.",
    "fields": [
      {
        "desc": "User identifier of the viewer.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Approximate point in time (Unix timestamp) when the message was viewed.",
        "name": "view_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_viewer.html"
  },
  "messageViewers": {
    "type": "object",
    "desc": "Represents a list of message viewers.",
    "fields": [
      {
        "desc": "List of message viewers.",
        "name": "viewers",
        "type": "messageViewer"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1message_viewers.html"
  },
  "messages": {
    "type": "object",
    "desc": "Contains a list of messages.",
    "fields": [
      {
        "desc": "Approximate total number of messages found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of messages; messages may be null.",
        "name": "messages",
        "type": "message"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1messages.html"
  },
  "minithumbnail": {
    "type": "object",
    "desc": "Thumbnail image of a very poor quality and low resolution.",
    "fields": [
      {
        "desc": "Thumbnail width, usually doesn't exceed 40.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height, usually doesn't exceed 40.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "The thumbnail in JPEG format.",
        "name": "data",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1minithumbnail.html"
  },
  "networkStatistics": {
    "type": "object",
    "desc": "A full list of available network statistic entries.",
    "fields": [
      {
        "desc": "Point in time (Unix timestamp) from which the statistics are collected.",
        "name": "since_date",
        "type": "number"
      },
      {
        "desc": "Network statistics entries.",
        "name": "entries",
        "type": "NetworkStatisticsEntry"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1network_statistics.html"
  },
  "notification": {
    "type": "object",
    "desc": "Contains information about a notification.",
    "fields": [
      {
        "desc": "Unique persistent identifier of this notification.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Notification date.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "True, if the notification was explicitly sent without sound.",
        "name": "is_silent",
        "type": "bool"
      },
      {
        "desc": "Notification type.",
        "name": "type",
        "type": "NotificationType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification.html"
  },
  "notificationGroup": {
    "type": "object",
    "desc": "Describes a group of notifications.",
    "fields": [
      {
        "desc": "Unique persistent auto-incremented from 1 identifier of the notification group.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Type of the group.",
        "name": "type",
        "type": "NotificationGroupType"
      },
      {
        "desc": "Identifier of a chat to which all notifications in the group belong.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Total number of active notifications in the group.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "The list of active notifications.",
        "name": "notifications",
        "type": "notification"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_group.html"
  },
  "notificationSound": {
    "type": "object",
    "desc": "Describes a notification sound in MP3 format.",
    "fields": [
      {
        "desc": "Unique identifier of the notification sound.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Duration of the sound, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the sound was created.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Title of the notification sound.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Arbitrary data, defined while the sound was uploaded.",
        "name": "data",
        "type": "string"
      },
      {
        "desc": "File containing the sound.",
        "name": "sound",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_sound.html"
  },
  "notificationSounds": {
    "type": "object",
    "desc": "Contains a list of notification sounds.",
    "fields": [
      {
        "desc": "A list of notification sounds.",
        "name": "notification_sounds",
        "type": "notificationSound"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1notification_sounds.html"
  },
  "ok": {
    "type": "object",
    "desc": "An object of this type is returned on a successful function call for certain functions.",
    "fields": [

    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1ok.html"
  },
  "orderInfo": {
    "type": "object",
    "desc": "Order information.",
    "fields": [
      {
        "desc": "Name of the user.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Phone number of the user.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Email address of the user.",
        "name": "email_address",
        "type": "string"
      },
      {
        "desc": "Shipping address for this order; may be null.",
        "name": "shipping_address",
        "type": "address"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1order_info.html"
  },
  "pageBlockCaption": {
    "type": "object",
    "desc": "Contains a caption of an instant view web page block, consisting of a text and a trailing credit.",
    "fields": [
      {
        "desc": "Content of the caption.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "Block credit (like HTML tag <cite>).",
        "name": "credit",
        "type": "RichText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_caption.html"
  },
  "pageBlockListItem": {
    "type": "object",
    "desc": "Describes an item of a list page block.",
    "fields": [
      {
        "desc": "Item label.",
        "name": "label",
        "type": "string"
      },
      {
        "desc": "Item blocks.",
        "name": "page_blocks",
        "type": "PageBlock"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_list_item.html"
  },
  "pageBlockRelatedArticle": {
    "type": "object",
    "desc": "Contains information about a related article.",
    "fields": [
      {
        "desc": "Related article URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Article title; may be empty.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Article description; may be empty.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Article photo; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Article author; may be empty.",
        "name": "author",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the article was published; 0 if unknown.",
        "name": "publish_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_related_article.html"
  },
  "pageBlockTableCell": {
    "type": "object",
    "desc": "Represents a cell of a table.",
    "fields": [
      {
        "desc": "Cell text; may be null. If the text is null, then the cell must be invisible.",
        "name": "text",
        "type": "RichText"
      },
      {
        "desc": "True, if it is a header cell.",
        "name": "is_header",
        "type": "bool"
      },
      {
        "desc": "The number of columns the cell spans.",
        "name": "colspan",
        "type": "number"
      },
      {
        "desc": "The number of rows the cell spans.",
        "name": "rowspan",
        "type": "number"
      },
      {
        "desc": "Horizontal cell content alignment.",
        "name": "align",
        "type": "PageBlockHorizontalAlignment"
      },
      {
        "desc": "Vertical cell content alignment.",
        "name": "valign",
        "type": "PageBlockVerticalAlignment"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1page_block_table_cell.html"
  },
  "passportAuthorizationForm": {
    "type": "object",
    "desc": "Contains information about a Telegram Passport authorization form that was requested.",
    "fields": [
      {
        "desc": "Unique identifier of the authorization form.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Telegram Passport elements that must be provided to complete the form.",
        "name": "required_elements",
        "type": "passportRequiredElement"
      },
      {
        "desc": "URL for the privacy policy of the service; may be empty.",
        "name": "privacy_policy_url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_authorization_form.html"
  },
  "passportElementError": {
    "type": "object",
    "desc": "Contains the description of an error in a Telegram Passport element.",
    "fields": [
      {
        "desc": "Type of the Telegram Passport element which has the error.",
        "name": "type",
        "type": "PassportElementType"
      },
      {
        "desc": "Error message.",
        "name": "message",
        "type": "string"
      },
      {
        "desc": "Error source.",
        "name": "source",
        "type": "PassportElementErrorSource"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_element_error.html"
  },
  "passportElements": {
    "type": "object",
    "desc": "Contains information about saved Telegram Passport elements.",
    "fields": [
      {
        "desc": "Telegram Passport elements.",
        "name": "elements",
        "type": "PassportElement"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_elements.html"
  },
  "passportElementsWithErrors": {
    "type": "object",
    "desc": "Contains information about a Telegram Passport elements and corresponding errors.",
    "fields": [
      {
        "desc": "Telegram Passport elements.",
        "name": "elements",
        "type": "PassportElement"
      },
      {
        "desc": "Errors in the elements that are already available.",
        "name": "errors",
        "type": "passportElementError"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_elements_with_errors.html"
  },
  "passportRequiredElement": {
    "type": "object",
    "desc": "Contains a description of the required Telegram Passport element that was requested by a service.",
    "fields": [
      {
        "desc": "List of Telegram Passport elements any of which is enough to provide.",
        "name": "suitable_elements",
        "type": "passportSuitableElement"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_required_element.html"
  },
  "passportSuitableElement": {
    "type": "object",
    "desc": "Contains information about a Telegram Passport element that was requested by a service.",
    "fields": [
      {
        "desc": "Type of the element.",
        "name": "type",
        "type": "PassportElementType"
      },
      {
        "desc": "True, if a selfie is required with the identity document.",
        "name": "is_selfie_required",
        "type": "bool"
      },
      {
        "desc": "True, if a certified English translation is required with the document.",
        "name": "is_translation_required",
        "type": "bool"
      },
      {
        "desc": "True, if personal details must include the user's name in the language of their country of residence.",
        "name": "is_native_name_required",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1passport_suitable_element.html"
  },
  "passwordState": {
    "type": "object",
    "desc": "Represents the current state of 2-step verification.",
    "fields": [
      {
        "desc": "True, if a 2-step verification password is set.",
        "name": "has_password",
        "type": "bool"
      },
      {
        "desc": "Hint for the password; may be empty.",
        "name": "password_hint",
        "type": "string"
      },
      {
        "desc": "True, if a recovery email is set.",
        "name": "has_recovery_email_address",
        "type": "bool"
      },
      {
        "desc": "True, if some Telegram Passport elements were saved.",
        "name": "has_passport_data",
        "type": "bool"
      },
      {
        "desc": "Information about the recovery email address to which the confirmation email was sent; may be null.",
        "name": "recovery_email_address_code_info",
        "type": "emailAddressAuthenticationCodeInfo"
      },
      {
        "desc": "Pattern of the email address set up for logging in.",
        "name": "login_email_address_pattern",
        "type": "string"
      },
      {
        "desc": "If not 0, point in time (Unix timestamp) after which the 2-step verification password can be reset immediately using resetPassword.",
        "name": "pending_reset_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1password_state.html"
  },
  "paymentForm": {
    "type": "object",
    "desc": "Contains information about an invoice payment form.",
    "fields": [
      {
        "desc": "The payment form identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Full information about the invoice.",
        "name": "invoice",
        "type": "invoice"
      },
      {
        "desc": "User identifier of the seller bot.",
        "name": "seller_bot_user_id",
        "type": "string"
      },
      {
        "desc": "User identifier of the payment provider bot.",
        "name": "payment_provider_user_id",
        "type": "string"
      },
      {
        "desc": "Information about the payment provider.",
        "name": "payment_provider",
        "type": "PaymentProvider"
      },
      {
        "desc": "The list of additional payment options.",
        "name": "additional_payment_options",
        "type": "paymentOption"
      },
      {
        "desc": "Saved server-side order information; may be null.",
        "name": "saved_order_info",
        "type": "orderInfo"
      },
      {
        "desc": "The list of saved payment credentials.",
        "name": "saved_credentials",
        "type": "savedCredentials"
      },
      {
        "desc": "True, if the user can choose to save credentials.",
        "name": "can_save_credentials",
        "type": "bool"
      },
      {
        "desc": "True, if the user will be able to save credentials, if sets up a 2-step verification password.",
        "name": "need_password",
        "type": "bool"
      },
      {
        "desc": "Product title.",
        "name": "product_title",
        "type": "string"
      },
      {
        "desc": "Product description.",
        "name": "product_description",
        "type": "formattedText"
      },
      {
        "desc": "Product photo; may be null.",
        "name": "product_photo",
        "type": "photo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_form.html"
  },
  "paymentOption": {
    "type": "object",
    "desc": "Describes an additional payment option.",
    "fields": [
      {
        "desc": "Title for the payment option.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Payment form URL to be opened in a web view.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_option.html"
  },
  "paymentReceipt": {
    "type": "object",
    "desc": "Contains information about a successful payment.",
    "fields": [
      {
        "desc": "Product title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Product description.",
        "name": "description",
        "type": "formattedText"
      },
      {
        "desc": "Product photo; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Point in time (Unix timestamp) when the payment was made.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "User identifier of the seller bot.",
        "name": "seller_bot_user_id",
        "type": "string"
      },
      {
        "desc": "User identifier of the payment provider bot.",
        "name": "payment_provider_user_id",
        "type": "string"
      },
      {
        "desc": "Information about the invoice.",
        "name": "invoice",
        "type": "invoice"
      },
      {
        "desc": "Order information; may be null.",
        "name": "order_info",
        "type": "orderInfo"
      },
      {
        "desc": "Chosen shipping option; may be null.",
        "name": "shipping_option",
        "type": "shippingOption"
      },
      {
        "desc": "Title of the saved credentials chosen by the buyer.",
        "name": "credentials_title",
        "type": "string"
      },
      {
        "desc": "The amount of tip chosen by the buyer in the smallest units of the currency.",
        "name": "tip_amount",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_receipt.html"
  },
  "paymentResult": {
    "type": "object",
    "desc": "Contains the result of a payment request.",
    "fields": [
      {
        "desc": "True, if the payment request was successful; otherwise, the verification_url will be non-empty.",
        "name": "success",
        "type": "bool"
      },
      {
        "desc": "URL for additional payment credentials verification.",
        "name": "verification_url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1payment_result.html"
  },
  "personalDetails": {
    "type": "object",
    "desc": "Contains the user's personal details.",
    "fields": [
      {
        "desc": "First name of the user written in English; 1-255 characters.",
        "name": "first_name",
        "type": "string"
      },
      {
        "desc": "Middle name of the user written in English; 0-255 characters.",
        "name": "middle_name",
        "type": "string"
      },
      {
        "desc": "Last name of the user written in English; 1-255 characters.",
        "name": "last_name",
        "type": "string"
      },
      {
        "desc": "Native first name of the user; 1-255 characters.",
        "name": "native_first_name",
        "type": "string"
      },
      {
        "desc": "Native middle name of the user; 0-255 characters.",
        "name": "native_middle_name",
        "type": "string"
      },
      {
        "desc": "Native last name of the user; 1-255 characters.",
        "name": "native_last_name",
        "type": "string"
      },
      {
        "desc": "Birthdate of the user.",
        "name": "birthdate",
        "type": "date"
      },
      {
        "desc": "Gender of the user, \"male\" or \"female\".",
        "name": "gender",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code of the user's country.",
        "name": "country_code",
        "type": "string"
      },
      {
        "desc": "A two-letter ISO 3166-1 alpha-2 country code of the user's residence country.",
        "name": "residence_country_code",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1personal_details.html"
  },
  "personalDocument": {
    "type": "object",
    "desc": "A personal document, containing some information about a user.",
    "fields": [
      {
        "desc": "List of files containing the pages of the document.",
        "name": "files",
        "type": "datedFile"
      },
      {
        "desc": "List of files containing a certified English translation of the document.",
        "name": "translation",
        "type": "datedFile"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1personal_document.html"
  },
  "phoneNumberAuthenticationSettings": {
    "type": "object",
    "desc": "Contains settings for the authentication of the user's phone number.",
    "fields": [
      {
        "desc": "Pass true if the authentication code may be sent via a flash call to the specified phone number.",
        "name": "allow_flash_call",
        "type": "bool"
      },
      {
        "desc": "Pass true if the authentication code may be sent via a missed call to the specified phone number.",
        "name": "allow_missed_call",
        "type": "bool"
      },
      {
        "desc": "Pass true if the authenticated phone number is used on the current device.",
        "name": "is_current_phone_number",
        "type": "bool"
      },
      {
        "desc": "For official applications only. True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details.",
        "name": "allow_sms_retriever_api",
        "type": "bool"
      },
      {
        "desc": "For official Android and iOS applications only; pass null otherwise. Settings for Firebase Authentication.",
        "name": "firebase_authentication_settings",
        "type": "FirebaseAuthenticationSettings"
      },
      {
        "desc": "List of up to 20 authentication tokens, recently received in updateOption(\"authentication_token\") in previously logged out sessions.",
        "name": "authentication_tokens",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1phone_number_authentication_settings.html"
  },
  "phoneNumberInfo": {
    "type": "object",
    "desc": "Contains information about a phone number.",
    "fields": [
      {
        "desc": "Information about the country to which the phone number belongs; may be null.",
        "name": "country",
        "type": "countryInfo"
      },
      {
        "desc": "The part of the phone number denoting country calling code or its part.",
        "name": "country_calling_code",
        "type": "string"
      },
      {
        "desc": "The phone number without country calling code formatted accordingly to local rules. Expected digits are returned as '-', but even more digits might be entered by the user.",
        "name": "formatted_phone_number",
        "type": "string"
      },
      {
        "desc": "True, if the phone number was bought on Fragment and isn't tied to a SIM card.",
        "name": "is_anonymous",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1phone_number_info.html"
  },
  "photo": {
    "type": "object",
    "desc": "Describes a photo.",
    "fields": [
      {
        "desc": "True, if stickers were added to the photo. The list of corresponding sticker sets can be received using getAttachedStickerSets.",
        "name": "has_stickers",
        "type": "bool"
      },
      {
        "desc": "Photo minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Available variants of the photo, in different sizes.",
        "name": "sizes",
        "type": "photoSize"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1photo.html"
  },
  "photoSize": {
    "type": "object",
    "desc": "Describes an image in JPEG format.",
    "fields": [
      {
        "desc": "Image type (see https://core.telegram.org/constructor/photoSize).",
        "name": "type",
        "type": "string"
      },
      {
        "desc": "Information about the image file.",
        "name": "photo",
        "type": "file"
      },
      {
        "desc": "Image width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Image height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image; in bytes.",
        "name": "progressive_sizes",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1photo_size.html"
  },
  "point": {
    "type": "object",
    "desc": "A point on a Cartesian plane.",
    "fields": [
      {
        "desc": "The point's first coordinate.",
        "name": "x",
        "type": "double"
      },
      {
        "desc": "The point's second coordinate.",
        "name": "y",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1point.html"
  },
  "poll": {
    "type": "object",
    "desc": "Describes a poll.",
    "fields": [
      {
        "desc": "Unique poll identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Poll question; 1-300 characters.",
        "name": "question",
        "type": "string"
      },
      {
        "desc": "List of poll answer options.",
        "name": "options",
        "type": "pollOption"
      },
      {
        "desc": "Total number of voters, participating in the poll.",
        "name": "total_voter_count",
        "type": "number"
      },
      {
        "desc": "Identifiers of recent voters, if the poll is non-anonymous.",
        "name": "recent_voter_ids",
        "type": "MessageSender"
      },
      {
        "desc": "True, if the poll is anonymous.",
        "name": "is_anonymous",
        "type": "bool"
      },
      {
        "desc": "Type of the poll.",
        "name": "type",
        "type": "PollType"
      },
      {
        "desc": "Amount of time the poll will be active after creation, in seconds.",
        "name": "open_period",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the poll will automatically be closed.",
        "name": "close_date",
        "type": "number"
      },
      {
        "desc": "True, if the poll is closed.",
        "name": "is_closed",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1poll.html"
  },
  "pollOption": {
    "type": "object",
    "desc": "Describes one answer option of a poll.",
    "fields": [
      {
        "desc": "Option text; 1-100 characters.",
        "name": "text",
        "type": "string"
      },
      {
        "desc": "Number of voters for this option, available only for closed or voted polls.",
        "name": "voter_count",
        "type": "number"
      },
      {
        "desc": "The percentage of votes for this option; 0-100.",
        "name": "vote_percentage",
        "type": "number"
      },
      {
        "desc": "True, if the option was chosen by the user.",
        "name": "is_chosen",
        "type": "bool"
      },
      {
        "desc": "True, if the option is being chosen by a pending setPollAnswer request.",
        "name": "is_being_chosen",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1poll_option.html"
  },
  "premiumFeaturePromotionAnimation": {
    "type": "object",
    "desc": "Describes a promotion animation for a Premium feature.",
    "fields": [
      {
        "desc": "Premium feature.",
        "name": "feature",
        "type": "PremiumFeature"
      },
      {
        "desc": "Promotion animation for the feature.",
        "name": "animation",
        "type": "animation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_feature_promotion_animation.html"
  },
  "premiumFeatures": {
    "type": "object",
    "desc": "Contains information about features, available to Premium users.",
    "fields": [
      {
        "desc": "The list of available features.",
        "name": "features",
        "type": "PremiumFeature"
      },
      {
        "desc": "The list of limits, increased for Premium users.",
        "name": "limits",
        "type": "premiumLimit"
      },
      {
        "desc": "An internal link to be opened to pay for Telegram Premium if store payment isn't possible; may be null if direct payment isn't available.",
        "name": "payment_link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_features.html"
  },
  "premiumGiftCodeInfo": {
    "type": "object",
    "desc": "Contains information about a Telegram Premium gift code.",
    "fields": [
      {
        "desc": "Identifier of a chat or a user that created the gift code.",
        "name": "creator_id",
        "type": "MessageSender"
      },
      {
        "desc": "Point in time (Unix timestamp) when the code was created.",
        "name": "creation_date",
        "type": "number"
      },
      {
        "desc": "True, if the gift code was created for a giveaway.",
        "name": "is_from_giveaway",
        "type": "bool"
      },
      {
        "desc": "Identifier of the corresponding giveaway message in the creator_id chat; can be 0 or an identifier of a deleted message.",
        "name": "giveaway_message_id",
        "type": "string"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "Identifier of a user for which the code was created; 0 if none.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the code was activated; 0 if none.",
        "name": "use_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_gift_code_info.html"
  },
  "premiumGiftCodePaymentOption": {
    "type": "object",
    "desc": "Describes an option for creating Telegram Premium gift codes.",
    "fields": [
      {
        "desc": "ISO 4217 currency code for Telegram Premium gift code payment.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "The amount to pay, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "Number of users which will be able to activate the gift codes.",
        "name": "user_count",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "Identifier of the store product associated with the option; may be empty if none.",
        "name": "store_product_id",
        "type": "string"
      },
      {
        "desc": "Number of times the store product must be paid.",
        "name": "store_product_quantity",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_gift_code_payment_option.html"
  },
  "premiumGiftCodePaymentOptions": {
    "type": "object",
    "desc": "Contains a list of options for creating Telegram Premium gift codes.",
    "fields": [
      {
        "desc": "The list of options.",
        "name": "options",
        "type": "premiumGiftCodePaymentOption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_gift_code_payment_options.html"
  },
  "premiumGiveawayParameters": {
    "type": "object",
    "desc": "Describes parameters of a Telegram Premium giveaway.",
    "fields": [
      {
        "desc": "Identifier of the channel chat, which will be automatically boosted by the winners of the giveaway for duration of the Premium subscription.",
        "name": "boosted_chat_id",
        "type": "string"
      },
      {
        "desc": "Identifiers of other channel chats that must be subscribed by the users to be eligible for the giveaway. There can be up to getOption(\"giveaway_additional_chat_count_max\") additional chats.",
        "name": "additional_chat_ids",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the giveaway is expected to be performed; must be 60-getOption(\"giveaway_duration_max\") seconds in the future in scheduled giveaways.",
        "name": "winners_selection_date",
        "type": "number"
      },
      {
        "desc": "True, if only new members of the chats will be eligible for the giveaway.",
        "name": "only_new_members",
        "type": "bool"
      },
      {
        "desc": "The list of two-letter ISO 3166-1 alpha-2 codes of countries, users from which will be eligible for the giveaway. If empty, then all users can participate in the giveaway. There can be up to getOption(\"giveaway_country_count_max\") chosen countries. Users with phone number that was bought on Fragment can participate in any giveaway and the country code \"FT\" must not be specified in the list.",
        "name": "country_codes",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_giveaway_parameters.html"
  },
  "premiumLimit": {
    "type": "object",
    "desc": "Contains information about a limit, increased for Premium users.",
    "fields": [
      {
        "desc": "The type of the limit.",
        "name": "type",
        "type": "PremiumLimitType"
      },
      {
        "desc": "Default value of the limit.",
        "name": "default_value",
        "type": "number"
      },
      {
        "desc": "Value of the limit for Premium users.",
        "name": "premium_value",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_limit.html"
  },
  "premiumPaymentOption": {
    "type": "object",
    "desc": "Describes an option for buying Telegram Premium to a user.",
    "fields": [
      {
        "desc": "ISO 4217 currency code for Telegram Premium subscription payment.",
        "name": "currency",
        "type": "string"
      },
      {
        "desc": "The amount to pay, in the smallest units of the currency.",
        "name": "amount",
        "type": "string"
      },
      {
        "desc": "The discount associated with this option, as a percentage.",
        "name": "discount_percentage",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "Identifier of the store product associated with the option.",
        "name": "store_product_id",
        "type": "string"
      },
      {
        "desc": "An internal link to be opened for buying Telegram Premium to the user if store payment isn't possible; may be null if direct payment isn't available.",
        "name": "payment_link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_payment_option.html"
  },
  "premiumState": {
    "type": "object",
    "desc": "Contains state of Telegram Premium subscription and promotion videos for Premium features.",
    "fields": [
      {
        "desc": "Text description of the state of the current Premium subscription; may be empty if the current user has no Telegram Premium subscription.",
        "name": "state",
        "type": "formattedText"
      },
      {
        "desc": "The list of available options for buying Telegram Premium.",
        "name": "payment_options",
        "type": "premiumStatePaymentOption"
      },
      {
        "desc": "The list of available promotion animations for Premium features.",
        "name": "animations",
        "type": "premiumFeaturePromotionAnimation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_state.html"
  },
  "premiumStatePaymentOption": {
    "type": "object",
    "desc": "Describes an option for buying or upgrading Telegram Premium for self.",
    "fields": [
      {
        "desc": "Information about the payment option.",
        "name": "payment_option",
        "type": "premiumPaymentOption"
      },
      {
        "desc": "True, if this is the currently used Telegram Premium subscription option.",
        "name": "is_current",
        "type": "bool"
      },
      {
        "desc": "True, if the payment option can be used to upgrade the existing Telegram Premium subscription.",
        "name": "is_upgrade",
        "type": "bool"
      },
      {
        "desc": "Identifier of the last in-store transaction for the currently used option.",
        "name": "last_transaction_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1premium_state_payment_option.html"
  },
  "prepaidPremiumGiveaway": {
    "type": "object",
    "desc": "Describes a prepaid Telegram Premium giveaway.",
    "fields": [
      {
        "desc": "Unique identifier of the prepaid giveaway.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Number of users which will receive Telegram Premium subscription gift codes.",
        "name": "winner_count",
        "type": "number"
      },
      {
        "desc": "Number of month the Telegram Premium subscription will be active after code activation.",
        "name": "month_count",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the giveaway was paid.",
        "name": "payment_date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1prepaid_premium_giveaway.html"
  },
  "profileAccentColor": {
    "type": "object",
    "desc": "Contains information about supported accent color for user profile photo background.",
    "fields": [
      {
        "desc": "Profile accent color identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Description of accent colors expected to be used in light themes.",
        "name": "light_theme_colors",
        "type": "profileAccentColors"
      },
      {
        "desc": "Description of accent colors expected to be used in dark themes.",
        "name": "dark_theme_colors",
        "type": "profileAccentColors"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1profile_accent_color.html"
  },
  "profileAccentColors": {
    "type": "object",
    "desc": "Contains information about supported accent colors for user profile photo background in RGB format.",
    "fields": [
      {
        "desc": "The list of 1-2 colors in RGB format, describing the colors, as expected to be shown in the color palette settings.",
        "name": "palette_colors",
        "type": "number"
      },
      {
        "desc": "The list of 1-2 colors in RGB format, describing the colors, as expected to be used for the profile photo background.",
        "name": "background_colors",
        "type": "number"
      },
      {
        "desc": "The list of 2 colors in RGB format, describing the colors of the gradient to be used for the unread active story indicator around profile photo.",
        "name": "story_colors",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1profile_accent_colors.html"
  },
  "profilePhoto": {
    "type": "object",
    "desc": "Describes a user profile photo.",
    "fields": [
      {
        "desc": "Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of user profile photos.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "A small (160x160) user profile photo. The file can be downloaded only before the photo is changed.",
        "name": "small",
        "type": "file"
      },
      {
        "desc": "A big (640x640) user profile photo. The file can be downloaded only before the photo is changed.",
        "name": "big",
        "type": "file"
      },
      {
        "desc": "User profile photo minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "True, if the photo has animated variant.",
        "name": "has_animation",
        "type": "bool"
      },
      {
        "desc": "True, if the photo is visible only for the current user.",
        "name": "is_personal",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1profile_photo.html"
  },
  "proxies": {
    "type": "object",
    "desc": "Represents a list of proxy servers.",
    "fields": [
      {
        "desc": "List of proxy servers.",
        "name": "proxies",
        "type": "proxy"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxies.html"
  },
  "proxy": {
    "type": "object",
    "desc": "Contains information about a proxy server.",
    "fields": [
      {
        "desc": "Unique identifier of the proxy.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Proxy server domain or IP address.",
        "name": "server",
        "type": "string"
      },
      {
        "desc": "Proxy server port.",
        "name": "port",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the proxy was last used; 0 if never.",
        "name": "last_used_date",
        "type": "number"
      },
      {
        "desc": "True, if the proxy is enabled now.",
        "name": "is_enabled",
        "type": "bool"
      },
      {
        "desc": "Type of the proxy.",
        "name": "type",
        "type": "ProxyType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1proxy.html"
  },
  "pushReceiverId": {
    "type": "object",
    "desc": "Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification.",
    "fields": [
      {
        "desc": "The globally unique identifier of push notification subscription.",
        "name": "id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1push_receiver_id.html"
  },
  "recommendedChatFolder": {
    "type": "object",
    "desc": "Describes a recommended chat folder.",
    "fields": [
      {
        "desc": "The chat folder.",
        "name": "folder",
        "type": "chatFolder"
      },
      {
        "desc": "Chat folder description.",
        "name": "description",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recommended_chat_folder.html"
  },
  "recommendedChatFolders": {
    "type": "object",
    "desc": "Contains a list of recommended chat folders.",
    "fields": [
      {
        "desc": "List of recommended chat folders.",
        "name": "chat_folders",
        "type": "recommendedChatFolder"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recommended_chat_folders.html"
  },
  "recoveryEmailAddress": {
    "type": "object",
    "desc": "Contains information about the current recovery email address.",
    "fields": [
      {
        "desc": "Recovery email address.",
        "name": "recovery_email_address",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1recovery_email_address.html"
  },
  "remoteFile": {
    "type": "object",
    "desc": "Represents a remote file.",
    "fields": [
      {
        "desc": "Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers. If the identifier starts with \"http://\" or \"https://\", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile/addFileToDownloads is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the application with the HTTP URL in the original_path and \"#url#\" as the conversion string. Application must generate the file by downloading it to the specified location.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time.",
        "name": "unique_id",
        "type": "string"
      },
      {
        "desc": "True, if the file is currently being uploaded (or a remote copy is being generated by some other means).",
        "name": "is_uploading_active",
        "type": "bool"
      },
      {
        "desc": "True, if a remote copy is fully available.",
        "name": "is_uploading_completed",
        "type": "bool"
      },
      {
        "desc": "Size of the remote available part of the file, in bytes; 0 if unknown.",
        "name": "uploaded_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1remote_file.html"
  },
  "rtmpUrl": {
    "type": "object",
    "desc": "Represents an RTMP URL.",
    "fields": [
      {
        "desc": "The URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Stream key.",
        "name": "stream_key",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1rtmp_url.html"
  },
  "savedCredentials": {
    "type": "object",
    "desc": "Contains information about saved payment credentials.",
    "fields": [
      {
        "desc": "Unique identifier of the saved credentials.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the saved credentials.",
        "name": "title",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1saved_credentials.html"
  },
  "scopeAutosaveSettings": {
    "type": "object",
    "desc": "Contains autosave settings for an autosave settings scope.",
    "fields": [
      {
        "desc": "True, if photo autosave is enabled.",
        "name": "autosave_photos",
        "type": "bool"
      },
      {
        "desc": "True, if video autosave is enabled.",
        "name": "autosave_videos",
        "type": "bool"
      },
      {
        "desc": "The maximum size of a video file to be autosaved, in bytes; 512 KB - 4000 MB.",
        "name": "max_video_file_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1scope_autosave_settings.html"
  },
  "scopeNotificationSettings": {
    "type": "object",
    "desc": "Contains information about notification settings for several chats.",
    "fields": [
      {
        "desc": "Time left before notifications will be unmuted, in seconds.",
        "name": "mute_for",
        "type": "number"
      },
      {
        "desc": "Identifier of the notification sound to be played; 0 if sound is disabled.",
        "name": "sound_id",
        "type": "string"
      },
      {
        "desc": "True, if message content must be displayed in notifications.",
        "name": "show_preview",
        "type": "bool"
      },
      {
        "desc": "If true, story notifications are received only for the first 5 chats from topChatCategoryUsers regardless of the value of mute_stories.",
        "name": "use_default_mute_stories",
        "type": "bool"
      },
      {
        "desc": "True, if story notifications are disabled.",
        "name": "mute_stories",
        "type": "bool"
      },
      {
        "desc": "Identifier of the notification sound to be played for stories; 0 if sound is disabled.",
        "name": "story_sound_id",
        "type": "string"
      },
      {
        "desc": "True, if the sender of stories must be displayed in notifications.",
        "name": "show_story_sender",
        "type": "bool"
      },
      {
        "desc": "True, if notifications for incoming pinned messages will be created as for an ordinary unread message.",
        "name": "disable_pinned_message_notifications",
        "type": "bool"
      },
      {
        "desc": "True, if notifications for messages with mentions will be created as for an ordinary unread message.",
        "name": "disable_mention_notifications",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1scope_notification_settings.html"
  },
  "seconds": {
    "type": "object",
    "desc": "Contains a value representing a number of seconds.",
    "fields": [
      {
        "desc": "Number of seconds.",
        "name": "seconds",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1seconds.html"
  },
  "secretChat": {
    "type": "object",
    "desc": "Represents a secret chat.",
    "fields": [
      {
        "desc": "Secret chat identifier.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Identifier of the chat partner.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "State of the secret chat.",
        "name": "state",
        "type": "SecretChatState"
      },
      {
        "desc": "True, if the chat was created by the current user; false otherwise.",
        "name": "is_outbound",
        "type": "bool"
      },
      {
        "desc": "Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9. The pixels must be used to make a 12x12 square image filled from left to right, top to bottom. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers.",
        "name": "key_hash",
        "type": "bytes"
      },
      {
        "desc": "Secret chat layer; determines features supported by the chat partner's application. Nested text entities and underline and strikethrough entities are supported if the layer >= 101, files bigger than 2000MB are supported if the layer >= 143, spoiler and custom emoji text entities are supported if the layer >= 144.",
        "name": "layer",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1secret_chat.html"
  },
  "sentWebAppMessage": {
    "type": "object",
    "desc": "Information about the message sent by answerWebAppQuery.",
    "fields": [
      {
        "desc": "Identifier of the sent inline message, if known.",
        "name": "inline_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sent_web_app_message.html"
  },
  "session": {
    "type": "object",
    "desc": "Contains information about one session in a Telegram application used by the current user. Sessions must be shown to the user in the returned order.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "True, if this session is the current session.",
        "name": "is_current",
        "type": "bool"
      },
      {
        "desc": "True, if a 2-step verification password is needed to complete authorization of the session.",
        "name": "is_password_pending",
        "type": "bool"
      },
      {
        "desc": "True, if the session wasn't confirmed from another session.",
        "name": "is_unconfirmed",
        "type": "bool"
      },
      {
        "desc": "True, if incoming secret chats can be accepted by the session.",
        "name": "can_accept_secret_chats",
        "type": "bool"
      },
      {
        "desc": "True, if incoming calls can be accepted by the session.",
        "name": "can_accept_calls",
        "type": "bool"
      },
      {
        "desc": "Session type based on the system and application version, which can be used to display a corresponding icon.",
        "name": "type",
        "type": "SessionType"
      },
      {
        "desc": "Telegram API identifier, as provided by the application.",
        "name": "api_id",
        "type": "number"
      },
      {
        "desc": "Name of the application, as provided by the application.",
        "name": "application_name",
        "type": "string"
      },
      {
        "desc": "The version of the application, as provided by the application.",
        "name": "application_version",
        "type": "string"
      },
      {
        "desc": "True, if the application is an official application or uses the api_id of an official application.",
        "name": "is_official_application",
        "type": "bool"
      },
      {
        "desc": "Model of the device the application has been run or is running on, as provided by the application.",
        "name": "device_model",
        "type": "string"
      },
      {
        "desc": "Operating system the application has been run or is running on, as provided by the application.",
        "name": "platform",
        "type": "string"
      },
      {
        "desc": "Version of the operating system the application has been run or is running on, as provided by the application.",
        "name": "system_version",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user has logged in.",
        "name": "log_in_date",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the session was last used.",
        "name": "last_active_date",
        "type": "number"
      },
      {
        "desc": "IP address from which the session was created, in human-readable format.",
        "name": "ip_address",
        "type": "string"
      },
      {
        "desc": "A human-readable description of the location from which the session was created, based on the IP address.",
        "name": "location",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1session.html"
  },
  "sessions": {
    "type": "object",
    "desc": "Contains a list of sessions.",
    "fields": [
      {
        "desc": "List of sessions.",
        "name": "sessions",
        "type": "session"
      },
      {
        "desc": "Number of days of inactivity before sessions will automatically be terminated; 1-366 days.",
        "name": "inactive_session_ttl_days",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sessions.html"
  },
  "shippingOption": {
    "type": "object",
    "desc": "One shipping option.",
    "fields": [
      {
        "desc": "Shipping option identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Option title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "A list of objects used to calculate the total shipping costs.",
        "name": "price_parts",
        "type": "labeledPricePart"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1shipping_option.html"
  },
  "sponsoredMessage": {
    "type": "object",
    "desc": "Describes a sponsored message.",
    "fields": [
      {
        "desc": "Message identifier; unique for the chat to which the sponsored message belongs among both ordinary and sponsored messages.",
        "name": "message_id",
        "type": "string"
      },
      {
        "desc": "True, if the message needs to be labeled as \"recommended\" instead of \"sponsored\".",
        "name": "is_recommended",
        "type": "bool"
      },
      {
        "desc": "Content of the message. Currently, can be only of the type messageText.",
        "name": "content",
        "type": "MessageContent"
      },
      {
        "desc": "Information about the sponsor of the message.",
        "name": "sponsor",
        "type": "messageSponsor"
      },
      {
        "desc": "If non-empty, text for the message action button.",
        "name": "button_text",
        "type": "string"
      },
      {
        "desc": "If non-empty, additional information about the sponsored message to be shown along with the message.",
        "name": "additional_info",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sponsored_message.html"
  },
  "sponsoredMessages": {
    "type": "object",
    "desc": "Contains a list of sponsored messages.",
    "fields": [
      {
        "desc": "List of sponsored messages.",
        "name": "messages",
        "type": "sponsoredMessage"
      },
      {
        "desc": "The minimum number of messages between shown sponsored messages, or 0 if only one sponsored message must be shown after all ordinary messages.",
        "name": "messages_between",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sponsored_messages.html"
  },
  "statisticalValue": {
    "type": "object",
    "desc": "A value with information about its recent changes.",
    "fields": [
      {
        "desc": "The current value.",
        "name": "value",
        "type": "double"
      },
      {
        "desc": "The value for the previous day.",
        "name": "previous_value",
        "type": "double"
      },
      {
        "desc": "The growth rate of the value, as a percentage.",
        "name": "growth_rate_percentage",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1statistical_value.html"
  },
  "sticker": {
    "type": "object",
    "desc": "Describes a sticker.",
    "fields": [
      {
        "desc": "Unique sticker identifier within the set; 0 if none.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Identifier of the sticker set to which the sticker belongs; 0 if none.",
        "name": "set_id",
        "type": "string"
      },
      {
        "desc": "Sticker width; as defined by the sender.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Sticker height; as defined by the sender.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Emoji corresponding to the sticker.",
        "name": "emoji",
        "type": "string"
      },
      {
        "desc": "Sticker format.",
        "name": "format",
        "type": "StickerFormat"
      },
      {
        "desc": "Sticker's full type.",
        "name": "full_type",
        "type": "StickerFullType"
      },
      {
        "desc": "Sticker's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner.",
        "name": "outline",
        "type": "closedVectorPath"
      },
      {
        "desc": "Sticker thumbnail in WEBP or JPEG format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "File containing the sticker.",
        "name": "sticker",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker.html"
  },
  "stickerSet": {
    "type": "object",
    "desc": "Represents a sticker set.",
    "fields": [
      {
        "desc": "Identifier of the sticker set.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the sticker set.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Name of the sticker set.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "Sticker set thumbnail's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner.",
        "name": "thumbnail_outline",
        "type": "closedVectorPath"
      },
      {
        "desc": "True, if the sticker set has been installed by the current user.",
        "name": "is_installed",
        "type": "bool"
      },
      {
        "desc": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously.",
        "name": "is_archived",
        "type": "bool"
      },
      {
        "desc": "True, if the sticker set is official.",
        "name": "is_official",
        "type": "bool"
      },
      {
        "desc": "Format of the stickers in the set.",
        "name": "sticker_format",
        "type": "StickerFormat"
      },
      {
        "desc": "Type of the stickers in the set.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only.",
        "name": "needs_repainting",
        "type": "bool"
      },
      {
        "desc": "True for already viewed trending sticker sets.",
        "name": "is_viewed",
        "type": "bool"
      },
      {
        "desc": "List of stickers in this set.",
        "name": "stickers",
        "type": "sticker"
      },
      {
        "desc": "A list of emoji corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object.",
        "name": "emojis",
        "type": "emojis"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_set.html"
  },
  "stickerSetInfo": {
    "type": "object",
    "desc": "Represents short information about a sticker set.",
    "fields": [
      {
        "desc": "Identifier of the sticker set.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Title of the sticker set.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Name of the sticker set.",
        "name": "name",
        "type": "string"
      },
      {
        "desc": "Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "Sticker set thumbnail's outline represented as a list of closed vector paths; may be empty. The coordinate system origin is in the upper-left corner.",
        "name": "thumbnail_outline",
        "type": "closedVectorPath"
      },
      {
        "desc": "True, if the sticker set has been installed by the current user.",
        "name": "is_installed",
        "type": "bool"
      },
      {
        "desc": "True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously.",
        "name": "is_archived",
        "type": "bool"
      },
      {
        "desc": "True, if the sticker set is official.",
        "name": "is_official",
        "type": "bool"
      },
      {
        "desc": "Format of the stickers in the set.",
        "name": "sticker_format",
        "type": "StickerFormat"
      },
      {
        "desc": "Type of the stickers in the set.",
        "name": "sticker_type",
        "type": "StickerType"
      },
      {
        "desc": "True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only.",
        "name": "needs_repainting",
        "type": "bool"
      },
      {
        "desc": "True for already viewed trending sticker sets.",
        "name": "is_viewed",
        "type": "bool"
      },
      {
        "desc": "Total number of stickers in the set.",
        "name": "size",
        "type": "number"
      },
      {
        "desc": "Up to the first 5 stickers from the set, depending on the context. If the application needs more stickers the full sticker set needs to be requested.",
        "name": "covers",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_set_info.html"
  },
  "stickerSets": {
    "type": "object",
    "desc": "Represents a list of sticker sets.",
    "fields": [
      {
        "desc": "Approximate total number of sticker sets found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of sticker sets.",
        "name": "sets",
        "type": "stickerSetInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1sticker_sets.html"
  },
  "stickers": {
    "type": "object",
    "desc": "Represents a list of stickers.",
    "fields": [
      {
        "desc": "List of stickers.",
        "name": "stickers",
        "type": "sticker"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1stickers.html"
  },
  "storageStatistics": {
    "type": "object",
    "desc": "Contains the exact storage usage statistics split by chats and file type.",
    "fields": [
      {
        "desc": "Total size of files, in bytes.",
        "name": "size",
        "type": "string"
      },
      {
        "desc": "Total number of files.",
        "name": "count",
        "type": "number"
      },
      {
        "desc": "Statistics split by chats.",
        "name": "by_chat",
        "type": "storageStatisticsByChat"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics.html"
  },
  "storageStatisticsByChat": {
    "type": "object",
    "desc": "Contains the storage usage statistics for a specific chat.",
    "fields": [
      {
        "desc": "Chat identifier; 0 if none.",
        "name": "chat_id",
        "type": "string"
      },
      {
        "desc": "Total size of the files in the chat, in bytes.",
        "name": "size",
        "type": "string"
      },
      {
        "desc": "Total number of files in the chat.",
        "name": "count",
        "type": "number"
      },
      {
        "desc": "Statistics split by file types.",
        "name": "by_file_type",
        "type": "storageStatisticsByFileType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_by_chat.html"
  },
  "storageStatisticsByFileType": {
    "type": "object",
    "desc": "Contains the storage usage statistics for a specific file type.",
    "fields": [
      {
        "desc": "File type.",
        "name": "file_type",
        "type": "FileType"
      },
      {
        "desc": "Total size of the files, in bytes.",
        "name": "size",
        "type": "string"
      },
      {
        "desc": "Total number of files.",
        "name": "count",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_by_file_type.html"
  },
  "storageStatisticsFast": {
    "type": "object",
    "desc": "Contains approximate storage usage statistics, excluding files of unknown file type.",
    "fields": [
      {
        "desc": "Approximate total size of files, in bytes.",
        "name": "files_size",
        "type": "string"
      },
      {
        "desc": "Approximate number of files.",
        "name": "file_count",
        "type": "number"
      },
      {
        "desc": "Size of the database.",
        "name": "database_size",
        "type": "string"
      },
      {
        "desc": "Size of the language pack database.",
        "name": "language_pack_database_size",
        "type": "string"
      },
      {
        "desc": "Size of the TDLib internal log.",
        "name": "log_size",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1storage_statistics_fast.html"
  },
  "stories": {
    "type": "object",
    "desc": "Represents a list of stories.",
    "fields": [
      {
        "desc": "Approximate total number of stories found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "The list of stories.",
        "name": "stories",
        "type": "story"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1stories.html"
  },
  "story": {
    "type": "object",
    "desc": "Represents a story.",
    "fields": [
      {
        "desc": "Unique story identifier among stories of the given sender.",
        "name": "id",
        "type": "number"
      },
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the story was published.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "True, if the story is being sent by the current user.",
        "name": "is_being_sent",
        "type": "bool"
      },
      {
        "desc": "True, if the story is being edited by the current user.",
        "name": "is_being_edited",
        "type": "bool"
      },
      {
        "desc": "True, if the story was edited.",
        "name": "is_edited",
        "type": "bool"
      },
      {
        "desc": "True, if the story is saved in the sender's profile and will be available there after expiration.",
        "name": "is_pinned",
        "type": "bool"
      },
      {
        "desc": "True, if the story is visible only for the current user.",
        "name": "is_visible_only_for_self",
        "type": "bool"
      },
      {
        "desc": "True, if the story can be deleted.",
        "name": "can_be_deleted",
        "type": "bool"
      },
      {
        "desc": "True, if the story can be edited.",
        "name": "can_be_edited",
        "type": "bool"
      },
      {
        "desc": "True, if the story can be forwarded as a message. Otherwise, screenshots and saving of the story content must be also forbidden.",
        "name": "can_be_forwarded",
        "type": "bool"
      },
      {
        "desc": "True, if the story can be replied in the chat with the story sender.",
        "name": "can_be_replied",
        "type": "bool"
      },
      {
        "desc": "True, if the story's is_pinned value can be changed.",
        "name": "can_toggle_is_pinned",
        "type": "bool"
      },
      {
        "desc": "True, if the story statistics are available through getStoryStatistics.",
        "name": "can_get_statistics",
        "type": "bool"
      },
      {
        "desc": "True, if users viewed the story can be received through getStoryViewers.",
        "name": "can_get_viewers",
        "type": "bool"
      },
      {
        "desc": "True, if users viewed the story can't be received, because the story has expired more than getOption(\"story_viewers_expiration_delay\") seconds ago.",
        "name": "has_expired_viewers",
        "type": "bool"
      },
      {
        "desc": "Information about the original story; may be null if the story wasn't reposted.",
        "name": "repost_info",
        "type": "storyRepostInfo"
      },
      {
        "desc": "Information about interactions with the story; may be null if the story isn't owned or there were no interactions.",
        "name": "interaction_info",
        "type": "storyInteractionInfo"
      },
      {
        "desc": "Type of the chosen reaction; may be null if none.",
        "name": "chosen_reaction_type",
        "type": "ReactionType"
      },
      {
        "desc": "Privacy rules affecting story visibility; may be approximate for non-owned stories.",
        "name": "privacy_settings",
        "type": "StoryPrivacySettings"
      },
      {
        "desc": "Content of the story.",
        "name": "content",
        "type": "StoryContent"
      },
      {
        "desc": "Clickable areas to be shown on the story content.",
        "name": "areas",
        "type": "storyArea"
      },
      {
        "desc": "Caption of the story.",
        "name": "caption",
        "type": "formattedText"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story.html"
  },
  "storyArea": {
    "type": "object",
    "desc": "Describes a clickable rectangle area on a story media.",
    "fields": [
      {
        "desc": "Position of the area.",
        "name": "position",
        "type": "storyAreaPosition"
      },
      {
        "desc": "Type of the area.",
        "name": "type",
        "type": "StoryAreaType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_area.html"
  },
  "storyAreaPosition": {
    "type": "object",
    "desc": "Describes position of a clickable rectangle area on a story media.",
    "fields": [
      {
        "desc": "The abscissa of the rectangle's center, as a percentage of the media width.",
        "name": "x_percentage",
        "type": "double"
      },
      {
        "desc": "The ordinate of the rectangle's center, as a percentage of the media height.",
        "name": "y_percentage",
        "type": "double"
      },
      {
        "desc": "The width of the rectangle, as a percentage of the media width.",
        "name": "width_percentage",
        "type": "double"
      },
      {
        "desc": "The height of the rectangle, as a percentage of the media height.",
        "name": "height_percentage",
        "type": "double"
      },
      {
        "desc": "Clockwise rotation angle of the rectangle, in degrees; 0-360.",
        "name": "rotation_angle",
        "type": "double"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_area_position.html"
  },
  "storyFullId": {
    "type": "object",
    "desc": "Contains identifier of a story along with identifier of its sender.",
    "fields": [
      {
        "desc": "Identifier of the chat that posted the story.",
        "name": "sender_chat_id",
        "type": "string"
      },
      {
        "desc": "Unique story identifier among stories of the given sender.",
        "name": "story_id",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_full_id.html"
  },
  "storyInfo": {
    "type": "object",
    "desc": "Contains basic information about a story.",
    "fields": [
      {
        "desc": "Unique story identifier among stories of the given sender.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Point in time (Unix timestamp) when the story was published.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "True, if the story is available only to close friends.",
        "name": "is_for_close_friends",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_info.html"
  },
  "storyInteractionInfo": {
    "type": "object",
    "desc": "Contains information about interactions with a story.",
    "fields": [
      {
        "desc": "Number of times the story was viewed.",
        "name": "view_count",
        "type": "number"
      },
      {
        "desc": "Number of times the story was forwarded; 0 if none or unknown.",
        "name": "forward_count",
        "type": "number"
      },
      {
        "desc": "Number of reactions added to the story; 0 if none or unknown.",
        "name": "reaction_count",
        "type": "number"
      },
      {
        "desc": "Identifiers of at most 3 recent viewers of the story.",
        "name": "recent_viewer_user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_interaction_info.html"
  },
  "storyPublicForwards": {
    "type": "object",
    "desc": "Represents a list of public forwards and reposts of a story.",
    "fields": [
      {
        "desc": "Approximate total number of messages and stories found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of found public forwards and reposts.",
        "name": "forwards",
        "type": "StoryPublicForward"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_public_forwards.html"
  },
  "storyRepostInfo": {
    "type": "object",
    "desc": "Contains information about original story that was reposted.",
    "fields": [
      {
        "desc": "Origin of the story that was reposted.",
        "name": "origin",
        "type": "StoryOrigin"
      },
      {
        "desc": "True, if story content was modified during reposting; otherwise, story wasn't modified.",
        "name": "is_content_modified",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_repost_info.html"
  },
  "storyStatistics": {
    "type": "object",
    "desc": "A detailed statistics about a story.",
    "fields": [
      {
        "desc": "A graph containing number of story views and shares.",
        "name": "story_interaction_graph",
        "type": "StatisticalGraph"
      },
      {
        "desc": "A graph containing number of story reactions.",
        "name": "story_reaction_graph",
        "type": "StatisticalGraph"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_statistics.html"
  },
  "storyVideo": {
    "type": "object",
    "desc": "Describes a video file sent in a story.",
    "fields": [
      {
        "desc": "Duration of the video, in seconds.",
        "name": "duration",
        "type": "double"
      },
      {
        "desc": "Video width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Video height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets.",
        "name": "has_stickers",
        "type": "bool"
      },
      {
        "desc": "True, if the video has no sound.",
        "name": "is_animation",
        "type": "bool"
      },
      {
        "desc": "Video minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Video thumbnail in JPEG or MPEG4 format; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "Size of file prefix, which is supposed to be preloaded, in bytes.",
        "name": "preload_prefix_size",
        "type": "number"
      },
      {
        "desc": "File containing the video.",
        "name": "video",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_video.html"
  },
  "storyViewer": {
    "type": "object",
    "desc": "Represents a viewer of a story.",
    "fields": [
      {
        "desc": "User identifier of the viewer.",
        "name": "user_id",
        "type": "string"
      },
      {
        "desc": "Approximate point in time (Unix timestamp) when the story was viewed.",
        "name": "view_date",
        "type": "number"
      },
      {
        "desc": "Block list to which the user is added; may be null if none.",
        "name": "block_list",
        "type": "BlockList"
      },
      {
        "desc": "Type of the reaction that was chosen by the user; may be null if none.",
        "name": "chosen_reaction_type",
        "type": "ReactionType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_viewer.html"
  },
  "storyViewers": {
    "type": "object",
    "desc": "Represents a list of story viewers.",
    "fields": [
      {
        "desc": "Approximate total number of story viewers found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "Approximate total number of reactions set by found story viewers.",
        "name": "total_reaction_count",
        "type": "number"
      },
      {
        "desc": "List of story viewers.",
        "name": "viewers",
        "type": "storyViewer"
      },
      {
        "desc": "The offset for the next request. If empty, then there are no more results.",
        "name": "next_offset",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1story_viewers.html"
  },
  "supergroup": {
    "type": "object",
    "desc": "Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers.",
    "fields": [
      {
        "desc": "Supergroup or channel identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Usernames of the supergroup or channel; may be null.",
        "name": "usernames",
        "type": "usernames"
      },
      {
        "desc": "Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member.",
        "name": "date",
        "type": "number"
      },
      {
        "desc": "Status of the current user in the supergroup or channel; custom title will always be empty.",
        "name": "status",
        "type": "ChatMemberStatus"
      },
      {
        "desc": "Number of members in the supergroup or channel; 0 if unknown. Currently, it is guaranteed to be known only if the supergroup or channel was received through getChatSimilarChats, getChatsToSendStories, getCreatedPublicChats, getGroupsInCommon, getInactiveSupergroupChats, getSuitableDiscussionChats, getUserPrivacySettingRules, getVideoChatAvailableParticipants, searchChatsNearby, searchPublicChats, or in chatFolderInviteLinkInfo.missing_chat_ids, or for public chats in which where sent messages and posted stories from storyPublicForwards, or for public chats in which where sent messages from getMessagePublicForwards response.",
        "name": "member_count",
        "type": "number"
      },
      {
        "desc": "True, if the channel has a discussion group, or the supergroup is the designated discussion group for a channel.",
        "name": "has_linked_chat",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup is connected to a location, i.e. the supergroup is a location-based supergroup.",
        "name": "has_location",
        "type": "bool"
      },
      {
        "desc": "True, if messages sent to the channel need to contain information about the sender. This field is only applicable to channels.",
        "name": "sign_messages",
        "type": "bool"
      },
      {
        "desc": "True, if users need to join the supergroup before they can send messages. Always true for channels and non-discussion supergroups.",
        "name": "join_to_send_messages",
        "type": "bool"
      },
      {
        "desc": "True, if all users directly joining the supergroup need to be approved by supergroup administrators. Always false for channels and supergroups without username, location, or a linked chat.",
        "name": "join_by_request",
        "type": "bool"
      },
      {
        "desc": "True, if the slow mode is enabled in the supergroup.",
        "name": "is_slow_mode_enabled",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup is a channel.",
        "name": "is_channel",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup is a broadcast group, i.e. only administrators can send messages and there is no limit on the number of members.",
        "name": "is_broadcast_group",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup is a forum with topics.",
        "name": "is_forum",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup or channel is verified.",
        "name": "is_verified",
        "type": "bool"
      },
      {
        "desc": "If non-empty, contains a human-readable description of the reason why access to this supergroup or channel must be restricted.",
        "name": "restriction_reason",
        "type": "string"
      },
      {
        "desc": "True, if many users reported this supergroup or channel as a scam.",
        "name": "is_scam",
        "type": "bool"
      },
      {
        "desc": "True, if many users reported this supergroup or channel as a fake account.",
        "name": "is_fake",
        "type": "bool"
      },
      {
        "desc": "True, if the channel has non-expired stories available to the current user.",
        "name": "has_active_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the channel has unread non-expired stories available to the current user.",
        "name": "has_unread_active_stories",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup.html"
  },
  "supergroupFullInfo": {
    "type": "object",
    "desc": "Contains full information about a supergroup or channel.",
    "fields": [
      {
        "desc": "Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo.",
        "name": "photo",
        "type": "chatPhoto"
      },
      {
        "desc": "Supergroup or channel description.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Number of members in the supergroup or channel; 0 if unknown.",
        "name": "member_count",
        "type": "number"
      },
      {
        "desc": "Number of privileged users in the supergroup or channel; 0 if unknown.",
        "name": "administrator_count",
        "type": "number"
      },
      {
        "desc": "Number of restricted users in the supergroup; 0 if unknown.",
        "name": "restricted_count",
        "type": "number"
      },
      {
        "desc": "Number of users banned from chat; 0 if unknown.",
        "name": "banned_count",
        "type": "number"
      },
      {
        "desc": "Chat identifier of a discussion group for the channel, or a channel, for which the supergroup is the designated discussion group; 0 if none or unknown.",
        "name": "linked_chat_id",
        "type": "string"
      },
      {
        "desc": "Delay between consecutive sent messages for non-administrator supergroup members, in seconds.",
        "name": "slow_mode_delay",
        "type": "number"
      },
      {
        "desc": "Time left before next message can be sent in the supergroup, in seconds. An updateSupergroupFullInfo update is not triggered when value of this field changes, but both new and old values are non-zero.",
        "name": "slow_mode_delay_expires_in",
        "type": "double"
      },
      {
        "desc": "True, if members of the chat can be retrieved via getSupergroupMembers or searchChatMembers.",
        "name": "can_get_members",
        "type": "bool"
      },
      {
        "desc": "True, if non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers.",
        "name": "has_hidden_members",
        "type": "bool"
      },
      {
        "desc": "True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators.",
        "name": "can_hide_members",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup sticker set can be changed.",
        "name": "can_set_sticker_set",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup location can be changed.",
        "name": "can_set_location",
        "type": "bool"
      },
      {
        "desc": "True, if the supergroup or channel statistics are available.",
        "name": "can_get_statistics",
        "type": "bool"
      },
      {
        "desc": "True, if aggressive anti-spam checks can be enabled or disabled in the supergroup.",
        "name": "can_toggle_aggressive_anti_spam",
        "type": "bool"
      },
      {
        "desc": "True, if new chat members will have access to old messages. In public, discussion, of forum groups and all channels, old messages are always available, so this option affects only private non-forum supergroups without a linked chat. The value of this field is only available to chat administrators.",
        "name": "is_all_history_available",
        "type": "bool"
      },
      {
        "desc": "True, if aggressive anti-spam checks are enabled in the supergroup. The value of this field is only available to chat administrators.",
        "name": "has_aggressive_anti_spam_enabled",
        "type": "bool"
      },
      {
        "desc": "True, if the channel has pinned stories.",
        "name": "has_pinned_stories",
        "type": "bool"
      },
      {
        "desc": "Identifier of the supergroup sticker set; 0 if none.",
        "name": "sticker_set_id",
        "type": "string"
      },
      {
        "desc": "Location to which the supergroup is connected; may be null if none.",
        "name": "location",
        "type": "chatLocation"
      },
      {
        "desc": "Primary invite link for the chat; may be null. For chat administrators with can_invite_users right only.",
        "name": "invite_link",
        "type": "chatInviteLink"
      },
      {
        "desc": "List of commands of bots in the group.",
        "name": "bot_commands",
        "type": "botCommands"
      },
      {
        "desc": "Identifier of the basic group from which supergroup was upgraded; 0 if none.",
        "name": "upgraded_from_basic_group_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none.",
        "name": "upgraded_from_max_message_id",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1supergroup_full_info.html"
  },
  "tMeUrl": {
    "type": "object",
    "desc": "Represents a URL linking to an internal Telegram entity.",
    "fields": [
      {
        "desc": "URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Type of the URL.",
        "name": "type",
        "type": "TMeUrlType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_url.html"
  },
  "tMeUrls": {
    "type": "object",
    "desc": "Contains a list of t.me URLs.",
    "fields": [
      {
        "desc": "List of URLs.",
        "name": "urls",
        "type": "tMeUrl"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1t_me_urls.html"
  },
  "temporaryPasswordState": {
    "type": "object",
    "desc": "Returns information about the availability of a temporary password, which can be used for payments.",
    "fields": [
      {
        "desc": "True, if a temporary password is available.",
        "name": "has_password",
        "type": "bool"
      },
      {
        "desc": "Time left before the temporary password expires, in seconds.",
        "name": "valid_for",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1temporary_password_state.html"
  },
  "termsOfService": {
    "type": "object",
    "desc": "Contains Telegram terms of service.",
    "fields": [
      {
        "desc": "Text of the terms of service.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "The minimum age of a user to be able to accept the terms; 0 if age isn't restricted.",
        "name": "min_user_age",
        "type": "number"
      },
      {
        "desc": "True, if a blocking popup with terms of service must be shown to the user.",
        "name": "show_popup",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1terms_of_service.html"
  },
  "testBytes": {
    "type": "object",
    "desc": "A simple object containing a sequence of bytes; for testing only.",
    "fields": [
      {
        "desc": "Bytes.",
        "name": "value",
        "type": "bytes"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_bytes.html"
  },
  "testInt": {
    "type": "object",
    "desc": "A simple object containing a number; for testing only.",
    "fields": [
      {
        "desc": "Number.",
        "name": "value",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_int.html"
  },
  "testString": {
    "type": "object",
    "desc": "A simple object containing a string; for testing only.",
    "fields": [
      {
        "desc": "String.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_string.html"
  },
  "testVectorInt": {
    "type": "object",
    "desc": "A simple object containing a vector of numbers; for testing only.",
    "fields": [
      {
        "desc": "Vector of numbers.",
        "name": "value",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_int.html"
  },
  "testVectorIntObject": {
    "type": "object",
    "desc": "A simple object containing a vector of objects that hold a number; for testing only.",
    "fields": [
      {
        "desc": "Vector of objects.",
        "name": "value",
        "type": "testInt"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_int_object.html"
  },
  "testVectorString": {
    "type": "object",
    "desc": "A simple object containing a vector of strings; for testing only.",
    "fields": [
      {
        "desc": "Vector of strings.",
        "name": "value",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_string.html"
  },
  "testVectorStringObject": {
    "type": "object",
    "desc": "A simple object containing a vector of objects that hold a string; for testing only.",
    "fields": [
      {
        "desc": "Vector of objects.",
        "name": "value",
        "type": "testString"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1test_vector_string_object.html"
  },
  "text": {
    "type": "object",
    "desc": "Contains some text.",
    "fields": [
      {
        "desc": "Text.",
        "name": "text",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text.html"
  },
  "textEntities": {
    "type": "object",
    "desc": "Contains a list of text entities.",
    "fields": [
      {
        "desc": "List of text entities.",
        "name": "entities",
        "type": "textEntity"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entities.html"
  },
  "textEntity": {
    "type": "object",
    "desc": "Represents a part of the text that needs to be formatted in some unusual way.",
    "fields": [
      {
        "desc": "Offset of the entity, in UTF-16 code units.",
        "name": "offset",
        "type": "number"
      },
      {
        "desc": "Length of the entity, in UTF-16 code units.",
        "name": "length",
        "type": "number"
      },
      {
        "desc": "Type of the entity.",
        "name": "type",
        "type": "TextEntityType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_entity.html"
  },
  "textQuote": {
    "type": "object",
    "desc": "Describes manually or automatically chosen quote from another message.",
    "fields": [
      {
        "desc": "Text of the quote. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities can be present in the text.",
        "name": "text",
        "type": "formattedText"
      },
      {
        "desc": "Approximate quote position in the original message in UTF-16 code units as specified by the message sender.",
        "name": "position",
        "type": "number"
      },
      {
        "desc": "True, if the quote was manually chosen by the message sender.",
        "name": "is_manual",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1text_quote.html"
  },
  "themeParameters": {
    "type": "object",
    "desc": "Contains parameters of the application theme.",
    "fields": [
      {
        "desc": "A color of the background in the RGB24 format.",
        "name": "background_color",
        "type": "number"
      },
      {
        "desc": "A secondary color for the background in the RGB24 format.",
        "name": "secondary_background_color",
        "type": "number"
      },
      {
        "desc": "A color of the header background in the RGB24 format.",
        "name": "header_background_color",
        "type": "number"
      },
      {
        "desc": "A color of the section background in the RGB24 format.",
        "name": "section_background_color",
        "type": "number"
      },
      {
        "desc": "A color of text in the RGB24 format.",
        "name": "text_color",
        "type": "number"
      },
      {
        "desc": "An accent color of the text in the RGB24 format.",
        "name": "accent_text_color",
        "type": "number"
      },
      {
        "desc": "A color of text on the section headers in the RGB24 format.",
        "name": "section_header_text_color",
        "type": "number"
      },
      {
        "desc": "A color of the subtitle text in the RGB24 format.",
        "name": "subtitle_text_color",
        "type": "number"
      },
      {
        "desc": "A color of the text for destructive actions in the RGB24 format.",
        "name": "destructive_text_color",
        "type": "number"
      },
      {
        "desc": "A color of hints in the RGB24 format.",
        "name": "hint_color",
        "type": "number"
      },
      {
        "desc": "A color of links in the RGB24 format.",
        "name": "link_color",
        "type": "number"
      },
      {
        "desc": "A color of the buttons in the RGB24 format.",
        "name": "button_color",
        "type": "number"
      },
      {
        "desc": "A color of text on the buttons in the RGB24 format.",
        "name": "button_text_color",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1theme_parameters.html"
  },
  "themeSettings": {
    "type": "object",
    "desc": "Describes theme settings.",
    "fields": [
      {
        "desc": "Theme accent color in ARGB format.",
        "name": "accent_color",
        "type": "number"
      },
      {
        "desc": "The background to be used in chats; may be null.",
        "name": "background",
        "type": "background"
      },
      {
        "desc": "The fill to be used as a background for outgoing messages.",
        "name": "outgoing_message_fill",
        "type": "BackgroundFill"
      },
      {
        "desc": "If true, the freeform gradient fill needs to be animated on every sent message.",
        "name": "animate_outgoing_message_fill",
        "type": "bool"
      },
      {
        "desc": "Accent color of outgoing messages in ARGB format.",
        "name": "outgoing_message_accent_color",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1theme_settings.html"
  },
  "thumbnail": {
    "type": "object",
    "desc": "Represents a thumbnail.",
    "fields": [
      {
        "desc": "Thumbnail format.",
        "name": "format",
        "type": "ThumbnailFormat"
      },
      {
        "desc": "Thumbnail width.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Thumbnail height.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "The thumbnail.",
        "name": "file",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1thumbnail.html"
  },
  "trendingStickerSets": {
    "type": "object",
    "desc": "Represents a list of trending sticker sets.",
    "fields": [
      {
        "desc": "Approximate total number of trending sticker sets.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "List of trending sticker sets.",
        "name": "sets",
        "type": "stickerSetInfo"
      },
      {
        "desc": "True, if the list contains sticker sets with premium stickers.",
        "name": "is_premium",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1trending_sticker_sets.html"
  },
  "unconfirmedSession": {
    "type": "object",
    "desc": "Contains information about an unconfirmed session.",
    "fields": [
      {
        "desc": "Session identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Point in time (Unix timestamp) when the user has logged in.",
        "name": "log_in_date",
        "type": "number"
      },
      {
        "desc": "Model of the device that was used for the session creation, as provided by the application.",
        "name": "device_model",
        "type": "string"
      },
      {
        "desc": "A human-readable description of the location from which the session was created, based on the IP address.",
        "name": "location",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unconfirmed_session.html"
  },
  "unreadReaction": {
    "type": "object",
    "desc": "Contains information about an unread reaction to a message.",
    "fields": [
      {
        "desc": "Type of the reaction.",
        "name": "type",
        "type": "ReactionType"
      },
      {
        "desc": "Identifier of the sender, added the reaction.",
        "name": "sender_id",
        "type": "MessageSender"
      },
      {
        "desc": "True, if the reaction was added with a big animation.",
        "name": "is_big",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1unread_reaction.html"
  },
  "updates": {
    "type": "object",
    "desc": "Contains a list of updates.",
    "fields": [
      {
        "desc": "List of updates.",
        "name": "updates",
        "type": "Update"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1updates.html"
  },
  "user": {
    "type": "object",
    "desc": "Represents a user.",
    "fields": [
      {
        "desc": "User identifier.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "First name of the user.",
        "name": "first_name",
        "type": "string"
      },
      {
        "desc": "Last name of the user.",
        "name": "last_name",
        "type": "string"
      },
      {
        "desc": "Usernames of the user; may be null.",
        "name": "usernames",
        "type": "usernames"
      },
      {
        "desc": "Phone number of the user.",
        "name": "phone_number",
        "type": "string"
      },
      {
        "desc": "Current online status of the user.",
        "name": "status",
        "type": "UserStatus"
      },
      {
        "desc": "Profile photo of the user; may be null.",
        "name": "profile_photo",
        "type": "profilePhoto"
      },
      {
        "desc": "Identifier of the accent color for name, and backgrounds of profile photo, reply header, and link preview. For Telegram Premium users only.",
        "name": "accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown on the reply header background; 0 if none. For Telegram Premium users only.",
        "name": "background_custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "Identifier of the accent color for the user's profile; -1 if none. For Telegram Premium users only.",
        "name": "profile_accent_color_id",
        "type": "number"
      },
      {
        "desc": "Identifier of a custom emoji to be shown on the background of the user's profile; 0 if none. For Telegram Premium users only.",
        "name": "profile_background_custom_emoji_id",
        "type": "string"
      },
      {
        "desc": "Emoji status to be shown instead of the default Telegram Premium badge; may be null. For Telegram Premium users only.",
        "name": "emoji_status",
        "type": "emojiStatus"
      },
      {
        "desc": "The user is a contact of the current user.",
        "name": "is_contact",
        "type": "bool"
      },
      {
        "desc": "The user is a contact of the current user and the current user is a contact of the user.",
        "name": "is_mutual_contact",
        "type": "bool"
      },
      {
        "desc": "The user is a close friend of the current user; implies that the user is a contact.",
        "name": "is_close_friend",
        "type": "bool"
      },
      {
        "desc": "True, if the user is verified.",
        "name": "is_verified",
        "type": "bool"
      },
      {
        "desc": "True, if the user is a Telegram Premium user.",
        "name": "is_premium",
        "type": "bool"
      },
      {
        "desc": "True, if the user is Telegram support account.",
        "name": "is_support",
        "type": "bool"
      },
      {
        "desc": "If non-empty, it contains a human-readable description of the reason why access to this user must be restricted.",
        "name": "restriction_reason",
        "type": "string"
      },
      {
        "desc": "True, if many users reported this user as a scam.",
        "name": "is_scam",
        "type": "bool"
      },
      {
        "desc": "True, if many users reported this user as a fake account.",
        "name": "is_fake",
        "type": "bool"
      },
      {
        "desc": "True, if the user has non-expired stories available to the current user.",
        "name": "has_active_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the user has unread non-expired stories available to the current user.",
        "name": "has_unread_active_stories",
        "type": "bool"
      },
      {
        "desc": "If false, the user is inaccessible, and the only information known about the user is inside this class. Identifier of the user can't be passed to any method.",
        "name": "have_access",
        "type": "bool"
      },
      {
        "desc": "Type of the user.",
        "name": "type",
        "type": "UserType"
      },
      {
        "desc": "IETF language tag of the user's language; only available to bots.",
        "name": "language_code",
        "type": "string"
      },
      {
        "desc": "True, if the user added the current bot to attachment menu; only available to bots.",
        "name": "added_to_attachment_menu",
        "type": "bool"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user.html"
  },
  "userFullInfo": {
    "type": "object",
    "desc": "Contains full information about a user.",
    "fields": [
      {
        "desc": "User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos.",
        "name": "personal_photo",
        "type": "chatPhoto"
      },
      {
        "desc": "User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and personal_photo is null, then it is the same photo as in user.profile_photo and chat.photo.",
        "name": "photo",
        "type": "chatPhoto"
      },
      {
        "desc": "User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and both photo and personal_photo are null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos.",
        "name": "public_photo",
        "type": "chatPhoto"
      },
      {
        "desc": "Block list to which the user is added; may be null if none.",
        "name": "block_list",
        "type": "BlockList"
      },
      {
        "desc": "True, if the user can be called.",
        "name": "can_be_called",
        "type": "bool"
      },
      {
        "desc": "True, if a video call can be created with the user.",
        "name": "supports_video_calls",
        "type": "bool"
      },
      {
        "desc": "True, if the user can't be called due to their privacy settings.",
        "name": "has_private_calls",
        "type": "bool"
      },
      {
        "desc": "True, if the user can't be linked in forwarded messages due to their privacy settings.",
        "name": "has_private_forwards",
        "type": "bool"
      },
      {
        "desc": "True, if voice and video notes can't be sent or forwarded to the user.",
        "name": "has_restricted_voice_and_video_note_messages",
        "type": "bool"
      },
      {
        "desc": "True, if the user has pinned stories.",
        "name": "has_pinned_stories",
        "type": "bool"
      },
      {
        "desc": "True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used.",
        "name": "need_phone_number_privacy_exception",
        "type": "bool"
      },
      {
        "desc": "True, if the user set chat background for both chat users and it wasn't reverted yet.",
        "name": "set_chat_background",
        "type": "bool"
      },
      {
        "desc": "A short user bio; may be null for bots.",
        "name": "bio",
        "type": "formattedText"
      },
      {
        "desc": "The list of available options for gifting Telegram Premium to the user.",
        "name": "premium_gift_options",
        "type": "premiumPaymentOption"
      },
      {
        "desc": "Number of group chats where both the other user and the current user are a member; 0 for the current user.",
        "name": "group_in_common_count",
        "type": "number"
      },
      {
        "desc": "For bots, information about the bot; may be null if the user isn't a bot.",
        "name": "bot_info",
        "type": "botInfo"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_full_info.html"
  },
  "userLink": {
    "type": "object",
    "desc": "Contains an HTTPS URL, which can be used to get information about a user.",
    "fields": [
      {
        "desc": "The URL.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "Left time for which the link is valid, in seconds; 0 if the link is a public username link.",
        "name": "expires_in",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_link.html"
  },
  "userPrivacySettingRules": {
    "type": "object",
    "desc": "A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed.",
    "fields": [
      {
        "desc": "A list of rules.",
        "name": "rules",
        "type": "UserPrivacySettingRule"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_privacy_setting_rules.html"
  },
  "userSupportInfo": {
    "type": "object",
    "desc": "Contains custom information about the user.",
    "fields": [
      {
        "desc": "Information message.",
        "name": "message",
        "type": "formattedText"
      },
      {
        "desc": "Information author.",
        "name": "author",
        "type": "string"
      },
      {
        "desc": "Information change date.",
        "name": "date",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1user_support_info.html"
  },
  "usernames": {
    "type": "object",
    "desc": "Describes usernames assigned to a user, a supergroup, or a channel.",
    "fields": [
      {
        "desc": "List of active usernames; the first one must be shown as the primary username. The order of active usernames can be changed with reorderActiveUsernames, reorderBotActiveUsernames or reorderSupergroupActiveUsernames.",
        "name": "active_usernames",
        "type": "string"
      },
      {
        "desc": "List of currently disabled usernames; the username can be activated with toggleUsernameIsActive, toggleBotUsernameIsActive, or toggleSupergroupUsernameIsActive.",
        "name": "disabled_usernames",
        "type": "string"
      },
      {
        "desc": "The active username, which can be changed with setUsername or setSupergroupUsername.",
        "name": "editable_username",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1usernames.html"
  },
  "users": {
    "type": "object",
    "desc": "Represents a list of users.",
    "fields": [
      {
        "desc": "Approximate total number of users found.",
        "name": "total_count",
        "type": "number"
      },
      {
        "desc": "A list of user identifiers.",
        "name": "user_ids",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1users.html"
  },
  "validatedOrderInfo": {
    "type": "object",
    "desc": "Contains a temporary identifier of validated order information, which is stored for one hour, and the available shipping options.",
    "fields": [
      {
        "desc": "Temporary identifier of the order information.",
        "name": "order_info_id",
        "type": "string"
      },
      {
        "desc": "Available shipping options.",
        "name": "shipping_options",
        "type": "shippingOption"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1validated_order_info.html"
  },
  "venue": {
    "type": "object",
    "desc": "Describes a venue.",
    "fields": [
      {
        "desc": "Venue location; as defined by the sender.",
        "name": "location",
        "type": "location"
      },
      {
        "desc": "Venue name; as defined by the sender.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Venue address; as defined by the sender.",
        "name": "address",
        "type": "string"
      },
      {
        "desc": "Provider of the venue database; as defined by the sender. Currently, only \"foursquare\" and \"gplaces\" (Google Places) need to be supported.",
        "name": "provider",
        "type": "string"
      },
      {
        "desc": "Identifier of the venue in the provider database; as defined by the sender.",
        "name": "id",
        "type": "string"
      },
      {
        "desc": "Type of the venue in the provider database; as defined by the sender.",
        "name": "type",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1venue.html"
  },
  "video": {
    "type": "object",
    "desc": "Describes a video file.",
    "fields": [
      {
        "desc": "Duration of the video, in seconds; as defined by the sender.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Video width; as defined by the sender.",
        "name": "width",
        "type": "number"
      },
      {
        "desc": "Video height; as defined by the sender.",
        "name": "height",
        "type": "number"
      },
      {
        "desc": "Original name of the file; as defined by the sender.",
        "name": "file_name",
        "type": "string"
      },
      {
        "desc": "MIME type of the file; as defined by the sender.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets.",
        "name": "has_stickers",
        "type": "bool"
      },
      {
        "desc": "True, if the video is supposed to be streamed.",
        "name": "supports_streaming",
        "type": "bool"
      },
      {
        "desc": "Video minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "File containing the video.",
        "name": "video",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1video.html"
  },
  "videoChat": {
    "type": "object",
    "desc": "Describes a video chat.",
    "fields": [
      {
        "desc": "Group call identifier of an active video chat; 0 if none. Full information about the video chat can be received through the method getGroupCall.",
        "name": "group_call_id",
        "type": "number"
      },
      {
        "desc": "True, if the video chat has participants.",
        "name": "has_participants",
        "type": "bool"
      },
      {
        "desc": "Default group call participant identifier to join the video chat; may be null.",
        "name": "default_participant_id",
        "type": "MessageSender"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1video_chat.html"
  },
  "videoNote": {
    "type": "object",
    "desc": "Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format.",
    "fields": [
      {
        "desc": "Duration of the video, in seconds; as defined by the sender.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "A waveform representation of the video note's audio in 5-bit format; may be empty if unknown.",
        "name": "waveform",
        "type": "bytes"
      },
      {
        "desc": "Video width and height; as defined by the sender.",
        "name": "length",
        "type": "number"
      },
      {
        "desc": "Video minithumbnail; may be null.",
        "name": "minithumbnail",
        "type": "minithumbnail"
      },
      {
        "desc": "Video thumbnail in JPEG format; as defined by the sender; may be null.",
        "name": "thumbnail",
        "type": "thumbnail"
      },
      {
        "desc": "Result of speech recognition in the video note; may be null.",
        "name": "speech_recognition_result",
        "type": "SpeechRecognitionResult"
      },
      {
        "desc": "File containing the video.",
        "name": "video",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1video_note.html"
  },
  "voiceNote": {
    "type": "object",
    "desc": "Describes a voice note. The voice note must be encoded with the Opus codec, and stored inside an OGG container. Voice notes can have only a single audio channel.",
    "fields": [
      {
        "desc": "Duration of the voice note, in seconds; as defined by the sender.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "A waveform representation of the voice note in 5-bit format.",
        "name": "waveform",
        "type": "bytes"
      },
      {
        "desc": "MIME type of the file; as defined by the sender.",
        "name": "mime_type",
        "type": "string"
      },
      {
        "desc": "Result of speech recognition in the voice note; may be null.",
        "name": "speech_recognition_result",
        "type": "SpeechRecognitionResult"
      },
      {
        "desc": "File containing the voice note.",
        "name": "voice",
        "type": "file"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1voice_note.html"
  },
  "webApp": {
    "type": "object",
    "desc": "Describes a Web App. Use getInternalLink with internalLinkTypeWebApp to share the Web App.",
    "fields": [
      {
        "desc": "Web App short name.",
        "name": "short_name",
        "type": "string"
      },
      {
        "desc": "Web App title.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Web App description.",
        "name": "description",
        "type": "string"
      },
      {
        "desc": "Web App photo.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "Web App animation; may be null.",
        "name": "animation",
        "type": "animation"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_app.html"
  },
  "webAppInfo": {
    "type": "object",
    "desc": "Contains information about a Web App.",
    "fields": [
      {
        "desc": "Unique identifier for the Web App launch.",
        "name": "launch_id",
        "type": "string"
      },
      {
        "desc": "A Web App URL to open in a web view.",
        "name": "url",
        "type": "string"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_app_info.html"
  },
  "webPage": {
    "type": "object",
    "desc": "Describes a link preview.",
    "fields": [
      {
        "desc": "Original URL of the link.",
        "name": "url",
        "type": "string"
      },
      {
        "desc": "URL to display.",
        "name": "display_url",
        "type": "string"
      },
      {
        "desc": "Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else.",
        "name": "type",
        "type": "string"
      },
      {
        "desc": "Short name of the site (e.g., Google Docs, App Store).",
        "name": "site_name",
        "type": "string"
      },
      {
        "desc": "Title of the content.",
        "name": "title",
        "type": "string"
      },
      {
        "desc": "Description of the content.",
        "name": "description",
        "type": "formattedText"
      },
      {
        "desc": "Image representing the content; may be null.",
        "name": "photo",
        "type": "photo"
      },
      {
        "desc": "URL to show in the embedded preview.",
        "name": "embed_url",
        "type": "string"
      },
      {
        "desc": "MIME type of the embedded preview, (e.g., text/html or video/mp4).",
        "name": "embed_type",
        "type": "string"
      },
      {
        "desc": "Width of the embedded preview.",
        "name": "embed_width",
        "type": "number"
      },
      {
        "desc": "Height of the embedded preview.",
        "name": "embed_height",
        "type": "number"
      },
      {
        "desc": "Duration of the content, in seconds.",
        "name": "duration",
        "type": "number"
      },
      {
        "desc": "Author of the content.",
        "name": "author",
        "type": "string"
      },
      {
        "desc": "True, if size of media in the preview can be changed.",
        "name": "has_large_media",
        "type": "bool"
      },
      {
        "desc": "True, if large media preview must be shown; otherwise, the media preview must be shown small and only the first frame must be shown for videos.",
        "name": "show_large_media",
        "type": "bool"
      },
      {
        "desc": "True, if there is no need to show an ordinary open URL confirmation, when opening the URL from the preview, because the URL is shown in the message text in clear.",
        "name": "skip_confirmation",
        "type": "bool"
      },
      {
        "desc": "True, if the link preview must be shown above message text; otherwise, the link preview must be shown below the message text.",
        "name": "show_above_text",
        "type": "bool"
      },
      {
        "desc": "Preview of the content as an animation, if available; may be null.",
        "name": "animation",
        "type": "animation"
      },
      {
        "desc": "Preview of the content as an audio file, if available; may be null.",
        "name": "audio",
        "type": "audio"
      },
      {
        "desc": "Preview of the content as a document, if available; may be null.",
        "name": "document",
        "type": "document"
      },
      {
        "desc": "Preview of the content as a sticker for small WEBP files, if available; may be null.",
        "name": "sticker",
        "type": "sticker"
      },
      {
        "desc": "Preview of the content as a video, if available; may be null.",
        "name": "video",
        "type": "video"
      },
      {
        "desc": "Preview of the content as a video note, if available; may be null.",
        "name": "video_note",
        "type": "videoNote"
      },
      {
        "desc": "Preview of the content as a voice note, if available; may be null.",
        "name": "voice_note",
        "type": "voiceNote"
      },
      {
        "desc": "The identifier of the sender of the previewed story; 0 if none.",
        "name": "story_sender_chat_id",
        "type": "string"
      },
      {
        "desc": "The identifier of the previewed story; 0 if none.",
        "name": "story_id",
        "type": "number"
      },
      {
        "desc": "Version of web page instant view (currently, can be 1 or 2); 0 if none.",
        "name": "instant_view_version",
        "type": "number"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_page.html"
  },
  "webPageInstantView": {
    "type": "object",
    "desc": "Describes an instant view page for a web page.",
    "fields": [
      {
        "desc": "Content of the web page.",
        "name": "page_blocks",
        "type": "PageBlock"
      },
      {
        "desc": "Number of the instant view views; 0 if unknown.",
        "name": "view_count",
        "type": "number"
      },
      {
        "desc": "Version of the instant view; currently, can be 1 or 2.",
        "name": "version",
        "type": "number"
      },
      {
        "desc": "True, if the instant view must be shown from right to left.",
        "name": "is_rtl",
        "type": "bool"
      },
      {
        "desc": "True, if the instant view contains the full page. A network request might be needed to get the full web page instant view.",
        "name": "is_full",
        "type": "bool"
      },
      {
        "desc": "An internal link to be opened to leave feedback about the instant view.",
        "name": "feedback_link",
        "type": "InternalLinkType"
      }
    ],
    "extends": "TDObject",
    "url": "https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1web_page_instant_view.html"
  }
}